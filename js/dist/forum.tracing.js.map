{"version":3,"file":"forum.tracing.js","mappings":"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","sources":["webpack://@fof/sentry/./node_modules/@babel/runtime/helpers/regeneratorRuntime.js","webpack://@fof/sentry/./node_modules/@babel/runtime/regenerator/index.js","webpack://@fof/sentry/./node_modules/@babel/runtime/helpers/typeof.js","webpack://@fof/sentry/webpack/bootstrap","webpack://@fof/sentry/webpack/runtime/compat get default export","webpack://@fof/sentry/webpack/runtime/define property getters","webpack://@fof/sentry/webpack/runtime/global","webpack://@fof/sentry/webpack/runtime/hasOwnProperty shorthand","webpack://@fof/sentry/external root \"flarum.core.compat['forum/app']\"","webpack://@fof/sentry/../../src/worldwide.ts","webpack://@fof/sentry/../../src/logger.ts","webpack://@fof/sentry/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://@fof/sentry/../../src/is.ts","webpack://@fof/sentry/../../src/browser.ts","webpack://@fof/sentry/../../src/string.ts","webpack://@fof/sentry/../../src/object.ts","webpack://@fof/sentry/../../src/misc.ts","webpack://@fof/sentry/../../src/debug-build.ts","webpack://@fof/sentry/../../src/syncpromise.ts","webpack://@fof/sentry/../../src/eventProcessors.ts","webpack://@fof/sentry/../../src/time.ts","webpack://@fof/sentry/../../src/constants.ts","webpack://@fof/sentry/../../src/session.ts","webpack://@fof/sentry/../../src/stacktrace.ts","webpack://@fof/sentry/../../src/normalize.ts","webpack://@fof/sentry/../../src/memo.ts","webpack://@fof/sentry/../../src/baggage.ts","webpack://@fof/sentry/../../src/tracing.ts","webpack://@fof/sentry/../../../src/utils/spanUtils.ts","webpack://@fof/sentry/../../../src/utils/prepareEvent.ts","webpack://@fof/sentry/../../src/exports.ts","webpack://@fof/sentry/../../../src/utils/getRootSpan.ts","webpack://@fof/sentry/../../../src/tracing/dynamicSamplingContext.ts","webpack://@fof/sentry/../../../src/utils/applyScopeDataToEvent.ts","webpack://@fof/sentry/../../src/scope.ts","webpack://@fof/sentry/../../src/version.ts","webpack://@fof/sentry/../../src/hub.ts","webpack://@fof/sentry/../../src/integration.ts","webpack://@fof/sentry/../../../src/integrations/inboundfilters.ts","webpack://@fof/sentry/../../../src/integrations/functiontostring.ts","webpack://@fof/sentry/../../../src/helpers.ts","webpack://@fof/sentry/../../../../src/integrations/trycatch.ts","webpack://@fof/sentry/../../../src/instrument/_handlers.ts","webpack://@fof/sentry/../../../src/instrument/globalError.ts","webpack://@fof/sentry/../../../src/instrument/globalUnhandledRejection.ts","webpack://@fof/sentry/../../../src/eventbuilder.ts","webpack://@fof/sentry/../../../../src/integrations/globalhandlers.ts","webpack://@fof/sentry/../../../src/instrument/console.ts","webpack://@fof/sentry/../../../src/instrument/dom.ts","webpack://@fof/sentry/../../../src/instrument/xhr.ts","webpack://@fof/sentry/../../src/supports.ts","webpack://@fof/sentry/../../../src/instrument/fetch.ts","webpack://@fof/sentry/../../../src/vendor/supportsHistory.ts","webpack://@fof/sentry/../../../src/instrument/history.ts","webpack://@fof/sentry/../../src/severity.ts","webpack://@fof/sentry/../../src/url.ts","webpack://@fof/sentry/../../../../src/integrations/breadcrumbs.ts","webpack://@fof/sentry/../../src/aggregate-errors.ts","webpack://@fof/sentry/../../../../src/integrations/linkederrors.ts","webpack://@fof/sentry/../../../../src/integrations/httpcontext.ts","webpack://@fof/sentry/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@fof/sentry/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@fof/sentry/./node_modules/@babel/runtime/helpers/esm/typeof.js","webpack://@fof/sentry/./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","webpack://@fof/sentry/./node_modules/@babel/runtime/helpers/esm/toPrimitive.js","webpack://@fof/sentry/./node_modules/@babel/runtime/helpers/esm/createClass.js","webpack://@fof/sentry/../../src/semanticAttributes.ts","webpack://@fof/sentry/../../../src/tracing/spanstatus.ts","webpack://@fof/sentry/../../../src/tracing/span.ts","webpack://@fof/sentry/../../../src/utils/hasTracingEnabled.ts","webpack://@fof/sentry/../../../src/tracing/trace.ts","webpack://@fof/sentry/../../../src/tracing/transaction.ts","webpack://@fof/sentry/../../../src/tracing/idletransaction.ts","webpack://@fof/sentry/../../../src/tracing/utils.ts","webpack://@fof/sentry/../../../src/tracing/errors.ts","webpack://@fof/sentry/../../../src/tracing/sampling.ts","webpack://@fof/sentry/../../../src/tracing/hubextensions.ts","webpack://@fof/sentry/../../../src/common/debug-build.ts","webpack://@fof/sentry/../../../../../../src/browser/web-vitals/lib/polyfills/interactionCountPolyfill.ts","webpack://@fof/sentry/../../../src/browser/types.ts","webpack://@fof/sentry/../../../../../src/browser/web-vitals/lib/bindReporter.ts","webpack://@fof/sentry/../../../../../src/browser/web-vitals/lib/getNavigationEntry.ts","webpack://@fof/sentry/../../../../../src/browser/web-vitals/lib/getActivationStart.ts","webpack://@fof/sentry/../../../../../src/browser/web-vitals/lib/initMetric.ts","webpack://@fof/sentry/../../../../../src/browser/web-vitals/lib/generateUniqueID.ts","webpack://@fof/sentry/../../../../../src/browser/web-vitals/lib/observe.ts","webpack://@fof/sentry/../../../../../src/browser/web-vitals/lib/onHidden.ts","webpack://@fof/sentry/../../../../../src/browser/web-vitals/lib/getVisibilityWatcher.ts","webpack://@fof/sentry/../../../../src/browser/web-vitals/getINP.ts","webpack://@fof/sentry/../../../../src/browser/web-vitals/getLCP.ts","webpack://@fof/sentry/../../../../src/browser/web-vitals/onTTFB.ts","webpack://@fof/sentry/../../../src/browser/instrument.ts","webpack://@fof/sentry/../../../../src/browser/web-vitals/getCLS.ts","webpack://@fof/sentry/../../../../src/browser/web-vitals/getFID.ts","webpack://@fof/sentry/../../src/dsn.ts","webpack://@fof/sentry/../../src/envelope.ts","webpack://@fof/sentry/../../src/span.ts","webpack://@fof/sentry/../../../../src/browser/metrics/utils.ts","webpack://@fof/sentry/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack://@fof/sentry/../../../../src/browser/metrics/index.ts","webpack://@fof/sentry/../../../src/browser/request.ts","webpack://@fof/sentry/../../../src/common/fetch.ts","webpack://@fof/sentry/../../../src/browser/browsertracing.ts","webpack://@fof/sentry/../../../src/browser/router.ts","webpack://@fof/sentry/../../../src/browser/backgroundtab.ts","webpack://@fof/sentry/../../../src/tracing/measurement.ts","webpack://@fof/sentry/./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","webpack://@fof/sentry/./node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","webpack://@fof/sentry/./node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","webpack://@fof/sentry/./node_modules/@babel/runtime/helpers/esm/isNativeFunction.js","webpack://@fof/sentry/./node_modules/@babel/runtime/helpers/esm/construct.js","webpack://@fof/sentry/../../src/error.ts","webpack://@fof/sentry/../../src/api.ts","webpack://@fof/sentry/../../../src/metrics/envelope.ts","webpack://@fof/sentry/../../../src/metrics/utils.ts","webpack://@fof/sentry/../../src/baseclient.ts","webpack://@fof/sentry/../../../src/client.ts","webpack://@fof/sentry/../../../src/utils/sdkMetadata.ts","webpack://@fof/sentry/../../src/env.ts","webpack://@fof/sentry/../../../src/userfeedback.ts","webpack://@fof/sentry/../../src/clientreport.ts","webpack://@fof/sentry/../../../src/transports/base.ts","webpack://@fof/sentry/../../src/promisebuffer.ts","webpack://@fof/sentry/../../src/ratelimit.ts","webpack://@fof/sentry/../../../../src/transports/utils.ts","webpack://@fof/sentry/../../../../src/transports/fetch.ts","webpack://@fof/sentry/../../../src/stack-parsers.ts","webpack://@fof/sentry/../../../../src/integrations/dedupe.ts","webpack://@fof/sentry/../../../src/sdk.ts","webpack://@fof/sentry/../../../src/captureconsole.ts","webpack://@fof/sentry/./src/forum/index.js"],"sourcesContent":["var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _regeneratorRuntime() {\n  \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */\n  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {\n    return r;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  var t,\n    r = {},\n    e = Object.prototype,\n    n = e.hasOwnProperty,\n    o = \"function\" == typeof Symbol ? Symbol : {},\n    i = o.iterator || \"@@iterator\",\n    a = o.asyncIterator || \"@@asyncIterator\",\n    u = o.toStringTag || \"@@toStringTag\";\n  function c(t, r, e, n) {\n    return Object.defineProperty(t, r, {\n      value: e,\n      enumerable: !n,\n      configurable: !n,\n      writable: !n\n    });\n  }\n  try {\n    c({}, \"\");\n  } catch (t) {\n    c = function c(t, r, e) {\n      return t[r] = e;\n    };\n  }\n  function h(r, e, n, o) {\n    var i = e && e.prototype instanceof Generator ? e : Generator,\n      a = Object.create(i.prototype);\n    return c(a, \"_invoke\", function (r, e, n) {\n      var o = 1;\n      return function (i, a) {\n        if (3 === o) throw Error(\"Generator is already running\");\n        if (4 === o) {\n          if (\"throw\" === i) throw a;\n          return {\n            value: t,\n            done: !0\n          };\n        }\n        for (n.method = i, n.arg = a;;) {\n          var u = n.delegate;\n          if (u) {\n            var c = d(u, n);\n            if (c) {\n              if (c === f) continue;\n              return c;\n            }\n          }\n          if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) {\n            if (1 === o) throw o = 4, n.arg;\n            n.dispatchException(n.arg);\n          } else \"return\" === n.method && n.abrupt(\"return\", n.arg);\n          o = 3;\n          var h = s(r, e, n);\n          if (\"normal\" === h.type) {\n            if (o = n.done ? 4 : 2, h.arg === f) continue;\n            return {\n              value: h.arg,\n              done: n.done\n            };\n          }\n          \"throw\" === h.type && (o = 4, n.method = \"throw\", n.arg = h.arg);\n        }\n      };\n    }(r, n, new Context(o || [])), !0), a;\n  }\n  function s(t, r, e) {\n    try {\n      return {\n        type: \"normal\",\n        arg: t.call(r, e)\n      };\n    } catch (t) {\n      return {\n        type: \"throw\",\n        arg: t\n      };\n    }\n  }\n  r.wrap = h;\n  var f = {};\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n  var l = {};\n  c(l, i, function () {\n    return this;\n  });\n  var p = Object.getPrototypeOf,\n    y = p && p(p(x([])));\n  y && y !== e && n.call(y, i) && (l = y);\n  var v = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(l);\n  function g(t) {\n    [\"next\", \"throw\", \"return\"].forEach(function (r) {\n      c(t, r, function (t) {\n        return this._invoke(r, t);\n      });\n    });\n  }\n  function AsyncIterator(t, r) {\n    function e(o, i, a, u) {\n      var c = s(t[o], t, i);\n      if (\"throw\" !== c.type) {\n        var h = c.arg,\n          f = h.value;\n        return f && \"object\" == _typeof(f) && n.call(f, \"__await\") ? r.resolve(f.__await).then(function (t) {\n          e(\"next\", t, a, u);\n        }, function (t) {\n          e(\"throw\", t, a, u);\n        }) : r.resolve(f).then(function (t) {\n          h.value = t, a(h);\n        }, function (t) {\n          return e(\"throw\", t, a, u);\n        });\n      }\n      u(c.arg);\n    }\n    var o;\n    c(this, \"_invoke\", function (t, n) {\n      function i() {\n        return new r(function (r, o) {\n          e(t, n, r, o);\n        });\n      }\n      return o = o ? o.then(i, i) : i();\n    }, !0);\n  }\n  function d(r, e) {\n    var n = e.method,\n      o = r.i[n];\n    if (o === t) return e.delegate = null, \"throw\" === n && r.i[\"return\"] && (e.method = \"return\", e.arg = t, d(r, e), \"throw\" === e.method) || \"return\" !== n && (e.method = \"throw\", e.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), f;\n    var i = s(o, r.i, e.arg);\n    if (\"throw\" === i.type) return e.method = \"throw\", e.arg = i.arg, e.delegate = null, f;\n    var a = i.arg;\n    return a ? a.done ? (e[r.r] = a.value, e.next = r.n, \"return\" !== e.method && (e.method = \"next\", e.arg = t), e.delegate = null, f) : a : (e.method = \"throw\", e.arg = new TypeError(\"iterator result is not an object\"), e.delegate = null, f);\n  }\n  function w(t) {\n    this.tryEntries.push(t);\n  }\n  function m(r) {\n    var e = r[4] || {};\n    e.type = \"normal\", e.arg = t, r[4] = e;\n  }\n  function Context(t) {\n    this.tryEntries = [[-1]], t.forEach(w, this), this.reset(!0);\n  }\n  function x(r) {\n    if (null != r) {\n      var e = r[i];\n      if (e) return e.call(r);\n      if (\"function\" == typeof r.next) return r;\n      if (!isNaN(r.length)) {\n        var o = -1,\n          a = function e() {\n            for (; ++o < r.length;) if (n.call(r, o)) return e.value = r[o], e.done = !1, e;\n            return e.value = t, e.done = !0, e;\n          };\n        return a.next = a;\n      }\n    }\n    throw new TypeError(_typeof(r) + \" is not iterable\");\n  }\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, c(v, \"constructor\", GeneratorFunctionPrototype), c(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = c(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), r.isGeneratorFunction = function (t) {\n    var r = \"function\" == typeof t && t.constructor;\n    return !!r && (r === GeneratorFunction || \"GeneratorFunction\" === (r.displayName || r.name));\n  }, r.mark = function (t) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, c(t, u, \"GeneratorFunction\")), t.prototype = Object.create(v), t;\n  }, r.awrap = function (t) {\n    return {\n      __await: t\n    };\n  }, g(AsyncIterator.prototype), c(AsyncIterator.prototype, a, function () {\n    return this;\n  }), r.AsyncIterator = AsyncIterator, r.async = function (t, e, n, o, i) {\n    void 0 === i && (i = Promise);\n    var a = new AsyncIterator(h(t, e, n, o), i);\n    return r.isGeneratorFunction(e) ? a : a.next().then(function (t) {\n      return t.done ? t.value : a.next();\n    });\n  }, g(v), c(v, u, \"Generator\"), c(v, i, function () {\n    return this;\n  }), c(v, \"toString\", function () {\n    return \"[object Generator]\";\n  }), r.keys = function (t) {\n    var r = Object(t),\n      e = [];\n    for (var n in r) e.unshift(n);\n    return function t() {\n      for (; e.length;) if ((n = e.pop()) in r) return t.value = n, t.done = !1, t;\n      return t.done = !0, t;\n    };\n  }, r.values = x, Context.prototype = {\n    constructor: Context,\n    reset: function reset(r) {\n      if (this.prev = this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(m), !r) for (var e in this) \"t\" === e.charAt(0) && n.call(this, e) && !isNaN(+e.slice(1)) && (this[e] = t);\n    },\n    stop: function stop() {\n      this.done = !0;\n      var t = this.tryEntries[0][4];\n      if (\"throw\" === t.type) throw t.arg;\n      return this.rval;\n    },\n    dispatchException: function dispatchException(r) {\n      if (this.done) throw r;\n      var e = this;\n      function n(t) {\n        a.type = \"throw\", a.arg = r, e.next = t;\n      }\n      for (var o = e.tryEntries.length - 1; o >= 0; --o) {\n        var i = this.tryEntries[o],\n          a = i[4],\n          u = this.prev,\n          c = i[1],\n          h = i[2];\n        if (-1 === i[0]) return n(\"end\"), !1;\n        if (!c && !h) throw Error(\"try statement without catch or finally\");\n        if (null != i[0] && i[0] <= u) {\n          if (u < c) return this.method = \"next\", this.arg = t, n(c), !0;\n          if (u < h) return n(h), !1;\n        }\n      }\n    },\n    abrupt: function abrupt(t, r) {\n      for (var e = this.tryEntries.length - 1; e >= 0; --e) {\n        var n = this.tryEntries[e];\n        if (n[0] > -1 && n[0] <= this.prev && this.prev < n[2]) {\n          var o = n;\n          break;\n        }\n      }\n      o && (\"break\" === t || \"continue\" === t) && o[0] <= r && r <= o[2] && (o = null);\n      var i = o ? o[4] : {};\n      return i.type = t, i.arg = r, o ? (this.method = \"next\", this.next = o[2], f) : this.complete(i);\n    },\n    complete: function complete(t, r) {\n      if (\"throw\" === t.type) throw t.arg;\n      return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && r && (this.next = r), f;\n    },\n    finish: function finish(t) {\n      for (var r = this.tryEntries.length - 1; r >= 0; --r) {\n        var e = this.tryEntries[r];\n        if (e[2] === t) return this.complete(e[4], e[3]), m(e), f;\n      }\n    },\n    \"catch\": function _catch(t) {\n      for (var r = this.tryEntries.length - 1; r >= 0; --r) {\n        var e = this.tryEntries[r];\n        if (e[0] === t) {\n          var n = e[4];\n          if (\"throw\" === n.type) {\n            var o = n.arg;\n            m(e);\n          }\n          return o;\n        }\n      }\n      throw Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(r, e, n) {\n      return this.delegate = {\n        i: x(r),\n        r: e,\n        n: n\n      }, \"next\" === this.method && (this.arg = t), f;\n    }\n  }, r;\n}\nmodule.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","// TODO(Babel 8): Remove this file.\n\nvar runtime = require(\"../helpers/regeneratorRuntime\")();\nmodule.exports = runtime;\n\n// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports, _typeof(o);\n}\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","/**\n * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,\n * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.\n *\n * Note: This file was originally called `global.ts`, but was changed to unblock users which might be doing\n * string replaces with bundlers like Vite for `global` (would break imports that rely on importing from utils/src/global).\n *\n * Why worldwide?\n *\n * Why not?\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport type { Integration } from '@sentry/types';\n\nimport type { SdkSource } from './env';\n\n/** Internal global with common properties and Sentry extensions  */\nexport interface InternalGlobal {\n  navigator?: { userAgent?: string };\n  console: Console;\n  Sentry?: {\n    Integrations?: Integration[];\n  };\n  onerror?: {\n    (event: object | string, source?: string, lineno?: number, colno?: number, error?: Error): any;\n    __SENTRY_INSTRUMENTED__?: true;\n    __SENTRY_LOADER__?: true;\n  };\n  onunhandledrejection?: {\n    (event: unknown): boolean;\n    __SENTRY_INSTRUMENTED__?: true;\n    __SENTRY_LOADER__?: true;\n  };\n  SENTRY_ENVIRONMENT?: string;\n  SENTRY_DSN?: string;\n  SENTRY_RELEASE?: {\n    id?: string;\n  };\n  SENTRY_SDK_SOURCE?: SdkSource;\n  /**\n   * Debug IDs are indirectly injected by Sentry CLI or bundler plugins to directly reference a particular source map\n   * for resolving of a source file. The injected code will place an entry into the record for each loaded bundle/JS\n   * file.\n   */\n  _sentryDebugIds?: Record<string, string>;\n  __SENTRY__: {\n    globalEventProcessors: any;\n    hub: any;\n    logger: any;\n    extensions?: {\n      /** Extension methods for the hub, which are bound to the current Hub instance */\n      // eslint-disable-next-line @typescript-eslint/ban-types\n      [key: string]: Function;\n    };\n  };\n  /**\n   * Raw module metadata that is injected by bundler plugins.\n   *\n   * Keys are `error.stack` strings, values are the metadata.\n   */\n  _sentryModuleMetadata?: Record<string, any>;\n}\n\n// The code below for 'isGlobalObj' and 'GLOBAL_OBJ' was copied from core-js before modification\n// https://github.com/zloirock/core-js/blob/1b944df55282cdc99c90db5f49eb0b6eda2cc0a3/packages/core-js/internals/global.js\n// core-js has the following licence:\n//\n// Copyright (c) 2014-2022 Denis Pushkarev\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/** Returns 'obj' if it's the global object, otherwise returns undefined */\nfunction isGlobalObj(obj: { Math?: Math }): any | undefined {\n  return obj && obj.Math == Math ? obj : undefined;\n}\n\n/** Get's the global object for the current JavaScript runtime */\nexport const GLOBAL_OBJ: InternalGlobal =\n  (typeof globalThis == 'object' && isGlobalObj(globalThis)) ||\n  // eslint-disable-next-line no-restricted-globals\n  (typeof window == 'object' && isGlobalObj(window)) ||\n  (typeof self == 'object' && isGlobalObj(self)) ||\n  (typeof global == 'object' && isGlobalObj(global)) ||\n  (function (this: any) {\n    return this;\n  })() ||\n  {};\n\n/**\n * @deprecated Use GLOBAL_OBJ instead or WINDOW from @sentry/browser. This will be removed in v8\n */\nexport function getGlobalObject<T>(): T & InternalGlobal {\n  return GLOBAL_OBJ as T & InternalGlobal;\n}\n\n/**\n * Returns a global singleton contained in the global `__SENTRY__` object.\n *\n * If the singleton doesn't already exist in `__SENTRY__`, it will be created using the given factory\n * function and added to the `__SENTRY__` object.\n *\n * @param name name of the global singleton on __SENTRY__\n * @param creator creator Factory function to create the singleton if it doesn't already exist on `__SENTRY__`\n * @param obj (Optional) The global object on which to look for `__SENTRY__`, if not `GLOBAL_OBJ`'s return value\n * @returns the singleton\n */\nexport function getGlobalSingleton<T>(name: keyof InternalGlobal['__SENTRY__'], creator: () => T, obj?: unknown): T {\n  const gbl = (obj || GLOBAL_OBJ) as InternalGlobal;\n  const __SENTRY__ = (gbl.__SENTRY__ = gbl.__SENTRY__ || {});\n  const singleton = __SENTRY__[name] || (__SENTRY__[name] = creator());\n  return singleton;\n}\n","import type { ConsoleLevel } from '@sentry/types';\n\nimport { DEBUG_BUILD } from './debug-build';\nimport { GLOBAL_OBJ } from './worldwide';\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\nexport const CONSOLE_LEVELS: readonly ConsoleLevel[] = [\n  'debug',\n  'info',\n  'warn',\n  'error',\n  'log',\n  'assert',\n  'trace',\n] as const;\n\ntype LoggerMethod = (...args: unknown[]) => void;\ntype LoggerConsoleMethods = Record<ConsoleLevel, LoggerMethod>;\n\n/** This may be mutated by the console instrumentation. */\nexport const originalConsoleMethods: {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key in ConsoleLevel]?: (...args: any[]) => void;\n} = {};\n\n/** JSDoc */\ninterface Logger extends LoggerConsoleMethods {\n  disable(): void;\n  enable(): void;\n  isEnabled(): boolean;\n}\n\n/**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nexport function consoleSandbox<T>(callback: () => T): T {\n  if (!('console' in GLOBAL_OBJ)) {\n    return callback();\n  }\n\n  const console = GLOBAL_OBJ.console as Console;\n  const wrappedFuncs: Partial<LoggerConsoleMethods> = {};\n\n  const wrappedLevels = Object.keys(originalConsoleMethods) as ConsoleLevel[];\n\n  // Restore all wrapped console methods\n  wrappedLevels.forEach(level => {\n    const originalConsoleMethod = originalConsoleMethods[level] as LoggerMethod;\n    wrappedFuncs[level] = console[level] as LoggerMethod | undefined;\n    console[level] = originalConsoleMethod;\n  });\n\n  try {\n    return callback();\n  } finally {\n    // Revert restoration to wrapped state\n    wrappedLevels.forEach(level => {\n      console[level] = wrappedFuncs[level] as LoggerMethod;\n    });\n  }\n}\n\nfunction makeLogger(): Logger {\n  let enabled = false;\n  const logger: Partial<Logger> = {\n    enable: () => {\n      enabled = true;\n    },\n    disable: () => {\n      enabled = false;\n    },\n    isEnabled: () => enabled,\n  };\n\n  if (DEBUG_BUILD) {\n    CONSOLE_LEVELS.forEach(name => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      logger[name] = (...args: any[]) => {\n        if (enabled) {\n          consoleSandbox(() => {\n            GLOBAL_OBJ.console[name](`${PREFIX}[${name}]:`, ...args);\n          });\n        }\n      };\n    });\n  } else {\n    CONSOLE_LEVELS.forEach(name => {\n      logger[name] = () => undefined;\n    });\n  }\n\n  return logger as Logger;\n}\n\nexport const logger = makeLogger();\n","function _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\nexport { _extends as default };","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\nimport type { ParameterizedString, PolymorphicEvent, Primitive } from '@sentry/types';\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nconst objectToString = Object.prototype.toString;\n\n/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isError(wat: unknown): wat is Error {\n  switch (objectToString.call(wat)) {\n    case '[object Error]':\n    case '[object Exception]':\n    case '[object DOMException]':\n      return true;\n    default:\n      return isInstanceOf(wat, Error);\n  }\n}\n/**\n * Checks whether given value is an instance of the given built-in class.\n *\n * @param wat The value to be checked\n * @param className\n * @returns A boolean representing the result.\n */\nfunction isBuiltin(wat: unknown, className: string): boolean {\n  return objectToString.call(wat) === `[object ${className}]`;\n}\n\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isErrorEvent(wat: unknown): boolean {\n  return isBuiltin(wat, 'ErrorEvent');\n}\n\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMError(wat: unknown): boolean {\n  return isBuiltin(wat, 'DOMError');\n}\n\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMException(wat: unknown): boolean {\n  return isBuiltin(wat, 'DOMException');\n}\n\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isString(wat: unknown): wat is string {\n  return isBuiltin(wat, 'String');\n}\n\n/**\n * Checks whether given string is parameterized\n * {@link isParameterizedString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isParameterizedString(wat: unknown): wat is ParameterizedString {\n  return (\n    typeof wat === 'object' &&\n    wat !== null &&\n    '__sentry_template_string__' in wat &&\n    '__sentry_template_values__' in wat\n  );\n}\n\n/**\n * Checks whether given value is a primitive (undefined, null, number, boolean, string, bigint, symbol)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPrimitive(wat: unknown): wat is Primitive {\n  return wat === null || isParameterizedString(wat) || (typeof wat !== 'object' && typeof wat !== 'function');\n}\n\n/**\n * Checks whether given value's type is an object literal, or a class instance.\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPlainObject(wat: unknown): wat is Record<string, unknown> {\n  return isBuiltin(wat, 'Object');\n}\n\n/**\n * Checks whether given value's type is an Event instance\n * {@link isEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isEvent(wat: unknown): wat is PolymorphicEvent {\n  return typeof Event !== 'undefined' && isInstanceOf(wat, Event);\n}\n\n/**\n * Checks whether given value's type is an Element instance\n * {@link isElement}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isElement(wat: unknown): boolean {\n  return typeof Element !== 'undefined' && isInstanceOf(wat, Element);\n}\n\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isRegExp(wat: unknown): wat is RegExp {\n  return isBuiltin(wat, 'RegExp');\n}\n\n/**\n * Checks whether given value has a then function.\n * @param wat A value to be checked.\n */\nexport function isThenable(wat: any): wat is PromiseLike<any> {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return Boolean(wat && wat.then && typeof wat.then === 'function');\n}\n\n/**\n * Checks whether given value's type is a SyntheticEvent\n * {@link isSyntheticEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isSyntheticEvent(wat: unknown): boolean {\n  return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;\n}\n\n/**\n * Checks whether given value is NaN\n * {@link isNaN}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isNaN(wat: unknown): boolean {\n  return typeof wat === 'number' && wat !== wat;\n}\n\n/**\n * Checks whether given value's type is an instance of provided constructor.\n * {@link isInstanceOf}.\n *\n * @param wat A value to be checked.\n * @param base A constructor to be used in a check.\n * @returns A boolean representing the result.\n */\nexport function isInstanceOf(wat: any, base: any): boolean {\n  try {\n    return wat instanceof base;\n  } catch (_e) {\n    return false;\n  }\n}\n\ninterface VueViewModel {\n  // Vue3\n  __isVue?: boolean;\n  // Vue2\n  _isVue?: boolean;\n}\n/**\n * Checks whether given value's type is a Vue ViewModel.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isVueViewModel(wat: unknown): boolean {\n  // Not using Object.prototype.toString because in Vue 3 it would read the instance's Symbol(Symbol.toStringTag) property.\n  return !!(typeof wat === 'object' && wat !== null && ((wat as VueViewModel).__isVue || (wat as VueViewModel)._isVue));\n}\n","import { isString } from './is';\nimport { getGlobalObject } from './worldwide';\n\n// eslint-disable-next-line deprecation/deprecation\nconst WINDOW = getGlobalObject<Window>();\n\nconst DEFAULT_MAX_STRING_LENGTH = 80;\n\ntype SimpleNode = {\n  parentNode: SimpleNode;\n} | null;\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nexport function htmlTreeAsString(\n  elem: unknown,\n  options: string[] | { keyAttrs?: string[]; maxStringLength?: number } = {},\n): string {\n  if (!elem) {\n    return '<unknown>';\n  }\n\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    let currentElem = elem as SimpleNode;\n    const MAX_TRAVERSE_HEIGHT = 5;\n    const out = [];\n    let height = 0;\n    let len = 0;\n    const separator = ' > ';\n    const sepLength = separator.length;\n    let nextStr;\n    const keyAttrs = Array.isArray(options) ? options : options.keyAttrs;\n    const maxStringLength = (!Array.isArray(options) && options.maxStringLength) || DEFAULT_MAX_STRING_LENGTH;\n\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem, keyAttrs);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds maxStringLength\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= maxStringLength)) {\n        break;\n      }\n\n      out.push(nextStr);\n\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(el: unknown, keyAttrs?: string[]): string {\n  const elem = el as {\n    tagName?: string;\n    id?: string;\n    className?: string;\n    getAttribute(key: string): string;\n  };\n\n  const out = [];\n  let className;\n  let classes;\n  let key;\n  let attr;\n  let i;\n\n  if (!elem || !elem.tagName) {\n    return '';\n  }\n\n  // @ts-expect-error WINDOW has HTMLElement\n  if (WINDOW.HTMLElement) {\n    // If using the component name annotation plugin, this value may be available on the DOM node\n    if (elem instanceof HTMLElement && elem.dataset && elem.dataset['sentryComponent']) {\n      return elem.dataset['sentryComponent'];\n    }\n  }\n\n  out.push(elem.tagName.toLowerCase());\n\n  // Pairs of attribute keys defined in `serializeAttribute` and their values on element.\n  const keyAttrPairs =\n    keyAttrs && keyAttrs.length\n      ? keyAttrs.filter(keyAttr => elem.getAttribute(keyAttr)).map(keyAttr => [keyAttr, elem.getAttribute(keyAttr)])\n      : null;\n\n  if (keyAttrPairs && keyAttrPairs.length) {\n    keyAttrPairs.forEach(keyAttrPair => {\n      out.push(`[${keyAttrPair[0]}=\"${keyAttrPair[1]}\"]`);\n    });\n  } else {\n    if (elem.id) {\n      out.push(`#${elem.id}`);\n    }\n\n    // eslint-disable-next-line prefer-const\n    className = elem.className;\n    if (className && isString(className)) {\n      classes = className.split(/\\s+/);\n      for (i = 0; i < classes.length; i++) {\n        out.push(`.${classes[i]}`);\n      }\n    }\n  }\n  const allowedAttrs = ['aria-label', 'type', 'name', 'title', 'alt'];\n  for (i = 0; i < allowedAttrs.length; i++) {\n    key = allowedAttrs[i];\n    attr = elem.getAttribute(key);\n    if (attr) {\n      out.push(`[${key}=\"${attr}\"]`);\n    }\n  }\n  return out.join('');\n}\n\n/**\n * A safe form of location.href\n */\nexport function getLocationHref(): string {\n  try {\n    return WINDOW.document.location.href;\n  } catch (oO) {\n    return '';\n  }\n}\n\n/**\n * Gets a DOM element by using document.querySelector.\n *\n * This wrapper will first check for the existance of the function before\n * actually calling it so that we don't have to take care of this check,\n * every time we want to access the DOM.\n *\n * Reason: DOM/querySelector is not available in all environments.\n *\n * We have to cast to any because utils can be consumed by a variety of environments,\n * and we don't want to break TS users. If you know what element will be selected by\n * `document.querySelector`, specify it as part of the generic call. For example,\n * `const element = getDomElement<Element>('selector');`\n *\n * @param selector the selector string passed on to document.querySelector\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function getDomElement<E = any>(selector: string): E | null {\n  if (WINDOW.document && WINDOW.document.querySelector) {\n    return WINDOW.document.querySelector(selector) as unknown as E;\n  }\n  return null;\n}\n\n/**\n * Given a DOM element, traverses up the tree until it finds the first ancestor node\n * that has the `data-sentry-component` attribute. This attribute is added at build-time\n * by projects that have the component name annotation plugin installed.\n *\n * @returns a string representation of the component for the provided DOM element, or `null` if not found\n */\nexport function getComponentName(elem: unknown): string | null {\n  // @ts-expect-error WINDOW has HTMLElement\n  if (!WINDOW.HTMLElement) {\n    return null;\n  }\n\n  let currentElem = elem as SimpleNode;\n  const MAX_TRAVERSE_HEIGHT = 5;\n  for (let i = 0; i < MAX_TRAVERSE_HEIGHT; i++) {\n    if (!currentElem) {\n      return null;\n    }\n\n    if (currentElem instanceof HTMLElement && currentElem.dataset['sentryComponent']) {\n      return currentElem.dataset['sentryComponent'];\n    }\n\n    currentElem = currentElem.parentNode;\n  }\n\n  return null;\n}\n","import { isRegExp, isString, isVueViewModel } from './is';\n\nexport { escapeStringForRegex } from './vendor/escapeStringForRegex';\n\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string (0 = unlimited)\n * @returns string Encoded\n */\nexport function truncate(str: string, max: number = 0): string {\n  if (typeof str !== 'string' || max === 0) {\n    return str;\n  }\n  return str.length <= max ? str : `${str.slice(0, max)}...`;\n}\n\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\nexport function snipLine(line: string, colno: number): string {\n  let newLine = line;\n  const lineLength = newLine.length;\n  if (lineLength <= 150) {\n    return newLine;\n  }\n  if (colno > lineLength) {\n    // eslint-disable-next-line no-param-reassign\n    colno = lineLength;\n  }\n\n  let start = Math.max(colno - 60, 0);\n  if (start < 5) {\n    start = 0;\n  }\n\n  let end = Math.min(start + 140, lineLength);\n  if (end > lineLength - 5) {\n    end = lineLength;\n  }\n  if (end === lineLength) {\n    start = Math.max(end - 140, 0);\n  }\n\n  newLine = newLine.slice(start, end);\n  if (start > 0) {\n    newLine = `'{snip} ${newLine}`;\n  }\n  if (end < lineLength) {\n    newLine += ' {snip}';\n  }\n\n  return newLine;\n}\n\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function safeJoin(input: any[], delimiter?: string): string {\n  if (!Array.isArray(input)) {\n    return '';\n  }\n\n  const output = [];\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (let i = 0; i < input.length; i++) {\n    const value = input[i];\n    try {\n      // This is a hack to fix a Vue3-specific bug that causes an infinite loop of\n      // console warnings. This happens when a Vue template is rendered with\n      // an undeclared variable, which we try to stringify, ultimately causing\n      // Vue to issue another warning which repeats indefinitely.\n      // see: https://github.com/getsentry/sentry-javascript/pull/8981\n      if (isVueViewModel(value)) {\n        output.push('[VueViewModel]');\n      } else {\n        output.push(String(value));\n      }\n    } catch (e) {\n      output.push('[value cannot be serialized]');\n    }\n  }\n\n  return output.join(delimiter);\n}\n\n/**\n * Checks if the given value matches a regex or string\n *\n * @param value The string to test\n * @param pattern Either a regex or a string against which `value` will be matched\n * @param requireExactStringMatch If true, `value` must match `pattern` exactly. If false, `value` will match\n * `pattern` if it contains `pattern`. Only applies to string-type patterns.\n */\nexport function isMatchingPattern(\n  value: string,\n  pattern: RegExp | string,\n  requireExactStringMatch: boolean = false,\n): boolean {\n  if (!isString(value)) {\n    return false;\n  }\n\n  if (isRegExp(pattern)) {\n    return pattern.test(value);\n  }\n  if (isString(pattern)) {\n    return requireExactStringMatch ? value === pattern : value.includes(pattern);\n  }\n\n  return false;\n}\n\n/**\n * Test the given string against an array of strings and regexes. By default, string matching is done on a\n * substring-inclusion basis rather than a strict equality basis\n *\n * @param testString The string to test\n * @param patterns The patterns against which to test the string\n * @param requireExactStringMatch If true, `testString` must match one of the given string patterns exactly in order to\n * count. If false, `testString` will match a string pattern if it contains that pattern.\n * @returns\n */\nexport function stringMatchesSomePattern(\n  testString: string,\n  patterns: Array<string | RegExp> = [],\n  requireExactStringMatch: boolean = false,\n): boolean {\n  return patterns.some(pattern => isMatchingPattern(testString, pattern, requireExactStringMatch));\n}\n","/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { WrappedFunction } from '@sentry/types';\n\nimport { htmlTreeAsString } from './browser';\nimport { DEBUG_BUILD } from './debug-build';\nimport { isElement, isError, isEvent, isInstanceOf, isPlainObject, isPrimitive } from './is';\nimport { logger } from './logger';\nimport { truncate } from './string';\n\n/**\n * Replace a method in an object with a wrapped version of itself.\n *\n * @param source An object that contains a method to be wrapped.\n * @param name The name of the method to be wrapped.\n * @param replacementFactory A higher-order function that takes the original version of the given method and returns a\n * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to\n * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other\n * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.\n * @returns void\n */\nexport function fill(source: { [key: string]: any }, name: string, replacementFactory: (...args: any[]) => any): void {\n  if (!(name in source)) {\n    return;\n  }\n\n  const original = source[name] as () => any;\n  const wrapped = replacementFactory(original) as WrappedFunction;\n\n  // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n  // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n  if (typeof wrapped === 'function') {\n    markFunctionWrapped(wrapped, original);\n  }\n\n  source[name] = wrapped;\n}\n\n/**\n * Defines a non-enumerable property on the given object.\n *\n * @param obj The object on which to set the property\n * @param name The name of the property to be set\n * @param value The value to which to set the property\n */\nexport function addNonEnumerableProperty(obj: object, name: string, value: unknown): void {\n  try {\n    Object.defineProperty(obj, name, {\n      // enumerable: false, // the default, so we can save on bundle size by not explicitly setting it\n      value: value,\n      writable: true,\n      configurable: true,\n    });\n  } catch (o_O) {\n    DEBUG_BUILD && logger.log(`Failed to add non-enumerable property \"${name}\" to object`, obj);\n  }\n}\n\n/**\n * Remembers the original function on the wrapped function and\n * patches up the prototype.\n *\n * @param wrapped the wrapper function\n * @param original the original function that gets wrapped\n */\nexport function markFunctionWrapped(wrapped: WrappedFunction, original: WrappedFunction): void {\n  try {\n    const proto = original.prototype || {};\n    wrapped.prototype = original.prototype = proto;\n    addNonEnumerableProperty(wrapped, '__sentry_original__', original);\n  } catch (o_O) {} // eslint-disable-line no-empty\n}\n\n/**\n * This extracts the original function if available.  See\n * `markFunctionWrapped` for more information.\n *\n * @param func the function to unwrap\n * @returns the unwrapped version of the function if available.\n */\nexport function getOriginalFunction(func: WrappedFunction): WrappedFunction | undefined {\n  return func.__sentry_original__;\n}\n\n/**\n * Encodes given object into url-friendly format\n *\n * @param object An object that contains serializable values\n * @returns string Encoded\n */\nexport function urlEncode(object: { [key: string]: any }): string {\n  return Object.keys(object)\n    .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(object[key])}`)\n    .join('&');\n}\n\n/**\n * Transforms any `Error` or `Event` into a plain object with all of their enumerable properties, and some of their\n * non-enumerable properties attached.\n *\n * @param value Initial source that we have to transform in order for it to be usable by the serializer\n * @returns An Event or Error turned into an object - or the value argurment itself, when value is neither an Event nor\n *  an Error.\n */\nexport function convertToPlainObject<V>(\n  value: V,\n):\n  | {\n      [ownProps: string]: unknown;\n      type: string;\n      target: string;\n      currentTarget: string;\n      detail?: unknown;\n    }\n  | {\n      [ownProps: string]: unknown;\n      message: string;\n      name: string;\n      stack?: string;\n    }\n  | V {\n  if (isError(value)) {\n    return {\n      message: value.message,\n      name: value.name,\n      stack: value.stack,\n      ...getOwnProperties(value),\n    };\n  } else if (isEvent(value)) {\n    const newObj: {\n      [ownProps: string]: unknown;\n      type: string;\n      target: string;\n      currentTarget: string;\n      detail?: unknown;\n    } = {\n      type: value.type,\n      target: serializeEventTarget(value.target),\n      currentTarget: serializeEventTarget(value.currentTarget),\n      ...getOwnProperties(value),\n    };\n\n    if (typeof CustomEvent !== 'undefined' && isInstanceOf(value, CustomEvent)) {\n      newObj.detail = value.detail;\n    }\n\n    return newObj;\n  } else {\n    return value;\n  }\n}\n\n/** Creates a string representation of the target of an `Event` object */\nfunction serializeEventTarget(target: unknown): string {\n  try {\n    return isElement(target) ? htmlTreeAsString(target) : Object.prototype.toString.call(target);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/** Filters out all but an object's own properties */\nfunction getOwnProperties(obj: unknown): { [key: string]: unknown } {\n  if (typeof obj === 'object' && obj !== null) {\n    const extractedProps: { [key: string]: unknown } = {};\n    for (const property in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, property)) {\n        extractedProps[property] = (obj as Record<string, unknown>)[property];\n      }\n    }\n    return extractedProps;\n  } else {\n    return {};\n  }\n}\n\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\nexport function extractExceptionKeysForMessage(exception: Record<string, unknown>, maxLength: number = 40): string {\n  const keys = Object.keys(convertToPlainObject(exception));\n  keys.sort();\n\n  if (!keys.length) {\n    return '[object has no keys]';\n  }\n\n  if (keys[0].length >= maxLength) {\n    return truncate(keys[0], maxLength);\n  }\n\n  for (let includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    const serialized = keys.slice(0, includedKeys).join(', ');\n    if (serialized.length > maxLength) {\n      continue;\n    }\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n    return truncate(serialized, maxLength);\n  }\n\n  return '';\n}\n\n/**\n * Given any object, return a new object having removed all fields whose value was `undefined`.\n * Works recursively on objects and arrays.\n *\n * Attention: This function keeps circular references in the returned object.\n */\nexport function dropUndefinedKeys<T>(inputValue: T): T {\n  // This map keeps track of what already visited nodes map to.\n  // Our Set - based memoBuilder doesn't work here because we want to the output object to have the same circular\n  // references as the input object.\n  const memoizationMap = new Map<unknown, unknown>();\n\n  // This function just proxies `_dropUndefinedKeys` to keep the `memoBuilder` out of this function's API\n  return _dropUndefinedKeys(inputValue, memoizationMap);\n}\n\nfunction _dropUndefinedKeys<T>(inputValue: T, memoizationMap: Map<unknown, unknown>): T {\n  if (isPojo(inputValue)) {\n    // If this node has already been visited due to a circular reference, return the object it was mapped to in the new object\n    const memoVal = memoizationMap.get(inputValue);\n    if (memoVal !== undefined) {\n      return memoVal as T;\n    }\n\n    const returnValue: { [key: string]: any } = {};\n    // Store the mapping of this value in case we visit it again, in case of circular data\n    memoizationMap.set(inputValue, returnValue);\n\n    for (const key of Object.keys(inputValue)) {\n      if (typeof inputValue[key] !== 'undefined') {\n        returnValue[key] = _dropUndefinedKeys(inputValue[key], memoizationMap);\n      }\n    }\n\n    return returnValue as T;\n  }\n\n  if (Array.isArray(inputValue)) {\n    // If this node has already been visited due to a circular reference, return the array it was mapped to in the new object\n    const memoVal = memoizationMap.get(inputValue);\n    if (memoVal !== undefined) {\n      return memoVal as T;\n    }\n\n    const returnValue: unknown[] = [];\n    // Store the mapping of this value in case we visit it again, in case of circular data\n    memoizationMap.set(inputValue, returnValue);\n\n    inputValue.forEach((item: unknown) => {\n      returnValue.push(_dropUndefinedKeys(item, memoizationMap));\n    });\n\n    return returnValue as unknown as T;\n  }\n\n  return inputValue;\n}\n\nfunction isPojo(input: unknown): input is Record<string, unknown> {\n  if (!isPlainObject(input)) {\n    return false;\n  }\n\n  try {\n    const name = (Object.getPrototypeOf(input) as { constructor: { name: string } }).constructor.name;\n    return !name || name === 'Object';\n  } catch {\n    return true;\n  }\n}\n\n/**\n * Ensure that something is an object.\n *\n * Turns `undefined` and `null` into `String`s and all other primitives into instances of their respective wrapper\n * classes (String, Boolean, Number, etc.). Acts as the identity function on non-primitives.\n *\n * @param wat The subject of the objectification\n * @returns A version of `wat` which can safely be used with `Object` class methods\n */\nexport function objectify(wat: unknown): typeof Object {\n  let objectified;\n  switch (true) {\n    case wat === undefined || wat === null:\n      objectified = new String(wat);\n      break;\n\n    // Though symbols and bigints do have wrapper classes (`Symbol` and `BigInt`, respectively), for whatever reason\n    // those classes don't have constructors which can be used with the `new` keyword. We therefore need to cast each as\n    // an object in order to wrap it.\n    case typeof wat === 'symbol' || typeof wat === 'bigint':\n      objectified = Object(wat);\n      break;\n\n    // this will catch the remaining primitives: `String`, `Number`, and `Boolean`\n    case isPrimitive(wat):\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      objectified = new (wat as any).constructor(wat);\n      break;\n\n    // by process of elimination, at this point we know that `wat` must already be an object\n    default:\n      objectified = wat;\n      break;\n  }\n  return objectified;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { Event, Exception, Mechanism, StackFrame } from '@sentry/types';\n\nimport { addNonEnumerableProperty } from './object';\nimport { snipLine } from './string';\nimport { GLOBAL_OBJ } from './worldwide';\n\ninterface CryptoInternal {\n  getRandomValues(array: Uint8Array): Uint8Array;\n  randomUUID?(): string;\n}\n\n/** An interface for common properties on global */\ninterface CryptoGlobal {\n  msCrypto?: CryptoInternal;\n  crypto?: CryptoInternal;\n}\n\n/**\n * UUID4 generator\n *\n * @returns string Generated UUID4.\n */\nexport function uuid4(): string {\n  const gbl = GLOBAL_OBJ as typeof GLOBAL_OBJ & CryptoGlobal;\n  const crypto = gbl.crypto || gbl.msCrypto;\n\n  let getRandomByte = (): number => Math.random() * 16;\n  try {\n    if (crypto && crypto.randomUUID) {\n      return crypto.randomUUID().replace(/-/g, '');\n    }\n    if (crypto && crypto.getRandomValues) {\n      getRandomByte = () => {\n        // crypto.getRandomValues might return undefined instead of the typed array\n        // in old Chromium versions (e.g. 23.0.1235.0 (151422))\n        // However, `typedArray` is still filled in-place.\n        // @see https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues#typedarray\n        const typedArray = new Uint8Array(1);\n        crypto.getRandomValues(typedArray);\n        return typedArray[0];\n      };\n    }\n  } catch (_) {\n    // some runtimes can crash invoking crypto\n    // https://github.com/getsentry/sentry-javascript/issues/8935\n  }\n\n  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n  // Concatenating the following numbers as strings results in '10000000100040008000100000000000'\n  return (([1e7] as unknown as string) + 1e3 + 4e3 + 8e3 + 1e11).replace(/[018]/g, c =>\n    // eslint-disable-next-line no-bitwise\n    ((c as unknown as number) ^ ((getRandomByte() & 15) >> ((c as unknown as number) / 4))).toString(16),\n  );\n}\n\nfunction getFirstException(event: Event): Exception | undefined {\n  return event.exception && event.exception.values ? event.exception.values[0] : undefined;\n}\n\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */\nexport function getEventDescription(event: Event): string {\n  const { message, event_id: eventId } = event;\n  if (message) {\n    return message;\n  }\n\n  const firstException = getFirstException(event);\n  if (firstException) {\n    if (firstException.type && firstException.value) {\n      return `${firstException.type}: ${firstException.value}`;\n    }\n    return firstException.type || firstException.value || eventId || '<unknown>';\n  }\n  return eventId || '<unknown>';\n}\n\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n * @hidden\n */\nexport function addExceptionTypeValue(event: Event, value?: string, type?: string): void {\n  const exception = (event.exception = event.exception || {});\n  const values = (exception.values = exception.values || []);\n  const firstException = (values[0] = values[0] || {});\n  if (!firstException.value) {\n    firstException.value = value || '';\n  }\n  if (!firstException.type) {\n    firstException.type = type || 'Error';\n  }\n}\n\n/**\n * Adds exception mechanism data to a given event. Uses defaults if the second parameter is not passed.\n *\n * @param event The event to modify.\n * @param newMechanism Mechanism data to add to the event.\n * @hidden\n */\nexport function addExceptionMechanism(event: Event, newMechanism?: Partial<Mechanism>): void {\n  const firstException = getFirstException(event);\n  if (!firstException) {\n    return;\n  }\n\n  const defaultMechanism = { type: 'generic', handled: true };\n  const currentMechanism = firstException.mechanism;\n  firstException.mechanism = { ...defaultMechanism, ...currentMechanism, ...newMechanism };\n\n  if (newMechanism && 'data' in newMechanism) {\n    const mergedData = { ...(currentMechanism && currentMechanism.data), ...newMechanism.data };\n    firstException.mechanism.data = mergedData;\n  }\n}\n\n// https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\nconst SEMVER_REGEXP =\n  /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n\n/**\n * Represents Semantic Versioning object\n */\ninterface SemVer {\n  major?: number;\n  minor?: number;\n  patch?: number;\n  prerelease?: string;\n  buildmetadata?: string;\n}\n\n/**\n * Parses input into a SemVer interface\n * @param input string representation of a semver version\n */\nexport function parseSemver(input: string): SemVer {\n  const match = input.match(SEMVER_REGEXP) || [];\n  const major = parseInt(match[1], 10);\n  const minor = parseInt(match[2], 10);\n  const patch = parseInt(match[3], 10);\n  return {\n    buildmetadata: match[5],\n    major: isNaN(major) ? undefined : major,\n    minor: isNaN(minor) ? undefined : minor,\n    patch: isNaN(patch) ? undefined : patch,\n    prerelease: match[4],\n  };\n}\n\n/**\n * This function adds context (pre/post/line) lines to the provided frame\n *\n * @param lines string[] containing all lines\n * @param frame StackFrame that will be mutated\n * @param linesOfContext number of context lines we want to add pre/post\n */\nexport function addContextToFrame(lines: string[], frame: StackFrame, linesOfContext: number = 5): void {\n  // When there is no line number in the frame, attaching context is nonsensical and will even break grouping\n  if (frame.lineno === undefined) {\n    return;\n  }\n\n  const maxLines = lines.length;\n  const sourceLine = Math.max(Math.min(maxLines - 1, frame.lineno - 1), 0);\n\n  frame.pre_context = lines\n    .slice(Math.max(0, sourceLine - linesOfContext), sourceLine)\n    .map((line: string) => snipLine(line, 0));\n\n  frame.context_line = snipLine(lines[Math.min(maxLines - 1, sourceLine)], frame.colno || 0);\n\n  frame.post_context = lines\n    .slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext)\n    .map((line: string) => snipLine(line, 0));\n}\n\n/**\n * Checks whether or not we've already captured the given exception (note: not an identical exception - the very object\n * in question), and marks it captured if not.\n *\n * This is useful because it's possible for an error to get captured by more than one mechanism. After we intercept and\n * record an error, we rethrow it (assuming we've intercepted it before it's reached the top-level global handlers), so\n * that we don't interfere with whatever effects the error might have had were the SDK not there. At that point, because\n * the error has been rethrown, it's possible for it to bubble up to some other code we've instrumented. If it's not\n * caught after that, it will bubble all the way up to the global handlers (which of course we also instrument). This\n * function helps us ensure that even if we encounter the same error more than once, we only record it the first time we\n * see it.\n *\n * Note: It will ignore primitives (always return `false` and not mark them as seen), as properties can't be set on\n * them. {@link: Object.objectify} can be used on exceptions to convert any that are primitives into their equivalent\n * object wrapper forms so that this check will always work. However, because we need to flag the exact object which\n * will get rethrown, and because that rethrowing happens outside of the event processing pipeline, the objectification\n * must be done before the exception captured.\n *\n * @param A thrown exception to check or flag as having been seen\n * @returns `true` if the exception has already been captured, `false` if not (with the side effect of marking it seen)\n */\nexport function checkOrSetAlreadyCaught(exception: unknown): boolean {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  if (exception && (exception as any).__sentry_captured__) {\n    return true;\n  }\n\n  try {\n    // set it this way rather than by assignment so that it's not ennumerable and therefore isn't recorded by the\n    // `ExtraErrorData` integration\n    addNonEnumerableProperty(exception as { [key: string]: unknown }, '__sentry_captured__', true);\n  } catch (err) {\n    // `exception` is a primitive, so we can't mark it seen\n  }\n\n  return false;\n}\n\n/**\n * Checks whether the given input is already an array, and if it isn't, wraps it in one.\n *\n * @param maybeArray Input to turn into an array, if necessary\n * @returns The input, if already an array, or an array with the input as the only element, if not\n */\nexport function arrayify<T = unknown>(maybeArray: T | T[]): T[] {\n  return Array.isArray(maybeArray) ? maybeArray : [maybeArray];\n}\n","declare const __DEBUG_BUILD__: boolean;\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nexport const DEBUG_BUILD = __DEBUG_BUILD__;\n","/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/* eslint-disable @typescript-eslint/typedef */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { isThenable } from './is';\n\n/** SyncPromise internal states */\nconst enum States {\n  /** Pending */\n  PENDING = 0,\n  /** Resolved / OK */\n  RESOLVED = 1,\n  /** Rejected / Error */\n  REJECTED = 2,\n}\n\n// Overloads so we can call resolvedSyncPromise without arguments and generic argument\nexport function resolvedSyncPromise(): PromiseLike<void>;\nexport function resolvedSyncPromise<T>(value: T | PromiseLike<T>): PromiseLike<T>;\n\n/**\n * Creates a resolved sync promise.\n *\n * @param value the value to resolve the promise with\n * @returns the resolved sync promise\n */\nexport function resolvedSyncPromise<T>(value?: T | PromiseLike<T>): PromiseLike<T> {\n  return new SyncPromise(resolve => {\n    resolve(value);\n  });\n}\n\n/**\n * Creates a rejected sync promise.\n *\n * @param value the value to reject the promise with\n * @returns the rejected sync promise\n */\nexport function rejectedSyncPromise<T = never>(reason?: any): PromiseLike<T> {\n  return new SyncPromise((_, reject) => {\n    reject(reason);\n  });\n}\n\n/**\n * Thenable class that behaves like a Promise and follows it's interface\n * but is not async internally\n */\nclass SyncPromise<T> implements PromiseLike<T> {\n  private _state: States;\n  private _handlers: Array<[boolean, (value: T) => void, (reason: any) => any]>;\n  private _value: any;\n\n  public constructor(\n    executor: (resolve: (value?: T | PromiseLike<T> | null) => void, reject: (reason?: any) => void) => void,\n  ) {\n    this._state = States.PENDING;\n    this._handlers = [];\n\n    try {\n      executor(this._resolve, this._reject);\n    } catch (e) {\n      this._reject(e);\n    }\n  }\n\n  /** JSDoc */\n  public then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null,\n  ): PromiseLike<TResult1 | TResult2> {\n    return new SyncPromise((resolve, reject) => {\n      this._handlers.push([\n        false,\n        result => {\n          if (!onfulfilled) {\n            // TODO: ¯\\_(ツ)_/¯\n            // TODO: FIXME\n            resolve(result as any);\n          } else {\n            try {\n              resolve(onfulfilled(result));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        },\n        reason => {\n          if (!onrejected) {\n            reject(reason);\n          } else {\n            try {\n              resolve(onrejected(reason));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        },\n      ]);\n      this._executeHandlers();\n    });\n  }\n\n  /** JSDoc */\n  public catch<TResult = never>(\n    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null,\n  ): PromiseLike<T | TResult> {\n    return this.then(val => val, onrejected);\n  }\n\n  /** JSDoc */\n  public finally<TResult>(onfinally?: (() => void) | null): PromiseLike<TResult> {\n    return new SyncPromise<TResult>((resolve, reject) => {\n      let val: TResult | any;\n      let isRejected: boolean;\n\n      return this.then(\n        value => {\n          isRejected = false;\n          val = value;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n        reason => {\n          isRejected = true;\n          val = reason;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n      ).then(() => {\n        if (isRejected) {\n          reject(val);\n          return;\n        }\n\n        resolve(val as unknown as any);\n      });\n    });\n  }\n\n  /** JSDoc */\n  private readonly _resolve = (value?: T | PromiseLike<T> | null) => {\n    this._setResult(States.RESOLVED, value);\n  };\n\n  /** JSDoc */\n  private readonly _reject = (reason?: any) => {\n    this._setResult(States.REJECTED, reason);\n  };\n\n  /** JSDoc */\n  private readonly _setResult = (state: States, value?: T | PromiseLike<T> | any) => {\n    if (this._state !== States.PENDING) {\n      return;\n    }\n\n    if (isThenable(value)) {\n      void (value as PromiseLike<T>).then(this._resolve, this._reject);\n      return;\n    }\n\n    this._state = state;\n    this._value = value;\n\n    this._executeHandlers();\n  };\n\n  /** JSDoc */\n  private readonly _executeHandlers = () => {\n    if (this._state === States.PENDING) {\n      return;\n    }\n\n    const cachedHandlers = this._handlers.slice();\n    this._handlers = [];\n\n    cachedHandlers.forEach(handler => {\n      if (handler[0]) {\n        return;\n      }\n\n      if (this._state === States.RESOLVED) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        handler[1](this._value as unknown as any);\n      }\n\n      if (this._state === States.REJECTED) {\n        handler[2](this._value);\n      }\n\n      handler[0] = true;\n    });\n  };\n}\n\nexport { SyncPromise };\n","import type { Event, EventHint, EventProcessor } from '@sentry/types';\nimport { SyncPromise, getGlobalSingleton, isThenable, logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from './debug-build';\n\n/**\n * Returns the global event processors.\n * @deprecated Global event processors will be removed in v8.\n */\nexport function getGlobalEventProcessors(): EventProcessor[] {\n  return getGlobalSingleton<EventProcessor[]>('globalEventProcessors', () => []);\n}\n\n/**\n * Add a EventProcessor to be kept globally.\n * @deprecated Use `addEventProcessor` instead. Global event processors will be removed in v8.\n */\nexport function addGlobalEventProcessor(callback: EventProcessor): void {\n  // eslint-disable-next-line deprecation/deprecation\n  getGlobalEventProcessors().push(callback);\n}\n\n/**\n * Process an array of event processors, returning the processed event (or `null` if the event was dropped).\n */\nexport function notifyEventProcessors(\n  processors: EventProcessor[],\n  event: Event | null,\n  hint: EventHint,\n  index: number = 0,\n): PromiseLike<Event | null> {\n  return new SyncPromise<Event | null>((resolve, reject) => {\n    const processor = processors[index];\n    if (event === null || typeof processor !== 'function') {\n      resolve(event);\n    } else {\n      const result = processor({ ...event }, hint) as Event | null;\n\n      DEBUG_BUILD && processor.id && result === null && logger.log(`Event processor \"${processor.id}\" dropped event`);\n\n      if (isThenable(result)) {\n        void result\n          .then(final => notifyEventProcessors(processors, final, hint, index + 1).then(resolve))\n          .then(null, reject);\n      } else {\n        void notifyEventProcessors(processors, result, hint, index + 1)\n          .then(resolve)\n          .then(null, reject);\n      }\n    }\n  });\n}\n","import { GLOBAL_OBJ } from './worldwide';\n\nconst ONE_SECOND_IN_MS = 1000;\n\n/**\n * A partial definition of the [Performance Web API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance}\n * for accessing a high-resolution monotonic clock.\n */\ninterface Performance {\n  /**\n   * The millisecond timestamp at which measurement began, measured in Unix time.\n   */\n  timeOrigin: number;\n  /**\n   * Returns the current millisecond timestamp, where 0 represents the start of measurement.\n   */\n  now(): number;\n}\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using the Date API.\n *\n * TODO(v8): Return type should be rounded.\n */\nexport function dateTimestampInSeconds(): number {\n  return Date.now() / ONE_SECOND_IN_MS;\n}\n\n/**\n * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not\n * support the API.\n *\n * Wrapping the native API works around differences in behavior from different browsers.\n */\nfunction createUnixTimestampInSecondsFunc(): () => number {\n  const { performance } = GLOBAL_OBJ as typeof GLOBAL_OBJ & { performance?: Performance };\n  if (!performance || !performance.now) {\n    return dateTimestampInSeconds;\n  }\n\n  // Some browser and environments don't have a timeOrigin, so we fallback to\n  // using Date.now() to compute the starting time.\n  const approxStartingTimeOrigin = Date.now() - performance.now();\n  const timeOrigin = performance.timeOrigin == undefined ? approxStartingTimeOrigin : performance.timeOrigin;\n\n  // performance.now() is a monotonic clock, which means it starts at 0 when the process begins. To get the current\n  // wall clock time (actual UNIX timestamp), we need to add the starting time origin and the current time elapsed.\n  //\n  // TODO: This does not account for the case where the monotonic clock that powers performance.now() drifts from the\n  // wall clock time, which causes the returned timestamp to be inaccurate. We should investigate how to detect and\n  // correct for this.\n  // See: https://github.com/getsentry/sentry-javascript/issues/2590\n  // See: https://github.com/mdn/content/issues/4713\n  // See: https://dev.to/noamr/when-a-millisecond-is-not-a-millisecond-3h6\n  return () => {\n    return (timeOrigin + performance.now()) / ONE_SECOND_IN_MS;\n  };\n}\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the\n * availability of the Performance API.\n *\n * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is\n * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The\n * skew can grow to arbitrary amounts like days, weeks or months.\n * See https://github.com/getsentry/sentry-javascript/issues/2590.\n */\nexport const timestampInSeconds = createUnixTimestampInSecondsFunc();\n\n/**\n * Re-exported with an old name for backwards-compatibility.\n * TODO (v8): Remove this\n *\n * @deprecated Use `timestampInSeconds` instead.\n */\nexport const timestampWithMs = timestampInSeconds;\n\n/**\n * Internal helper to store what is the source of browserPerformanceTimeOrigin below. For debugging only.\n */\nexport let _browserPerformanceTimeOriginMode: string;\n\n/**\n * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the\n * performance API is available.\n */\nexport const browserPerformanceTimeOrigin = ((): number | undefined => {\n  // Unfortunately browsers may report an inaccurate time origin data, through either performance.timeOrigin or\n  // performance.timing.navigationStart, which results in poor results in performance data. We only treat time origin\n  // data as reliable if they are within a reasonable threshold of the current time.\n\n  const { performance } = GLOBAL_OBJ as typeof GLOBAL_OBJ & Window;\n  if (!performance || !performance.now) {\n    _browserPerformanceTimeOriginMode = 'none';\n    return undefined;\n  }\n\n  const threshold = 3600 * 1000;\n  const performanceNow = performance.now();\n  const dateNow = Date.now();\n\n  // if timeOrigin isn't available set delta to threshold so it isn't used\n  const timeOriginDelta = performance.timeOrigin\n    ? Math.abs(performance.timeOrigin + performanceNow - dateNow)\n    : threshold;\n  const timeOriginIsReliable = timeOriginDelta < threshold;\n\n  // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin\n  // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.\n  // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always\n  // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the\n  // Date API.\n  // eslint-disable-next-line deprecation/deprecation\n  const navigationStart = performance.timing && performance.timing.navigationStart;\n  const hasNavigationStart = typeof navigationStart === 'number';\n  // if navigationStart isn't available set delta to threshold so it isn't used\n  const navigationStartDelta = hasNavigationStart ? Math.abs(navigationStart + performanceNow - dateNow) : threshold;\n  const navigationStartIsReliable = navigationStartDelta < threshold;\n\n  if (timeOriginIsReliable || navigationStartIsReliable) {\n    // Use the more reliable time origin\n    if (timeOriginDelta <= navigationStartDelta) {\n      _browserPerformanceTimeOriginMode = 'timeOrigin';\n      return performance.timeOrigin;\n    } else {\n      _browserPerformanceTimeOriginMode = 'navigationStart';\n      return navigationStart;\n    }\n  }\n\n  // Either both timeOrigin and navigationStart are skewed or neither is available, fallback to Date.\n  _browserPerformanceTimeOriginMode = 'dateNow';\n  return dateNow;\n})();\n","export const DEFAULT_ENVIRONMENT = 'production';\n","import type { SerializedSession, Session, SessionContext, SessionStatus } from '@sentry/types';\nimport { dropUndefinedKeys, timestampInSeconds, uuid4 } from '@sentry/utils';\n/**\n * Creates a new `Session` object by setting certain default parameters. If optional @param context\n * is passed, the passed properties are applied to the session object.\n *\n * @param context (optional) additional properties to be applied to the returned session object\n *\n * @returns a new `Session` object\n */\nexport function makeSession(context?: Omit<SessionContext, 'started' | 'status'>): Session {\n  // Both timestamp and started are in seconds since the UNIX epoch.\n  const startingTime = timestampInSeconds();\n\n  const session: Session = {\n    sid: uuid4(),\n    init: true,\n    timestamp: startingTime,\n    started: startingTime,\n    duration: 0,\n    status: 'ok',\n    errors: 0,\n    ignoreDuration: false,\n    toJSON: () => sessionToJSON(session),\n  };\n\n  if (context) {\n    updateSession(session, context);\n  }\n\n  return session;\n}\n\n/**\n * Updates a session object with the properties passed in the context.\n *\n * Note that this function mutates the passed object and returns void.\n * (Had to do this instead of returning a new and updated session because closing and sending a session\n * makes an update to the session after it was passed to the sending logic.\n * @see BaseClient.captureSession )\n *\n * @param session the `Session` to update\n * @param context the `SessionContext` holding the properties that should be updated in @param session\n */\n// eslint-disable-next-line complexity\nexport function updateSession(session: Session, context: SessionContext = {}): void {\n  if (context.user) {\n    if (!session.ipAddress && context.user.ip_address) {\n      session.ipAddress = context.user.ip_address;\n    }\n\n    if (!session.did && !context.did) {\n      session.did = context.user.id || context.user.email || context.user.username;\n    }\n  }\n\n  session.timestamp = context.timestamp || timestampInSeconds();\n\n  if (context.abnormal_mechanism) {\n    session.abnormal_mechanism = context.abnormal_mechanism;\n  }\n\n  if (context.ignoreDuration) {\n    session.ignoreDuration = context.ignoreDuration;\n  }\n  if (context.sid) {\n    // Good enough uuid validation. — Kamil\n    session.sid = context.sid.length === 32 ? context.sid : uuid4();\n  }\n  if (context.init !== undefined) {\n    session.init = context.init;\n  }\n  if (!session.did && context.did) {\n    session.did = `${context.did}`;\n  }\n  if (typeof context.started === 'number') {\n    session.started = context.started;\n  }\n  if (session.ignoreDuration) {\n    session.duration = undefined;\n  } else if (typeof context.duration === 'number') {\n    session.duration = context.duration;\n  } else {\n    const duration = session.timestamp - session.started;\n    session.duration = duration >= 0 ? duration : 0;\n  }\n  if (context.release) {\n    session.release = context.release;\n  }\n  if (context.environment) {\n    session.environment = context.environment;\n  }\n  if (!session.ipAddress && context.ipAddress) {\n    session.ipAddress = context.ipAddress;\n  }\n  if (!session.userAgent && context.userAgent) {\n    session.userAgent = context.userAgent;\n  }\n  if (typeof context.errors === 'number') {\n    session.errors = context.errors;\n  }\n  if (context.status) {\n    session.status = context.status;\n  }\n}\n\n/**\n * Closes a session by setting its status and updating the session object with it.\n * Internally calls `updateSession` to update the passed session object.\n *\n * Note that this function mutates the passed session (@see updateSession for explanation).\n *\n * @param session the `Session` object to be closed\n * @param status the `SessionStatus` with which the session was closed. If you don't pass a status,\n *               this function will keep the previously set status, unless it was `'ok'` in which case\n *               it is changed to `'exited'`.\n */\nexport function closeSession(session: Session, status?: Exclude<SessionStatus, 'ok'>): void {\n  let context = {};\n  if (status) {\n    context = { status };\n  } else if (session.status === 'ok') {\n    context = { status: 'exited' };\n  }\n\n  updateSession(session, context);\n}\n\n/**\n * Serializes a passed session object to a JSON object with a slightly different structure.\n * This is necessary because the Sentry backend requires a slightly different schema of a session\n * than the one the JS SDKs use internally.\n *\n * @param session the session to be converted\n *\n * @returns a JSON object of the passed session\n */\nfunction sessionToJSON(session: Session): SerializedSession {\n  return dropUndefinedKeys({\n    sid: `${session.sid}`,\n    init: session.init,\n    // Make sure that sec is converted to ms for date constructor\n    started: new Date(session.started * 1000).toISOString(),\n    timestamp: new Date(session.timestamp * 1000).toISOString(),\n    status: session.status,\n    errors: session.errors,\n    did: typeof session.did === 'number' || typeof session.did === 'string' ? `${session.did}` : undefined,\n    duration: session.duration,\n    abnormal_mechanism: session.abnormal_mechanism,\n    attrs: {\n      release: session.release,\n      environment: session.environment,\n      ip_address: session.ipAddress,\n      user_agent: session.userAgent,\n    },\n  });\n}\n","import type { StackFrame, StackLineParser, StackParser } from '@sentry/types';\n\nimport type { GetModuleFn } from './node-stack-trace';\nimport { filenameIsInApp, node } from './node-stack-trace';\n\nexport { filenameIsInApp };\n\nconst STACKTRACE_FRAME_LIMIT = 50;\n// Used to sanitize webpack (error: *) wrapped stack errors\nconst WEBPACK_ERROR_REGEXP = /\\(error: (.*)\\)/;\nconst STRIP_FRAME_REGEXP = /captureMessage|captureException/;\n\n/**\n * Creates a stack parser with the supplied line parsers\n *\n * StackFrames are returned in the correct order for Sentry Exception\n * frames and with Sentry SDK internal frames removed from the top and bottom\n *\n */\nexport function createStackParser(...parsers: StackLineParser[]): StackParser {\n  const sortedParsers = parsers.sort((a, b) => a[0] - b[0]).map(p => p[1]);\n\n  return (stack: string, skipFirst: number = 0): StackFrame[] => {\n    const frames: StackFrame[] = [];\n    const lines = stack.split('\\n');\n\n    for (let i = skipFirst; i < lines.length; i++) {\n      const line = lines[i];\n      // Ignore lines over 1kb as they are unlikely to be stack frames.\n      // Many of the regular expressions use backtracking which results in run time that increases exponentially with\n      // input size. Huge strings can result in hangs/Denial of Service:\n      // https://github.com/getsentry/sentry-javascript/issues/2286\n      if (line.length > 1024) {\n        continue;\n      }\n\n      // https://github.com/getsentry/sentry-javascript/issues/5459\n      // Remove webpack (error: *) wrappers\n      const cleanedLine = WEBPACK_ERROR_REGEXP.test(line) ? line.replace(WEBPACK_ERROR_REGEXP, '$1') : line;\n\n      // https://github.com/getsentry/sentry-javascript/issues/7813\n      // Skip Error: lines\n      if (cleanedLine.match(/\\S*Error: /)) {\n        continue;\n      }\n\n      for (const parser of sortedParsers) {\n        const frame = parser(cleanedLine);\n\n        if (frame) {\n          frames.push(frame);\n          break;\n        }\n      }\n\n      if (frames.length >= STACKTRACE_FRAME_LIMIT) {\n        break;\n      }\n    }\n\n    return stripSentryFramesAndReverse(frames);\n  };\n}\n\n/**\n * Gets a stack parser implementation from Options.stackParser\n * @see Options\n *\n * If options contains an array of line parsers, it is converted into a parser\n */\nexport function stackParserFromStackParserOptions(stackParser: StackParser | StackLineParser[]): StackParser {\n  if (Array.isArray(stackParser)) {\n    return createStackParser(...stackParser);\n  }\n  return stackParser;\n}\n\n/**\n * Removes Sentry frames from the top and bottom of the stack if present and enforces a limit of max number of frames.\n * Assumes stack input is ordered from top to bottom and returns the reverse representation so call site of the\n * function that caused the crash is the last frame in the array.\n * @hidden\n */\nexport function stripSentryFramesAndReverse(stack: ReadonlyArray<StackFrame>): StackFrame[] {\n  if (!stack.length) {\n    return [];\n  }\n\n  const localStack = Array.from(stack);\n\n  // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n  if (/sentryWrapped/.test(localStack[localStack.length - 1].function || '')) {\n    localStack.pop();\n  }\n\n  // Reversing in the middle of the procedure allows us to just pop the values off the stack\n  localStack.reverse();\n\n  // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n  if (STRIP_FRAME_REGEXP.test(localStack[localStack.length - 1].function || '')) {\n    localStack.pop();\n\n    // When using synthetic events, we will have a 2 levels deep stack, as `new Error('Sentry syntheticException')`\n    // is produced within the hub itself, making it:\n    //\n    //   Sentry.captureException()\n    //   getCurrentHub().captureException()\n    //\n    // instead of just the top `Sentry` call itself.\n    // This forces us to possibly strip an additional frame in the exact same was as above.\n    if (STRIP_FRAME_REGEXP.test(localStack[localStack.length - 1].function || '')) {\n      localStack.pop();\n    }\n  }\n\n  return localStack.slice(0, STACKTRACE_FRAME_LIMIT).map(frame => ({\n    ...frame,\n    filename: frame.filename || localStack[localStack.length - 1].filename,\n    function: frame.function || '?',\n  }));\n}\n\nconst defaultFunctionName = '<anonymous>';\n\n/**\n * Safely extract function name from itself\n */\nexport function getFunctionName(fn: unknown): string {\n  try {\n    if (!fn || typeof fn !== 'function') {\n      return defaultFunctionName;\n    }\n    return fn.name || defaultFunctionName;\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    return defaultFunctionName;\n  }\n}\n\n/**\n * Node.js stack line parser\n *\n * This is in @sentry/utils so it can be used from the Electron SDK in the browser for when `nodeIntegration == true`.\n * This allows it to be used without referencing or importing any node specific code which causes bundlers to complain\n */\nexport function nodeStackLineParser(getModule?: GetModuleFn): StackLineParser {\n  return [90, node(getModule)];\n}\n","import type { Primitive } from '@sentry/types';\n\nimport { isNaN, isSyntheticEvent, isVueViewModel } from './is';\nimport type { MemoFunc } from './memo';\nimport { memoBuilder } from './memo';\nimport { convertToPlainObject } from './object';\nimport { getFunctionName } from './stacktrace';\n\ntype Prototype = { constructor: (...args: unknown[]) => unknown };\n// This is a hack to placate TS, relying on the fact that technically, arrays are objects with integer keys. Normally we\n// think of those keys as actual numbers, but `arr['0']` turns out to work just as well as `arr[0]`, and doing it this\n// way lets us use a single type in the places where behave as if we are only dealing with objects, even if some of them\n// might be arrays.\ntype ObjOrArray<T> = { [key: string]: T };\n\n/**\n * Recursively normalizes the given object.\n *\n * - Creates a copy to prevent original input mutation\n * - Skips non-enumerable properties\n * - When stringifying, calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializable values (`undefined`/`NaN`/functions) to serializable format\n * - Translates known global objects/classes to a string representations\n * - Takes care of `Error` object serialization\n * - Optionally limits depth of final output\n * - Optionally limits number of properties/elements included in any single object/array\n *\n * @param input The object to be normalized.\n * @param depth The max depth to which to normalize the object. (Anything deeper stringified whole.)\n * @param maxProperties The max number of elements or properties to be included in any single array or\n * object in the normallized output.\n * @returns A normalized version of the object, or `\"**non-serializable**\"` if any errors are thrown during normalization.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function normalize(input: unknown, depth: number = 100, maxProperties: number = +Infinity): any {\n  try {\n    // since we're at the outermost level, we don't provide a key\n    return visit('', input, depth, maxProperties);\n  } catch (err) {\n    return { ERROR: `**non-serializable** (${err})` };\n  }\n}\n\n/** JSDoc */\nexport function normalizeToSize<T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  object: { [key: string]: any },\n  // Default Node.js REPL depth\n  depth: number = 3,\n  // 100kB, as 200kB is max payload size, so half sounds reasonable\n  maxSize: number = 100 * 1024,\n): T {\n  const normalized = normalize(object, depth);\n\n  if (jsonSize(normalized) > maxSize) {\n    return normalizeToSize(object, depth - 1, maxSize);\n  }\n\n  return normalized as T;\n}\n\n/**\n * Visits a node to perform normalization on it\n *\n * @param key The key corresponding to the given node\n * @param value The node to be visited\n * @param depth Optional number indicating the maximum recursion depth\n * @param maxProperties Optional maximum number of properties/elements included in any single object/array\n * @param memo Optional Memo class handling decycling\n */\nfunction visit(\n  key: string,\n  value: unknown,\n  depth: number = +Infinity,\n  maxProperties: number = +Infinity,\n  memo: MemoFunc = memoBuilder(),\n): Primitive | ObjOrArray<unknown> {\n  const [memoize, unmemoize] = memo;\n\n  // Get the simple cases out of the way first\n  if (\n    value == null || // this matches null and undefined -> eqeq not eqeqeq\n    (['number', 'boolean', 'string'].includes(typeof value) && !isNaN(value))\n  ) {\n    return value as Primitive;\n  }\n\n  const stringified = stringifyValue(key, value);\n\n  // Anything we could potentially dig into more (objects or arrays) will have come back as `\"[object XXXX]\"`.\n  // Everything else will have already been serialized, so if we don't see that pattern, we're done.\n  if (!stringified.startsWith('[object ')) {\n    return stringified;\n  }\n\n  // From here on, we can assert that `value` is either an object or an array.\n\n  // Do not normalize objects that we know have already been normalized. As a general rule, the\n  // \"__sentry_skip_normalization__\" property should only be used sparingly and only should only be set on objects that\n  // have already been normalized.\n  if ((value as ObjOrArray<unknown>)['__sentry_skip_normalization__']) {\n    return value as ObjOrArray<unknown>;\n  }\n\n  // We can set `__sentry_override_normalization_depth__` on an object to ensure that from there\n  // We keep a certain amount of depth.\n  // This should be used sparingly, e.g. we use it for the redux integration to ensure we get a certain amount of state.\n  const remainingDepth =\n    typeof (value as ObjOrArray<unknown>)['__sentry_override_normalization_depth__'] === 'number'\n      ? ((value as ObjOrArray<unknown>)['__sentry_override_normalization_depth__'] as number)\n      : depth;\n\n  // We're also done if we've reached the max depth\n  if (remainingDepth === 0) {\n    // At this point we know `serialized` is a string of the form `\"[object XXXX]\"`. Clean it up so it's just `\"[XXXX]\"`.\n    return stringified.replace('object ', '');\n  }\n\n  // If we've already visited this branch, bail out, as it's circular reference. If not, note that we're seeing it now.\n  if (memoize(value)) {\n    return '[Circular ~]';\n  }\n\n  // If the value has a `toJSON` method, we call it to extract more information\n  const valueWithToJSON = value as unknown & { toJSON?: () => unknown };\n  if (valueWithToJSON && typeof valueWithToJSON.toJSON === 'function') {\n    try {\n      const jsonValue = valueWithToJSON.toJSON();\n      // We need to normalize the return value of `.toJSON()` in case it has circular references\n      return visit('', jsonValue, remainingDepth - 1, maxProperties, memo);\n    } catch (err) {\n      // pass (The built-in `toJSON` failed, but we can still try to do it ourselves)\n    }\n  }\n\n  // At this point we know we either have an object or an array, we haven't seen it before, and we're going to recurse\n  // because we haven't yet reached the max depth. Create an accumulator to hold the results of visiting each\n  // property/entry, and keep track of the number of items we add to it.\n  const normalized = (Array.isArray(value) ? [] : {}) as ObjOrArray<unknown>;\n  let numAdded = 0;\n\n  // Before we begin, convert`Error` and`Event` instances into plain objects, since some of each of their relevant\n  // properties are non-enumerable and otherwise would get missed.\n  const visitable = convertToPlainObject(value as ObjOrArray<unknown>);\n\n  for (const visitKey in visitable) {\n    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n    if (!Object.prototype.hasOwnProperty.call(visitable, visitKey)) {\n      continue;\n    }\n\n    if (numAdded >= maxProperties) {\n      normalized[visitKey] = '[MaxProperties ~]';\n      break;\n    }\n\n    // Recursively visit all the child nodes\n    const visitValue = visitable[visitKey];\n    normalized[visitKey] = visit(visitKey, visitValue, remainingDepth - 1, maxProperties, memo);\n\n    numAdded++;\n  }\n\n  // Once we've visited all the branches, remove the parent from memo storage\n  unmemoize(value);\n\n  // Return accumulated values\n  return normalized;\n}\n\n/**\n * @deprecated This export will be removed in v8.\n */\nexport { visit as walk };\n\n/* eslint-disable complexity */\n/**\n * Stringify the given value. Handles various known special values and types.\n *\n * Not meant to be used on simple primitives which already have a string representation, as it will, for example, turn\n * the number 1231 into \"[Object Number]\", nor on `null`, as it will throw.\n *\n * @param value The value to stringify\n * @returns A stringified representation of the given value\n */\nfunction stringifyValue(\n  key: unknown,\n  // this type is a tiny bit of a cheat, since this function does handle NaN (which is technically a number), but for\n  // our internal use, it'll do\n  value: Exclude<unknown, string | number | boolean | null>,\n): string {\n  try {\n    if (key === 'domain' && value && typeof value === 'object' && (value as { _events: unknown })._events) {\n      return '[Domain]';\n    }\n\n    if (key === 'domainEmitter') {\n      return '[DomainEmitter]';\n    }\n\n    // It's safe to use `global`, `window`, and `document` here in this manner, as we are asserting using `typeof` first\n    // which won't throw if they are not present.\n\n    if (typeof global !== 'undefined' && value === global) {\n      return '[Global]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof window !== 'undefined' && value === window) {\n      return '[Window]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof document !== 'undefined' && value === document) {\n      return '[Document]';\n    }\n\n    if (isVueViewModel(value)) {\n      return '[VueViewModel]';\n    }\n\n    // React's SyntheticEvent thingy\n    if (isSyntheticEvent(value)) {\n      return '[SyntheticEvent]';\n    }\n\n    if (typeof value === 'number' && value !== value) {\n      return '[NaN]';\n    }\n\n    if (typeof value === 'function') {\n      return `[Function: ${getFunctionName(value)}]`;\n    }\n\n    if (typeof value === 'symbol') {\n      return `[${String(value)}]`;\n    }\n\n    // stringified BigInts are indistinguishable from regular numbers, so we need to label them to avoid confusion\n    if (typeof value === 'bigint') {\n      return `[BigInt: ${String(value)}]`;\n    }\n\n    // Now that we've knocked out all the special cases and the primitives, all we have left are objects. Simply casting\n    // them to strings means that instances of classes which haven't defined their `toStringTag` will just come out as\n    // `\"[object Object]\"`. If we instead look at the constructor's name (which is the same as the name of the class),\n    // we can make sure that only plain objects come out that way.\n    const objName = getConstructorName(value);\n\n    // Handle HTML Elements\n    if (/^HTML(\\w*)Element$/.test(objName)) {\n      return `[HTMLElement: ${objName}]`;\n    }\n\n    return `[object ${objName}]`;\n  } catch (err) {\n    return `**non-serializable** (${err})`;\n  }\n}\n/* eslint-enable complexity */\n\nfunction getConstructorName(value: unknown): string {\n  const prototype: Prototype | null = Object.getPrototypeOf(value);\n\n  return prototype ? prototype.constructor.name : 'null prototype';\n}\n\n/** Calculates bytes size of input string */\nfunction utf8Length(value: string): number {\n  // eslint-disable-next-line no-bitwise\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n\n/** Calculates bytes size of input object */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction jsonSize(value: any): number {\n  return utf8Length(JSON.stringify(value));\n}\n\n/**\n * Normalizes URLs in exceptions and stacktraces to a base path so Sentry can fingerprint\n * across platforms and working directory.\n *\n * @param url The URL to be normalized.\n * @param basePath The application base path.\n * @returns The normalized URL.\n */\nexport function normalizeUrlToBase(url: string, basePath: string): string {\n  const escapedBase = basePath\n    // Backslash to forward\n    .replace(/\\\\/g, '/')\n    // Escape RegExp special characters\n    .replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&');\n\n  let newUrl = url;\n  try {\n    newUrl = decodeURI(url);\n  } catch (_Oo) {\n    // Sometime this breaks\n  }\n  return (\n    newUrl\n      .replace(/\\\\/g, '/')\n      .replace(/webpack:\\/?/g, '') // Remove intermediate base path\n      // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor\n      .replace(new RegExp(`(file://)?/*${escapedBase}/*`, 'ig'), 'app:///')\n  );\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nexport type MemoFunc = [\n  // memoize\n  (obj: any) => boolean,\n  // unmemoize\n  (obj: any) => void,\n];\n\n/**\n * Helper to decycle json objects\n */\nexport function memoBuilder(): MemoFunc {\n  const hasWeakSet = typeof WeakSet === 'function';\n  const inner: any = hasWeakSet ? new WeakSet() : [];\n  function memoize(obj: any): boolean {\n    if (hasWeakSet) {\n      if (inner.has(obj)) {\n        return true;\n      }\n      inner.add(obj);\n      return false;\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let i = 0; i < inner.length; i++) {\n      const value = inner[i];\n      if (value === obj) {\n        return true;\n      }\n    }\n    inner.push(obj);\n    return false;\n  }\n\n  function unmemoize(obj: any): void {\n    if (hasWeakSet) {\n      inner.delete(obj);\n    } else {\n      for (let i = 0; i < inner.length; i++) {\n        if (inner[i] === obj) {\n          inner.splice(i, 1);\n          break;\n        }\n      }\n    }\n  }\n  return [memoize, unmemoize];\n}\n","import type { DynamicSamplingContext } from '@sentry/types';\n\nimport { DEBUG_BUILD } from './debug-build';\nimport { isString } from './is';\nimport { logger } from './logger';\n\nexport const BAGGAGE_HEADER_NAME = 'baggage';\n\nexport const SENTRY_BAGGAGE_KEY_PREFIX = 'sentry-';\n\nexport const SENTRY_BAGGAGE_KEY_PREFIX_REGEX = /^sentry-/;\n\n/**\n * Max length of a serialized baggage string\n *\n * https://www.w3.org/TR/baggage/#limits\n */\nexport const MAX_BAGGAGE_STRING_LENGTH = 8192;\n\n/**\n * Takes a baggage header and turns it into Dynamic Sampling Context, by extracting all the \"sentry-\" prefixed values\n * from it.\n *\n * @param baggageHeader A very bread definition of a baggage header as it might appear in various frameworks.\n * @returns The Dynamic Sampling Context that was found on `baggageHeader`, if there was any, `undefined` otherwise.\n */\nexport function baggageHeaderToDynamicSamplingContext(\n  // Very liberal definition of what any incoming header might look like\n  baggageHeader: string | string[] | number | null | undefined | boolean,\n): Partial<DynamicSamplingContext> | undefined {\n  if (!isString(baggageHeader) && !Array.isArray(baggageHeader)) {\n    return undefined;\n  }\n\n  // Intermediary object to store baggage key value pairs of incoming baggage headers on.\n  // It is later used to read Sentry-DSC-values from.\n  let baggageObject: Readonly<Record<string, string>> = {};\n\n  if (Array.isArray(baggageHeader)) {\n    // Combine all baggage headers into one object containing the baggage values so we can later read the Sentry-DSC-values from it\n    baggageObject = baggageHeader.reduce<Record<string, string>>((acc, curr) => {\n      const currBaggageObject = baggageHeaderToObject(curr);\n      for (const key of Object.keys(currBaggageObject)) {\n        acc[key] = currBaggageObject[key];\n      }\n      return acc;\n    }, {});\n  } else {\n    // Return undefined if baggage header is an empty string (technically an empty baggage header is not spec conform but\n    // this is how we choose to handle it)\n    if (!baggageHeader) {\n      return undefined;\n    }\n\n    baggageObject = baggageHeaderToObject(baggageHeader);\n  }\n\n  // Read all \"sentry-\" prefixed values out of the baggage object and put it onto a dynamic sampling context object.\n  const dynamicSamplingContext = Object.entries(baggageObject).reduce<Record<string, string>>((acc, [key, value]) => {\n    if (key.match(SENTRY_BAGGAGE_KEY_PREFIX_REGEX)) {\n      const nonPrefixedKey = key.slice(SENTRY_BAGGAGE_KEY_PREFIX.length);\n      acc[nonPrefixedKey] = value;\n    }\n    return acc;\n  }, {});\n\n  // Only return a dynamic sampling context object if there are keys in it.\n  // A keyless object means there were no sentry values on the header, which means that there is no DSC.\n  if (Object.keys(dynamicSamplingContext).length > 0) {\n    return dynamicSamplingContext as Partial<DynamicSamplingContext>;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Turns a Dynamic Sampling Object into a baggage header by prefixing all the keys on the object with \"sentry-\".\n *\n * @param dynamicSamplingContext The Dynamic Sampling Context to turn into a header. For convenience and compatibility\n * with the `getDynamicSamplingContext` method on the Transaction class ,this argument can also be `undefined`. If it is\n * `undefined` the function will return `undefined`.\n * @returns a baggage header, created from `dynamicSamplingContext`, or `undefined` either if `dynamicSamplingContext`\n * was `undefined`, or if `dynamicSamplingContext` didn't contain any values.\n */\nexport function dynamicSamplingContextToSentryBaggageHeader(\n  // this also takes undefined for convenience and bundle size in other places\n  dynamicSamplingContext?: Partial<DynamicSamplingContext>,\n): string | undefined {\n  if (!dynamicSamplingContext) {\n    return undefined;\n  }\n\n  // Prefix all DSC keys with \"sentry-\" and put them into a new object\n  const sentryPrefixedDSC = Object.entries(dynamicSamplingContext).reduce<Record<string, string>>(\n    (acc, [dscKey, dscValue]) => {\n      if (dscValue) {\n        acc[`${SENTRY_BAGGAGE_KEY_PREFIX}${dscKey}`] = dscValue;\n      }\n      return acc;\n    },\n    {},\n  );\n\n  return objectToBaggageHeader(sentryPrefixedDSC);\n}\n\n/**\n * Will parse a baggage header, which is a simple key-value map, into a flat object.\n *\n * @param baggageHeader The baggage header to parse.\n * @returns a flat object containing all the key-value pairs from `baggageHeader`.\n */\nfunction baggageHeaderToObject(baggageHeader: string): Record<string, string> {\n  return baggageHeader\n    .split(',')\n    .map(baggageEntry => baggageEntry.split('=').map(keyOrValue => decodeURIComponent(keyOrValue.trim())))\n    .reduce<Record<string, string>>((acc, [key, value]) => {\n      acc[key] = value;\n      return acc;\n    }, {});\n}\n\n/**\n * Turns a flat object (key-value pairs) into a baggage header, which is also just key-value pairs.\n *\n * @param object The object to turn into a baggage header.\n * @returns a baggage header string, or `undefined` if the object didn't have any values, since an empty baggage header\n * is not spec compliant.\n */\nfunction objectToBaggageHeader(object: Record<string, string>): string | undefined {\n  if (Object.keys(object).length === 0) {\n    // An empty baggage header is not spec compliant: We return undefined.\n    return undefined;\n  }\n\n  return Object.entries(object).reduce((baggageHeader, [objectKey, objectValue], currentIndex) => {\n    const baggageEntry = `${encodeURIComponent(objectKey)}=${encodeURIComponent(objectValue)}`;\n    const newBaggageHeader = currentIndex === 0 ? baggageEntry : `${baggageHeader},${baggageEntry}`;\n    if (newBaggageHeader.length > MAX_BAGGAGE_STRING_LENGTH) {\n      DEBUG_BUILD &&\n        logger.warn(\n          `Not adding key: ${objectKey} with val: ${objectValue} to baggage header due to exceeding baggage size limits.`,\n        );\n      return baggageHeader;\n    } else {\n      return newBaggageHeader;\n    }\n  }, '');\n}\n","import type { PropagationContext, TraceparentData } from '@sentry/types';\n\nimport { baggageHeaderToDynamicSamplingContext } from './baggage';\nimport { uuid4 } from './misc';\n\n// eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor -- RegExp is used for readability here\nexport const TRACEPARENT_REGEXP = new RegExp(\n  '^[ \\\\t]*' + // whitespace\n    '([0-9a-f]{32})?' + // trace_id\n    '-?([0-9a-f]{16})?' + // span_id\n    '-?([01])?' + // sampled\n    '[ \\\\t]*$', // whitespace\n);\n\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */\nexport function extractTraceparentData(traceparent?: string): TraceparentData | undefined {\n  if (!traceparent) {\n    return undefined;\n  }\n\n  const matches = traceparent.match(TRACEPARENT_REGEXP);\n  if (!matches) {\n    return undefined;\n  }\n\n  let parentSampled: boolean | undefined;\n  if (matches[3] === '1') {\n    parentSampled = true;\n  } else if (matches[3] === '0') {\n    parentSampled = false;\n  }\n\n  return {\n    traceId: matches[1],\n    parentSampled,\n    parentSpanId: matches[2],\n  };\n}\n\n/**\n * Create tracing context from incoming headers.\n *\n * @deprecated Use `propagationContextFromHeaders` instead.\n */\n// TODO(v8): Remove this function\nexport function tracingContextFromHeaders(\n  sentryTrace: Parameters<typeof extractTraceparentData>[0],\n  baggage: Parameters<typeof baggageHeaderToDynamicSamplingContext>[0],\n): {\n  traceparentData: ReturnType<typeof extractTraceparentData>;\n  dynamicSamplingContext: ReturnType<typeof baggageHeaderToDynamicSamplingContext>;\n  propagationContext: PropagationContext;\n} {\n  const traceparentData = extractTraceparentData(sentryTrace);\n  const dynamicSamplingContext = baggageHeaderToDynamicSamplingContext(baggage);\n\n  const { traceId, parentSpanId, parentSampled } = traceparentData || {};\n\n  if (!traceparentData) {\n    return {\n      traceparentData,\n      dynamicSamplingContext: undefined,\n      propagationContext: {\n        traceId: traceId || uuid4(),\n        spanId: uuid4().substring(16),\n      },\n    };\n  } else {\n    return {\n      traceparentData,\n      dynamicSamplingContext: dynamicSamplingContext || {}, // If we have traceparent data but no DSC it means we are not head of trace and we must freeze it\n      propagationContext: {\n        traceId: traceId || uuid4(),\n        parentSpanId: parentSpanId || uuid4().substring(16),\n        spanId: uuid4().substring(16),\n        sampled: parentSampled,\n        dsc: dynamicSamplingContext || {}, // If we have traceparent data but no DSC it means we are not head of trace and we must freeze it\n      },\n    };\n  }\n}\n\n/**\n * Create a propagation context from incoming headers.\n */\nexport function propagationContextFromHeaders(\n  sentryTrace: string | undefined,\n  baggage: string | number | boolean | string[] | null | undefined,\n): PropagationContext {\n  const traceparentData = extractTraceparentData(sentryTrace);\n  const dynamicSamplingContext = baggageHeaderToDynamicSamplingContext(baggage);\n\n  const { traceId, parentSpanId, parentSampled } = traceparentData || {};\n\n  if (!traceparentData) {\n    return {\n      traceId: traceId || uuid4(),\n      spanId: uuid4().substring(16),\n    };\n  } else {\n    return {\n      traceId: traceId || uuid4(),\n      parentSpanId: parentSpanId || uuid4().substring(16),\n      spanId: uuid4().substring(16),\n      sampled: parentSampled,\n      dsc: dynamicSamplingContext || {}, // If we have traceparent data but no DSC it means we are not head of trace and we must freeze it\n    };\n  }\n}\n\n/**\n * Create sentry-trace header from span context values.\n */\nexport function generateSentryTraceHeader(\n  traceId: string = uuid4(),\n  spanId: string = uuid4().substring(16),\n  sampled?: boolean,\n): string {\n  let sampledString = '';\n  if (sampled !== undefined) {\n    sampledString = sampled ? '-1' : '-0';\n  }\n  return `${traceId}-${spanId}${sampledString}`;\n}\n","import type { Span, SpanJSON, SpanTimeInput, TraceContext } from '@sentry/types';\nimport { dropUndefinedKeys, generateSentryTraceHeader, timestampInSeconds } from '@sentry/utils';\nimport type { Span as SpanClass } from '../tracing/span';\n\n// These are aligned with OpenTelemetry trace flags\nexport const TRACE_FLAG_NONE = 0x0;\nexport const TRACE_FLAG_SAMPLED = 0x1;\n\n/**\n * Convert a span to a trace context, which can be sent as the `trace` context in an event.\n */\nexport function spanToTraceContext(span: Span): TraceContext {\n  const { spanId: span_id, traceId: trace_id } = span.spanContext();\n  const { data, op, parent_span_id, status, tags, origin } = spanToJSON(span);\n\n  return dropUndefinedKeys({\n    data,\n    op,\n    parent_span_id,\n    span_id,\n    status,\n    tags,\n    trace_id,\n    origin,\n  });\n}\n\n/**\n * Convert a Span to a Sentry trace header.\n */\nexport function spanToTraceHeader(span: Span): string {\n  const { traceId, spanId } = span.spanContext();\n  const sampled = spanIsSampled(span);\n  return generateSentryTraceHeader(traceId, spanId, sampled);\n}\n\n/**\n * Convert a span time input intp a timestamp in seconds.\n */\nexport function spanTimeInputToSeconds(input: SpanTimeInput | undefined): number {\n  if (typeof input === 'number') {\n    return ensureTimestampInSeconds(input);\n  }\n\n  if (Array.isArray(input)) {\n    // See {@link HrTime} for the array-based time format\n    return input[0] + input[1] / 1e9;\n  }\n\n  if (input instanceof Date) {\n    return ensureTimestampInSeconds(input.getTime());\n  }\n\n  return timestampInSeconds();\n}\n\n/**\n * Converts a timestamp to second, if it was in milliseconds, or keeps it as second.\n */\nfunction ensureTimestampInSeconds(timestamp: number): number {\n  const isMs = timestamp > 9999999999;\n  return isMs ? timestamp / 1000 : timestamp;\n}\n\n/**\n * Convert a span to a JSON representation.\n * Note that all fields returned here are optional and need to be guarded against.\n *\n * Note: Because of this, we currently have a circular type dependency (which we opted out of in package.json).\n * This is not avoidable as we need `spanToJSON` in `spanUtils.ts`, which in turn is needed by `span.ts` for backwards compatibility.\n * And `spanToJSON` needs the Span class from `span.ts` to check here.\n * TODO v8: When we remove the deprecated stuff from `span.ts`, we can remove the circular dependency again.\n */\nexport function spanToJSON(span: Span): Partial<SpanJSON> {\n  if (spanIsSpanClass(span)) {\n    return span.getSpanJSON();\n  }\n\n  // Fallback: We also check for `.toJSON()` here...\n  // eslint-disable-next-line deprecation/deprecation\n  if (typeof span.toJSON === 'function') {\n    // eslint-disable-next-line deprecation/deprecation\n    return span.toJSON();\n  }\n\n  return {};\n}\n\n/**\n * Sadly, due to circular dependency checks we cannot actually import the Span class here and check for instanceof.\n * :( So instead we approximate this by checking if it has the `getSpanJSON` method.\n */\nfunction spanIsSpanClass(span: Span): span is SpanClass {\n  return typeof (span as SpanClass).getSpanJSON === 'function';\n}\n\n/**\n * Returns true if a span is sampled.\n * In most cases, you should just use `span.isRecording()` instead.\n * However, this has a slightly different semantic, as it also returns false if the span is finished.\n * So in the case where this distinction is important, use this method.\n */\nexport function spanIsSampled(span: Span): boolean {\n  // We align our trace flags with the ones OpenTelemetry use\n  // So we also check for sampled the same way they do.\n  const { traceFlags } = span.spanContext();\n  // eslint-disable-next-line no-bitwise\n  return Boolean(traceFlags & TRACE_FLAG_SAMPLED);\n}\n","import type {\n  CaptureContext,\n  Client,\n  ClientOptions,\n  Event,\n  EventHint,\n  Scope as ScopeInterface,\n  ScopeContext,\n  StackFrame,\n  StackParser,\n} from '@sentry/types';\nimport { GLOBAL_OBJ, addExceptionMechanism, dateTimestampInSeconds, normalize, truncate, uuid4 } from '@sentry/utils';\n\nimport { DEFAULT_ENVIRONMENT } from '../constants';\nimport { getGlobalEventProcessors, notifyEventProcessors } from '../eventProcessors';\nimport { Scope, getGlobalScope } from '../scope';\nimport { applyScopeDataToEvent, mergeScopeData } from './applyScopeDataToEvent';\nimport { spanToJSON } from './spanUtils';\n\n/**\n * This type makes sure that we get either a CaptureContext, OR an EventHint.\n * It does not allow mixing them, which could lead to unexpected outcomes, e.g. this is disallowed:\n * { user: { id: '123' }, mechanism: { handled: false } }\n */\nexport type ExclusiveEventHintOrCaptureContext =\n  | (CaptureContext & Partial<{ [key in keyof EventHint]: never }>)\n  | (EventHint & Partial<{ [key in keyof ScopeContext]: never }>);\n\n/**\n * Adds common information to events.\n *\n * The information includes release and environment from `options`,\n * breadcrumbs and context (extra, tags and user) from the scope.\n *\n * Information that is already present in the event is never overwritten. For\n * nested objects, such as the context, keys are merged.\n *\n * Note: This also triggers callbacks for `addGlobalEventProcessor`, but not `beforeSend`.\n *\n * @param event The original event.\n * @param hint May contain additional information about the original exception.\n * @param scope A scope containing event metadata.\n * @returns A new event with more information.\n * @hidden\n */\nexport function prepareEvent(\n  options: ClientOptions,\n  event: Event,\n  hint: EventHint,\n  scope?: Scope,\n  client?: Client,\n  isolationScope?: Scope,\n): PromiseLike<Event | null> {\n  const { normalizeDepth = 3, normalizeMaxBreadth = 1_000 } = options;\n  const prepared: Event = {\n    ...event,\n    event_id: event.event_id || hint.event_id || uuid4(),\n    timestamp: event.timestamp || dateTimestampInSeconds(),\n  };\n  const integrations = hint.integrations || options.integrations.map(i => i.name);\n\n  applyClientOptions(prepared, options);\n  applyIntegrationsMetadata(prepared, integrations);\n\n  // Only put debug IDs onto frames for error events.\n  if (event.type === undefined) {\n    applyDebugIds(prepared, options.stackParser);\n  }\n\n  // If we have scope given to us, use it as the base for further modifications.\n  // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n  const finalScope = getFinalScope(scope, hint.captureContext);\n\n  if (hint.mechanism) {\n    addExceptionMechanism(prepared, hint.mechanism);\n  }\n\n  const clientEventProcessors = client && client.getEventProcessors ? client.getEventProcessors() : [];\n\n  // This should be the last thing called, since we want that\n  // {@link Hub.addEventProcessor} gets the finished prepared event.\n  // Merge scope data together\n  const data = getGlobalScope().getScopeData();\n\n  if (isolationScope) {\n    const isolationData = isolationScope.getScopeData();\n    mergeScopeData(data, isolationData);\n  }\n\n  if (finalScope) {\n    const finalScopeData = finalScope.getScopeData();\n    mergeScopeData(data, finalScopeData);\n  }\n\n  const attachments = [...(hint.attachments || []), ...data.attachments];\n  if (attachments.length) {\n    hint.attachments = attachments;\n  }\n\n  applyScopeDataToEvent(prepared, data);\n\n  // TODO (v8): Update this order to be: Global > Client > Scope\n  const eventProcessors = [\n    ...clientEventProcessors,\n    // eslint-disable-next-line deprecation/deprecation\n    ...getGlobalEventProcessors(),\n    // Run scope event processors _after_ all other processors\n    ...data.eventProcessors,\n  ];\n\n  const result = notifyEventProcessors(eventProcessors, prepared, hint);\n\n  return result.then(evt => {\n    if (evt) {\n      // We apply the debug_meta field only after all event processors have ran, so that if any event processors modified\n      // file names (e.g.the RewriteFrames integration) the filename -> debug ID relationship isn't destroyed.\n      // This should not cause any PII issues, since we're only moving data that is already on the event and not adding\n      // any new data\n      applyDebugMeta(evt);\n    }\n\n    if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {\n      return normalizeEvent(evt, normalizeDepth, normalizeMaxBreadth);\n    }\n    return evt;\n  });\n}\n\n/**\n *  Enhances event using the client configuration.\n *  It takes care of all \"static\" values like environment, release and `dist`,\n *  as well as truncating overly long values.\n * @param event event instance to be enhanced\n */\nfunction applyClientOptions(event: Event, options: ClientOptions): void {\n  const { environment, release, dist, maxValueLength = 250 } = options;\n\n  if (!('environment' in event)) {\n    event.environment = 'environment' in options ? environment : DEFAULT_ENVIRONMENT;\n  }\n\n  if (event.release === undefined && release !== undefined) {\n    event.release = release;\n  }\n\n  if (event.dist === undefined && dist !== undefined) {\n    event.dist = dist;\n  }\n\n  if (event.message) {\n    event.message = truncate(event.message, maxValueLength);\n  }\n\n  const exception = event.exception && event.exception.values && event.exception.values[0];\n  if (exception && exception.value) {\n    exception.value = truncate(exception.value, maxValueLength);\n  }\n\n  const request = event.request;\n  if (request && request.url) {\n    request.url = truncate(request.url, maxValueLength);\n  }\n}\n\nconst debugIdStackParserCache = new WeakMap<StackParser, Map<string, StackFrame[]>>();\n\n/**\n * Puts debug IDs into the stack frames of an error event.\n */\nexport function applyDebugIds(event: Event, stackParser: StackParser): void {\n  const debugIdMap = GLOBAL_OBJ._sentryDebugIds;\n\n  if (!debugIdMap) {\n    return;\n  }\n\n  let debugIdStackFramesCache: Map<string, StackFrame[]>;\n  const cachedDebugIdStackFrameCache = debugIdStackParserCache.get(stackParser);\n  if (cachedDebugIdStackFrameCache) {\n    debugIdStackFramesCache = cachedDebugIdStackFrameCache;\n  } else {\n    debugIdStackFramesCache = new Map<string, StackFrame[]>();\n    debugIdStackParserCache.set(stackParser, debugIdStackFramesCache);\n  }\n\n  // Build a map of filename -> debug_id\n  const filenameDebugIdMap = Object.keys(debugIdMap).reduce<Record<string, string>>((acc, debugIdStackTrace) => {\n    let parsedStack: StackFrame[];\n    const cachedParsedStack = debugIdStackFramesCache.get(debugIdStackTrace);\n    if (cachedParsedStack) {\n      parsedStack = cachedParsedStack;\n    } else {\n      parsedStack = stackParser(debugIdStackTrace);\n      debugIdStackFramesCache.set(debugIdStackTrace, parsedStack);\n    }\n\n    for (let i = parsedStack.length - 1; i >= 0; i--) {\n      const stackFrame = parsedStack[i];\n      if (stackFrame.filename) {\n        acc[stackFrame.filename] = debugIdMap[debugIdStackTrace];\n        break;\n      }\n    }\n    return acc;\n  }, {});\n\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    event!.exception!.values!.forEach(exception => {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      exception.stacktrace!.frames!.forEach(frame => {\n        if (frame.filename) {\n          frame.debug_id = filenameDebugIdMap[frame.filename];\n        }\n      });\n    });\n  } catch (e) {\n    // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.\n  }\n}\n\n/**\n * Moves debug IDs from the stack frames of an error event into the debug_meta field.\n */\nexport function applyDebugMeta(event: Event): void {\n  // Extract debug IDs and filenames from the stack frames on the event.\n  const filenameDebugIdMap: Record<string, string> = {};\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    event.exception!.values!.forEach(exception => {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      exception.stacktrace!.frames!.forEach(frame => {\n        if (frame.debug_id) {\n          if (frame.abs_path) {\n            filenameDebugIdMap[frame.abs_path] = frame.debug_id;\n          } else if (frame.filename) {\n            filenameDebugIdMap[frame.filename] = frame.debug_id;\n          }\n          delete frame.debug_id;\n        }\n      });\n    });\n  } catch (e) {\n    // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.\n  }\n\n  if (Object.keys(filenameDebugIdMap).length === 0) {\n    return;\n  }\n\n  // Fill debug_meta information\n  event.debug_meta = event.debug_meta || {};\n  event.debug_meta.images = event.debug_meta.images || [];\n  const images = event.debug_meta.images;\n  Object.keys(filenameDebugIdMap).forEach(filename => {\n    images.push({\n      type: 'sourcemap',\n      code_file: filename,\n      debug_id: filenameDebugIdMap[filename],\n    });\n  });\n}\n\n/**\n * This function adds all used integrations to the SDK info in the event.\n * @param event The event that will be filled with all integrations.\n */\nfunction applyIntegrationsMetadata(event: Event, integrationNames: string[]): void {\n  if (integrationNames.length > 0) {\n    event.sdk = event.sdk || {};\n    event.sdk.integrations = [...(event.sdk.integrations || []), ...integrationNames];\n  }\n}\n\n/**\n * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n * Normalized keys:\n * - `breadcrumbs.data`\n * - `user`\n * - `contexts`\n * - `extra`\n * @param event Event\n * @returns Normalized event\n */\nfunction normalizeEvent(event: Event | null, depth: number, maxBreadth: number): Event | null {\n  if (!event) {\n    return null;\n  }\n\n  const normalized: Event = {\n    ...event,\n    ...(event.breadcrumbs && {\n      breadcrumbs: event.breadcrumbs.map(b => ({\n        ...b,\n        ...(b.data && {\n          data: normalize(b.data, depth, maxBreadth),\n        }),\n      })),\n    }),\n    ...(event.user && {\n      user: normalize(event.user, depth, maxBreadth),\n    }),\n    ...(event.contexts && {\n      contexts: normalize(event.contexts, depth, maxBreadth),\n    }),\n    ...(event.extra && {\n      extra: normalize(event.extra, depth, maxBreadth),\n    }),\n  };\n\n  // event.contexts.trace stores information about a Transaction. Similarly,\n  // event.spans[] stores information about child Spans. Given that a\n  // Transaction is conceptually a Span, normalization should apply to both\n  // Transactions and Spans consistently.\n  // For now the decision is to skip normalization of Transactions and Spans,\n  // so this block overwrites the normalized event to add back the original\n  // Transaction information prior to normalization.\n  if (event.contexts && event.contexts.trace && normalized.contexts) {\n    normalized.contexts.trace = event.contexts.trace;\n\n    // event.contexts.trace.data may contain circular/dangerous data so we need to normalize it\n    if (event.contexts.trace.data) {\n      normalized.contexts.trace.data = normalize(event.contexts.trace.data, depth, maxBreadth);\n    }\n  }\n\n  // event.spans[].data may contain circular/dangerous data so we need to normalize it\n  if (event.spans) {\n    normalized.spans = event.spans.map(span => {\n      const data = spanToJSON(span).data;\n\n      if (data) {\n        // This is a bit weird, as we generally have `Span` instances here, but to be safe we do not assume so\n        // eslint-disable-next-line deprecation/deprecation\n        span.data = normalize(data, depth, maxBreadth);\n      }\n\n      return span;\n    });\n  }\n\n  return normalized;\n}\n\nfunction getFinalScope(scope: Scope | undefined, captureContext: CaptureContext | undefined): Scope | undefined {\n  if (!captureContext) {\n    return scope;\n  }\n\n  const finalScope = scope ? scope.clone() : new Scope();\n  finalScope.update(captureContext);\n  return finalScope;\n}\n\n/**\n * Parse either an `EventHint` directly, or convert a `CaptureContext` to an `EventHint`.\n * This is used to allow to update method signatures that used to accept a `CaptureContext` but should now accept an `EventHint`.\n */\nexport function parseEventHintOrCaptureContext(\n  hint: ExclusiveEventHintOrCaptureContext | undefined,\n): EventHint | undefined {\n  if (!hint) {\n    return undefined;\n  }\n\n  // If you pass a Scope or `() => Scope` as CaptureContext, we just return this as captureContext\n  if (hintIsScopeOrFunction(hint)) {\n    return { captureContext: hint };\n  }\n\n  if (hintIsScopeContext(hint)) {\n    return {\n      captureContext: hint,\n    };\n  }\n\n  return hint;\n}\n\nfunction hintIsScopeOrFunction(\n  hint: CaptureContext | EventHint,\n): hint is ScopeInterface | ((scope: ScopeInterface) => ScopeInterface) {\n  return hint instanceof Scope || typeof hint === 'function';\n}\n\ntype ScopeContextProperty = keyof ScopeContext;\nconst captureContextKeys: readonly ScopeContextProperty[] = [\n  'user',\n  'level',\n  'extra',\n  'contexts',\n  'tags',\n  'fingerprint',\n  'requestSession',\n  'propagationContext',\n] as const;\n\nfunction hintIsScopeContext(hint: Partial<ScopeContext> | EventHint): hint is Partial<ScopeContext> {\n  return Object.keys(hint).some(key => captureContextKeys.includes(key as ScopeContextProperty));\n}\n","import type {\n  Breadcrumb,\n  BreadcrumbHint,\n  CaptureContext,\n  CheckIn,\n  Client,\n  CustomSamplingContext,\n  Event,\n  EventHint,\n  Extra,\n  Extras,\n  FinishedCheckIn,\n  MonitorConfig,\n  Primitive,\n  Scope as ScopeInterface,\n  Session,\n  SessionContext,\n  Severity,\n  SeverityLevel,\n  Span,\n  TransactionContext,\n  User,\n} from '@sentry/types';\nimport { GLOBAL_OBJ, isThenable, logger, timestampInSeconds, uuid4 } from '@sentry/utils';\n\nimport { DEFAULT_ENVIRONMENT } from './constants';\nimport { DEBUG_BUILD } from './debug-build';\nimport type { Hub } from './hub';\nimport { runWithAsyncContext } from './hub';\nimport { getCurrentHub, getIsolationScope } from './hub';\nimport type { Scope } from './scope';\nimport { closeSession, makeSession, updateSession } from './session';\nimport type { ExclusiveEventHintOrCaptureContext } from './utils/prepareEvent';\nimport { parseEventHintOrCaptureContext } from './utils/prepareEvent';\n\n/**\n * Captures an exception event and sends it to Sentry.\n *\n * @param exception The exception to capture.\n * @param hint Optional additional data to attach to the Sentry event.\n * @returns the id of the captured Sentry event.\n */\nexport function captureException(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  exception: any,\n  hint?: ExclusiveEventHintOrCaptureContext,\n): string {\n  // eslint-disable-next-line deprecation/deprecation\n  return getCurrentHub().captureException(exception, parseEventHintOrCaptureContext(hint));\n}\n\n/**\n * Captures a message event and sends it to Sentry.\n *\n * @param exception The exception to capture.\n * @param captureContext Define the level of the message or pass in additional data to attach to the message.\n * @returns the id of the captured message.\n */\nexport function captureMessage(\n  message: string,\n  // eslint-disable-next-line deprecation/deprecation\n  captureContext?: CaptureContext | Severity | SeverityLevel,\n): string {\n  // This is necessary to provide explicit scopes upgrade, without changing the original\n  // arity of the `captureMessage(message, level)` method.\n  const level = typeof captureContext === 'string' ? captureContext : undefined;\n  const context = typeof captureContext !== 'string' ? { captureContext } : undefined;\n  // eslint-disable-next-line deprecation/deprecation\n  return getCurrentHub().captureMessage(message, level, context);\n}\n\n/**\n * Captures a manually created event and sends it to Sentry.\n *\n * @param exception The event to send to Sentry.\n * @param hint Optional additional data to attach to the Sentry event.\n * @returns the id of the captured event.\n */\nexport function captureEvent(event: Event, hint?: EventHint): string {\n  // eslint-disable-next-line deprecation/deprecation\n  return getCurrentHub().captureEvent(event, hint);\n}\n\n/**\n * Callback to set context information onto the scope.\n * @param callback Callback function that receives Scope.\n *\n * @deprecated Use getCurrentScope() directly.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport function configureScope(callback: (scope: Scope) => void): ReturnType<Hub['configureScope']> {\n  // eslint-disable-next-line deprecation/deprecation\n  getCurrentHub().configureScope(callback);\n}\n\n/**\n * Records a new breadcrumb which will be attached to future events.\n *\n * Breadcrumbs will be added to subsequent events to provide more context on\n * user's actions prior to an error or crash.\n *\n * @param breadcrumb The breadcrumb to record.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport function addBreadcrumb(breadcrumb: Breadcrumb, hint?: BreadcrumbHint): ReturnType<Hub['addBreadcrumb']> {\n  // eslint-disable-next-line deprecation/deprecation\n  getCurrentHub().addBreadcrumb(breadcrumb, hint);\n}\n\n/**\n * Sets context data with the given name.\n * @param name of the context\n * @param context Any kind of data. This data will be normalized.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, deprecation/deprecation\nexport function setContext(name: string, context: { [key: string]: any } | null): ReturnType<Hub['setContext']> {\n  // eslint-disable-next-line deprecation/deprecation\n  getCurrentHub().setContext(name, context);\n}\n\n/**\n * Set an object that will be merged sent as extra data with the event.\n * @param extras Extras object to merge into current context.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport function setExtras(extras: Extras): ReturnType<Hub['setExtras']> {\n  // eslint-disable-next-line deprecation/deprecation\n  getCurrentHub().setExtras(extras);\n}\n\n/**\n * Set key:value that will be sent as extra data with the event.\n * @param key String of extra\n * @param extra Any kind of data. This data will be normalized.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport function setExtra(key: string, extra: Extra): ReturnType<Hub['setExtra']> {\n  // eslint-disable-next-line deprecation/deprecation\n  getCurrentHub().setExtra(key, extra);\n}\n\n/**\n * Set an object that will be merged sent as tags data with the event.\n * @param tags Tags context object to merge into current context.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport function setTags(tags: { [key: string]: Primitive }): ReturnType<Hub['setTags']> {\n  // eslint-disable-next-line deprecation/deprecation\n  getCurrentHub().setTags(tags);\n}\n\n/**\n * Set key:value that will be sent as tags data with the event.\n *\n * Can also be used to unset a tag, by passing `undefined`.\n *\n * @param key String key of tag\n * @param value Value of tag\n */\n// eslint-disable-next-line deprecation/deprecation\nexport function setTag(key: string, value: Primitive): ReturnType<Hub['setTag']> {\n  // eslint-disable-next-line deprecation/deprecation\n  getCurrentHub().setTag(key, value);\n}\n\n/**\n * Updates user context information for future events.\n *\n * @param user User context object to be set in the current context. Pass `null` to unset the user.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport function setUser(user: User | null): ReturnType<Hub['setUser']> {\n  // eslint-disable-next-line deprecation/deprecation\n  getCurrentHub().setUser(user);\n}\n\n/**\n * Creates a new scope with and executes the given operation within.\n * The scope is automatically removed once the operation\n * finishes or throws.\n *\n * This is essentially a convenience function for:\n *\n *     pushScope();\n *     callback();\n *     popScope();\n */\nexport function withScope<T>(callback: (scope: Scope) => T): T;\n/**\n * Set the given scope as the active scope in the callback.\n */\nexport function withScope<T>(scope: ScopeInterface | undefined, callback: (scope: Scope) => T): T;\n/**\n * Either creates a new active scope, or sets the given scope as active scope in the given callback.\n */\nexport function withScope<T>(\n  ...rest: [callback: (scope: Scope) => T] | [scope: ScopeInterface | undefined, callback: (scope: Scope) => T]\n): T {\n  // eslint-disable-next-line deprecation/deprecation\n  const hub = getCurrentHub();\n\n  // If a scope is defined, we want to make this the active scope instead of the default one\n  if (rest.length === 2) {\n    const [scope, callback] = rest;\n    if (!scope) {\n      // eslint-disable-next-line deprecation/deprecation\n      return hub.withScope(callback);\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    return hub.withScope(() => {\n      // eslint-disable-next-line deprecation/deprecation\n      hub.getStackTop().scope = scope as Scope;\n      return callback(scope as Scope);\n    });\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  return hub.withScope(rest[0]);\n}\n\n/**\n * Attempts to fork the current isolation scope and the current scope based on the current async context strategy. If no\n * async context strategy is set, the isolation scope and the current scope will not be forked (this is currently the\n * case, for example, in the browser).\n *\n * Usage of this function in environments without async context strategy is discouraged and may lead to unexpected behaviour.\n *\n * This function is intended for Sentry SDK and SDK integration development. It is not recommended to be used in \"normal\"\n * applications directly because it comes with pitfalls. Use at your own risk!\n *\n * @param callback The callback in which the passed isolation scope is active. (Note: In environments without async\n * context strategy, the currently active isolation scope may change within execution of the callback.)\n * @returns The same value that `callback` returns.\n */\nexport function withIsolationScope<T>(callback: (isolationScope: Scope) => T): T {\n  return runWithAsyncContext(() => {\n    return callback(getIsolationScope());\n  });\n}\n\n/**\n * Forks the current scope and sets the provided span as active span in the context of the provided callback.\n *\n * @param span Spans started in the context of the provided callback will be children of this span.\n * @param callback Execution context in which the provided span will be active. Is passed the newly forked scope.\n * @returns the value returned from the provided callback function.\n */\nexport function withActiveSpan<T>(span: Span, callback: (scope: Scope) => T): T {\n  return withScope(scope => {\n    // eslint-disable-next-line deprecation/deprecation\n    scope.setSpan(span);\n    return callback(scope);\n  });\n}\n\n/**\n * Starts a new `Transaction` and returns it. This is the entry point to manual tracing instrumentation.\n *\n * A tree structure can be built by adding child spans to the transaction, and child spans to other spans. To start a\n * new child span within the transaction or any span, call the respective `.startChild()` method.\n *\n * Every child span must be finished before the transaction is finished, otherwise the unfinished spans are discarded.\n *\n * The transaction must be finished with a call to its `.end()` method, at which point the transaction with all its\n * finished child spans will be sent to Sentry.\n *\n * NOTE: This function should only be used for *manual* instrumentation. Auto-instrumentation should call\n * `startTransaction` directly on the hub.\n *\n * @param context Properties of the new `Transaction`.\n * @param customSamplingContext Information given to the transaction sampling function (along with context-dependent\n * default values). See {@link Options.tracesSampler}.\n *\n * @returns The transaction which was just started\n *\n * @deprecated Use `startSpan()`, `startSpanManual()` or `startInactiveSpan()` instead.\n */\nexport function startTransaction(\n  context: TransactionContext,\n  customSamplingContext?: CustomSamplingContext,\n  // eslint-disable-next-line deprecation/deprecation\n): ReturnType<Hub['startTransaction']> {\n  // eslint-disable-next-line deprecation/deprecation\n  return getCurrentHub().startTransaction({ ...context }, customSamplingContext);\n}\n\n/**\n * Create a cron monitor check in and send it to Sentry.\n *\n * @param checkIn An object that describes a check in.\n * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n * to create a monitor automatically when sending a check in.\n */\nexport function captureCheckIn(checkIn: CheckIn, upsertMonitorConfig?: MonitorConfig): string {\n  const scope = getCurrentScope();\n  const client = getClient();\n  if (!client) {\n    DEBUG_BUILD && logger.warn('Cannot capture check-in. No client defined.');\n  } else if (!client.captureCheckIn) {\n    DEBUG_BUILD && logger.warn('Cannot capture check-in. Client does not support sending check-ins.');\n  } else {\n    return client.captureCheckIn(checkIn, upsertMonitorConfig, scope);\n  }\n\n  return uuid4();\n}\n\n/**\n * Wraps a callback with a cron monitor check in. The check in will be sent to Sentry when the callback finishes.\n *\n * @param monitorSlug The distinct slug of the monitor.\n * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n * to create a monitor automatically when sending a check in.\n */\nexport function withMonitor<T>(\n  monitorSlug: CheckIn['monitorSlug'],\n  callback: () => T,\n  upsertMonitorConfig?: MonitorConfig,\n): T {\n  const checkInId = captureCheckIn({ monitorSlug, status: 'in_progress' }, upsertMonitorConfig);\n  const now = timestampInSeconds();\n\n  function finishCheckIn(status: FinishedCheckIn['status']): void {\n    captureCheckIn({ monitorSlug, status, checkInId, duration: timestampInSeconds() - now });\n  }\n\n  let maybePromiseResult: T;\n  try {\n    maybePromiseResult = callback();\n  } catch (e) {\n    finishCheckIn('error');\n    throw e;\n  }\n\n  if (isThenable(maybePromiseResult)) {\n    Promise.resolve(maybePromiseResult).then(\n      () => {\n        finishCheckIn('ok');\n      },\n      () => {\n        finishCheckIn('error');\n      },\n    );\n  } else {\n    finishCheckIn('ok');\n  }\n\n  return maybePromiseResult;\n}\n\n/**\n * Call `flush()` on the current client, if there is one. See {@link Client.flush}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue. Omitting this parameter will cause\n * the client to wait until all events are sent before resolving the promise.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nexport async function flush(timeout?: number): Promise<boolean> {\n  const client = getClient();\n  if (client) {\n    return client.flush(timeout);\n  }\n  DEBUG_BUILD && logger.warn('Cannot flush events. No client defined.');\n  return Promise.resolve(false);\n}\n\n/**\n * Call `close()` on the current client, if there is one. See {@link Client.close}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue before shutting down. Omitting this\n * parameter will cause the client to wait until all events are sent before disabling itself.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nexport async function close(timeout?: number): Promise<boolean> {\n  const client = getClient();\n  if (client) {\n    return client.close(timeout);\n  }\n  DEBUG_BUILD && logger.warn('Cannot flush events and disable SDK. No client defined.');\n  return Promise.resolve(false);\n}\n\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n */\nexport function lastEventId(): string | undefined {\n  // eslint-disable-next-line deprecation/deprecation\n  return getCurrentHub().lastEventId();\n}\n\n/**\n * Get the currently active client.\n */\nexport function getClient<C extends Client>(): C | undefined {\n  // eslint-disable-next-line deprecation/deprecation\n  return getCurrentHub().getClient<C>();\n}\n\n/**\n * Returns true if Sentry has been properly initialized.\n */\nexport function isInitialized(): boolean {\n  return !!getClient();\n}\n\n/**\n * Get the currently active scope.\n */\nexport function getCurrentScope(): Scope {\n  // eslint-disable-next-line deprecation/deprecation\n  return getCurrentHub().getScope();\n}\n\n/**\n * Start a session on the current isolation scope.\n *\n * @param context (optional) additional properties to be applied to the returned session object\n *\n * @returns the new active session\n */\nexport function startSession(context?: SessionContext): Session {\n  const client = getClient();\n  const isolationScope = getIsolationScope();\n  const currentScope = getCurrentScope();\n\n  const { release, environment = DEFAULT_ENVIRONMENT } = (client && client.getOptions()) || {};\n\n  // Will fetch userAgent if called from browser sdk\n  const { userAgent } = GLOBAL_OBJ.navigator || {};\n\n  const session = makeSession({\n    release,\n    environment,\n    user: currentScope.getUser() || isolationScope.getUser(),\n    ...(userAgent && { userAgent }),\n    ...context,\n  });\n\n  // End existing session if there's one\n  const currentSession = isolationScope.getSession();\n  if (currentSession && currentSession.status === 'ok') {\n    updateSession(currentSession, { status: 'exited' });\n  }\n\n  endSession();\n\n  // Afterwards we set the new session on the scope\n  isolationScope.setSession(session);\n\n  // TODO (v8): Remove this and only use the isolation scope(?).\n  // For v7 though, we can't \"soft-break\" people using getCurrentHub().getScope().setSession()\n  currentScope.setSession(session);\n\n  return session;\n}\n\n/**\n * End the session on the current isolation scope.\n */\nexport function endSession(): void {\n  const isolationScope = getIsolationScope();\n  const currentScope = getCurrentScope();\n\n  const session = currentScope.getSession() || isolationScope.getSession();\n  if (session) {\n    closeSession(session);\n  }\n  _sendSessionUpdate();\n\n  // the session is over; take it off of the scope\n  isolationScope.setSession();\n\n  // TODO (v8): Remove this and only use the isolation scope(?).\n  // For v7 though, we can't \"soft-break\" people using getCurrentHub().getScope().setSession()\n  currentScope.setSession();\n}\n\n/**\n * Sends the current Session on the scope\n */\nfunction _sendSessionUpdate(): void {\n  const isolationScope = getIsolationScope();\n  const currentScope = getCurrentScope();\n  const client = getClient();\n  // TODO (v8): Remove currentScope and only use the isolation scope(?).\n  // For v7 though, we can't \"soft-break\" people using getCurrentHub().getScope().setSession()\n  const session = currentScope.getSession() || isolationScope.getSession();\n  if (session && client && client.captureSession) {\n    client.captureSession(session);\n  }\n}\n\n/**\n * Sends the current session on the scope to Sentry\n *\n * @param end If set the session will be marked as exited and removed from the scope.\n *            Defaults to `false`.\n */\nexport function captureSession(end: boolean = false): void {\n  // both send the update and pull the session from the scope\n  if (end) {\n    endSession();\n    return;\n  }\n\n  // only send the update\n  _sendSessionUpdate();\n}\n","import type { Span } from '@sentry/types';\n\n/**\n * Returns the root span of a given span.\n *\n * As long as we use `Transaction`s internally, the returned root span\n * will be a `Transaction` but be aware that this might change in the future.\n *\n * If the given span has no root span or transaction, `undefined` is returned.\n */\nexport function getRootSpan(span: Span): Span | undefined {\n  // TODO (v8): Remove this check and just return span\n  // eslint-disable-next-line deprecation/deprecation\n  return span.transaction;\n}\n","import type { Client, DynamicSamplingContext, Scope, Span, Transaction } from '@sentry/types';\nimport { dropUndefinedKeys } from '@sentry/utils';\n\nimport { DEFAULT_ENVIRONMENT } from '../constants';\nimport { getClient, getCurrentScope } from '../exports';\nimport { getRootSpan } from '../utils/getRootSpan';\nimport { spanIsSampled, spanToJSON } from '../utils/spanUtils';\n\n/**\n * Creates a dynamic sampling context from a client.\n *\n * Dispatches the `createDsc` lifecycle hook as a side effect.\n */\nexport function getDynamicSamplingContextFromClient(\n  trace_id: string,\n  client: Client,\n  scope?: Scope,\n): DynamicSamplingContext {\n  const options = client.getOptions();\n\n  const { publicKey: public_key } = client.getDsn() || {};\n  // TODO(v8): Remove segment from User\n  // eslint-disable-next-line deprecation/deprecation\n  const { segment: user_segment } = (scope && scope.getUser()) || {};\n\n  const dsc = dropUndefinedKeys({\n    environment: options.environment || DEFAULT_ENVIRONMENT,\n    release: options.release,\n    user_segment,\n    public_key,\n    trace_id,\n  }) as DynamicSamplingContext;\n\n  client.emit && client.emit('createDsc', dsc);\n\n  return dsc;\n}\n\n/**\n * A Span with a frozen dynamic sampling context.\n */\ntype TransactionWithV7FrozenDsc = Transaction & { _frozenDynamicSamplingContext?: DynamicSamplingContext };\n\n/**\n * Creates a dynamic sampling context from a span (and client and scope)\n *\n * @param span the span from which a few values like the root span name and sample rate are extracted.\n *\n * @returns a dynamic sampling context\n */\nexport function getDynamicSamplingContextFromSpan(span: Span): Readonly<Partial<DynamicSamplingContext>> {\n  const client = getClient();\n  if (!client) {\n    return {};\n  }\n\n  // passing emit=false here to only emit later once the DSC is actually populated\n  const dsc = getDynamicSamplingContextFromClient(spanToJSON(span).trace_id || '', client, getCurrentScope());\n\n  // TODO (v8): Remove v7FrozenDsc as a Transaction will no longer have _frozenDynamicSamplingContext\n  const txn = getRootSpan(span) as TransactionWithV7FrozenDsc | undefined;\n  if (!txn) {\n    return dsc;\n  }\n\n  // TODO (v8): Remove v7FrozenDsc as a Transaction will no longer have _frozenDynamicSamplingContext\n  // For now we need to avoid breaking users who directly created a txn with a DSC, where this field is still set.\n  // @see Transaction class constructor\n  const v7FrozenDsc = txn && txn._frozenDynamicSamplingContext;\n  if (v7FrozenDsc) {\n    return v7FrozenDsc;\n  }\n\n  // TODO (v8): Replace txn.metadata with txn.attributes[]\n  // We can't do this yet because attributes aren't always set yet.\n  // eslint-disable-next-line deprecation/deprecation\n  const { sampleRate: maybeSampleRate, source } = txn.metadata;\n  if (maybeSampleRate != null) {\n    dsc.sample_rate = `${maybeSampleRate}`;\n  }\n\n  // We don't want to have a transaction name in the DSC if the source is \"url\" because URLs might contain PII\n  const jsonSpan = spanToJSON(txn);\n\n  // after JSON conversion, txn.name becomes jsonSpan.description\n  if (source && source !== 'url') {\n    dsc.transaction = jsonSpan.description;\n  }\n\n  dsc.sampled = String(spanIsSampled(txn));\n\n  client.emit && client.emit('createDsc', dsc);\n\n  return dsc;\n}\n","import type { Breadcrumb, Event, ScopeData, Span } from '@sentry/types';\nimport { arrayify, dropUndefinedKeys } from '@sentry/utils';\nimport { getDynamicSamplingContextFromSpan } from '../tracing/dynamicSamplingContext';\nimport { getRootSpan } from './getRootSpan';\nimport { spanToJSON, spanToTraceContext } from './spanUtils';\n\n/**\n * Applies data from the scope to the event and runs all event processors on it.\n */\nexport function applyScopeDataToEvent(event: Event, data: ScopeData): void {\n  const { fingerprint, span, breadcrumbs, sdkProcessingMetadata } = data;\n\n  // Apply general data\n  applyDataToEvent(event, data);\n\n  // We want to set the trace context for normal events only if there isn't already\n  // a trace context on the event. There is a product feature in place where we link\n  // errors with transaction and it relies on that.\n  if (span) {\n    applySpanToEvent(event, span);\n  }\n\n  applyFingerprintToEvent(event, fingerprint);\n  applyBreadcrumbsToEvent(event, breadcrumbs);\n  applySdkMetadataToEvent(event, sdkProcessingMetadata);\n}\n\n/** Merge data of two scopes together. */\nexport function mergeScopeData(data: ScopeData, mergeData: ScopeData): void {\n  const {\n    extra,\n    tags,\n    user,\n    contexts,\n    level,\n    sdkProcessingMetadata,\n    breadcrumbs,\n    fingerprint,\n    eventProcessors,\n    attachments,\n    propagationContext,\n    // eslint-disable-next-line deprecation/deprecation\n    transactionName,\n    span,\n  } = mergeData;\n\n  mergeAndOverwriteScopeData(data, 'extra', extra);\n  mergeAndOverwriteScopeData(data, 'tags', tags);\n  mergeAndOverwriteScopeData(data, 'user', user);\n  mergeAndOverwriteScopeData(data, 'contexts', contexts);\n  mergeAndOverwriteScopeData(data, 'sdkProcessingMetadata', sdkProcessingMetadata);\n\n  if (level) {\n    data.level = level;\n  }\n\n  if (transactionName) {\n    // eslint-disable-next-line deprecation/deprecation\n    data.transactionName = transactionName;\n  }\n\n  if (span) {\n    data.span = span;\n  }\n\n  if (breadcrumbs.length) {\n    data.breadcrumbs = [...data.breadcrumbs, ...breadcrumbs];\n  }\n\n  if (fingerprint.length) {\n    data.fingerprint = [...data.fingerprint, ...fingerprint];\n  }\n\n  if (eventProcessors.length) {\n    data.eventProcessors = [...data.eventProcessors, ...eventProcessors];\n  }\n\n  if (attachments.length) {\n    data.attachments = [...data.attachments, ...attachments];\n  }\n\n  data.propagationContext = { ...data.propagationContext, ...propagationContext };\n}\n\n/**\n * Merges certain scope data. Undefined values will overwrite any existing values.\n * Exported only for tests.\n */\nexport function mergeAndOverwriteScopeData<\n  Prop extends 'extra' | 'tags' | 'user' | 'contexts' | 'sdkProcessingMetadata',\n  Data extends ScopeData,\n>(data: Data, prop: Prop, mergeVal: Data[Prop]): void {\n  if (mergeVal && Object.keys(mergeVal).length) {\n    // Clone object\n    data[prop] = { ...data[prop] };\n    for (const key in mergeVal) {\n      if (Object.prototype.hasOwnProperty.call(mergeVal, key)) {\n        data[prop][key] = mergeVal[key];\n      }\n    }\n  }\n}\n\n/** Exported only for tests */\nexport function mergeArray<Prop extends 'breadcrumbs' | 'fingerprint'>(\n  event: Event,\n  prop: Prop,\n  mergeVal: ScopeData[Prop],\n): void {\n  const prevVal = event[prop];\n  // If we are not merging any new values,\n  // we only need to proceed if there was an empty array before (as we want to replace it with undefined)\n  if (!mergeVal.length && (!prevVal || prevVal.length)) {\n    return;\n  }\n\n  const merged = [...(prevVal || []), ...mergeVal] as ScopeData[Prop];\n  event[prop] = merged.length ? merged : undefined;\n}\n\nfunction applyDataToEvent(event: Event, data: ScopeData): void {\n  const {\n    extra,\n    tags,\n    user,\n    contexts,\n    level,\n    // eslint-disable-next-line deprecation/deprecation\n    transactionName,\n  } = data;\n\n  const cleanedExtra = dropUndefinedKeys(extra);\n  if (cleanedExtra && Object.keys(cleanedExtra).length) {\n    event.extra = { ...cleanedExtra, ...event.extra };\n  }\n\n  const cleanedTags = dropUndefinedKeys(tags);\n  if (cleanedTags && Object.keys(cleanedTags).length) {\n    event.tags = { ...cleanedTags, ...event.tags };\n  }\n\n  const cleanedUser = dropUndefinedKeys(user);\n  if (cleanedUser && Object.keys(cleanedUser).length) {\n    event.user = { ...cleanedUser, ...event.user };\n  }\n\n  const cleanedContexts = dropUndefinedKeys(contexts);\n  if (cleanedContexts && Object.keys(cleanedContexts).length) {\n    event.contexts = { ...cleanedContexts, ...event.contexts };\n  }\n\n  if (level) {\n    event.level = level;\n  }\n\n  if (transactionName) {\n    event.transaction = transactionName;\n  }\n}\n\nfunction applyBreadcrumbsToEvent(event: Event, breadcrumbs: Breadcrumb[]): void {\n  const mergedBreadcrumbs = [...(event.breadcrumbs || []), ...breadcrumbs];\n  event.breadcrumbs = mergedBreadcrumbs.length ? mergedBreadcrumbs : undefined;\n}\n\nfunction applySdkMetadataToEvent(event: Event, sdkProcessingMetadata: ScopeData['sdkProcessingMetadata']): void {\n  event.sdkProcessingMetadata = {\n    ...event.sdkProcessingMetadata,\n    ...sdkProcessingMetadata,\n  };\n}\n\nfunction applySpanToEvent(event: Event, span: Span): void {\n  event.contexts = { trace: spanToTraceContext(span), ...event.contexts };\n  const rootSpan = getRootSpan(span);\n  if (rootSpan) {\n    event.sdkProcessingMetadata = {\n      dynamicSamplingContext: getDynamicSamplingContextFromSpan(span),\n      ...event.sdkProcessingMetadata,\n    };\n    const transactionName = spanToJSON(rootSpan).description;\n    if (transactionName) {\n      event.tags = { transaction: transactionName, ...event.tags };\n    }\n  }\n}\n\n/**\n * Applies fingerprint from the scope to the event if there's one,\n * uses message if there's one instead or get rid of empty fingerprint\n */\nfunction applyFingerprintToEvent(event: Event, fingerprint: ScopeData['fingerprint'] | undefined): void {\n  // Make sure it's an array first and we actually have something in place\n  event.fingerprint = event.fingerprint ? arrayify(event.fingerprint) : [];\n\n  // If we have something on the scope, then merge it with event\n  if (fingerprint) {\n    event.fingerprint = event.fingerprint.concat(fingerprint);\n  }\n\n  // If we have no data at all, remove empty array default\n  if (event.fingerprint && !event.fingerprint.length) {\n    delete event.fingerprint;\n  }\n}\n","/* eslint-disable max-lines */\nimport type {\n  Attachment,\n  Breadcrumb,\n  CaptureContext,\n  Client,\n  Context,\n  Contexts,\n  Event,\n  EventHint,\n  EventProcessor,\n  Extra,\n  Extras,\n  Primitive,\n  PropagationContext,\n  RequestSession,\n  Scope as ScopeInterface,\n  ScopeContext,\n  ScopeData,\n  Session,\n  Severity,\n  SeverityLevel,\n  Span,\n  Transaction,\n  User,\n} from '@sentry/types';\nimport { dateTimestampInSeconds, isPlainObject, logger, uuid4 } from '@sentry/utils';\n\nimport { getGlobalEventProcessors, notifyEventProcessors } from './eventProcessors';\nimport { updateSession } from './session';\nimport { applyScopeDataToEvent } from './utils/applyScopeDataToEvent';\n\n/**\n * Default value for maximum number of breadcrumbs added to an event.\n */\nconst DEFAULT_MAX_BREADCRUMBS = 100;\n\n/**\n * The global scope is kept in this module.\n * When accessing this via `getGlobalScope()` we'll make sure to set one if none is currently present.\n */\nlet globalScope: ScopeInterface | undefined;\n\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\nexport class Scope implements ScopeInterface {\n  /** Flag if notifying is happening. */\n  protected _notifyingListeners: boolean;\n\n  /** Callback for client to receive scope changes. */\n  protected _scopeListeners: Array<(scope: Scope) => void>;\n\n  /** Callback list that will be called after {@link applyToEvent}. */\n  protected _eventProcessors: EventProcessor[];\n\n  /** Array of breadcrumbs. */\n  protected _breadcrumbs: Breadcrumb[];\n\n  /** User */\n  protected _user: User;\n\n  /** Tags */\n  protected _tags: { [key: string]: Primitive };\n\n  /** Extra */\n  protected _extra: Extras;\n\n  /** Contexts */\n  protected _contexts: Contexts;\n\n  /** Attachments */\n  protected _attachments: Attachment[];\n\n  /** Propagation Context for distributed tracing */\n  protected _propagationContext: PropagationContext;\n\n  /**\n   * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get\n   * sent to Sentry\n   */\n  protected _sdkProcessingMetadata: { [key: string]: unknown };\n\n  /** Fingerprint */\n  protected _fingerprint?: string[];\n\n  /** Severity */\n  // eslint-disable-next-line deprecation/deprecation\n  protected _level?: Severity | SeverityLevel;\n\n  /**\n   * Transaction Name\n   */\n  protected _transactionName?: string;\n\n  /** Span */\n  protected _span?: Span;\n\n  /** Session */\n  protected _session?: Session;\n\n  /** Request Mode Session Status */\n  protected _requestSession?: RequestSession;\n\n  /** The client on this scope */\n  protected _client?: Client;\n\n  // NOTE: Any field which gets added here should get added not only to the constructor but also to the `clone` method.\n\n  public constructor() {\n    this._notifyingListeners = false;\n    this._scopeListeners = [];\n    this._eventProcessors = [];\n    this._breadcrumbs = [];\n    this._attachments = [];\n    this._user = {};\n    this._tags = {};\n    this._extra = {};\n    this._contexts = {};\n    this._sdkProcessingMetadata = {};\n    this._propagationContext = generatePropagationContext();\n  }\n\n  /**\n   * Inherit values from the parent scope.\n   * @deprecated Use `scope.clone()` and `new Scope()` instead.\n   */\n  public static clone(scope?: Scope): Scope {\n    return scope ? scope.clone() : new Scope();\n  }\n\n  /**\n   * Clone this scope instance.\n   */\n  public clone(): Scope {\n    const newScope = new Scope();\n    newScope._breadcrumbs = [...this._breadcrumbs];\n    newScope._tags = { ...this._tags };\n    newScope._extra = { ...this._extra };\n    newScope._contexts = { ...this._contexts };\n    newScope._user = this._user;\n    newScope._level = this._level;\n    newScope._span = this._span;\n    newScope._session = this._session;\n    newScope._transactionName = this._transactionName;\n    newScope._fingerprint = this._fingerprint;\n    newScope._eventProcessors = [...this._eventProcessors];\n    newScope._requestSession = this._requestSession;\n    newScope._attachments = [...this._attachments];\n    newScope._sdkProcessingMetadata = { ...this._sdkProcessingMetadata };\n    newScope._propagationContext = { ...this._propagationContext };\n    newScope._client = this._client;\n\n    return newScope;\n  }\n\n  /** Update the client on the scope. */\n  public setClient(client: Client | undefined): void {\n    this._client = client;\n  }\n\n  /**\n   * Get the client assigned to this scope.\n   *\n   * It is generally recommended to use the global function `Sentry.getClient()` instead, unless you know what you are doing.\n   */\n  public getClient(): Client | undefined {\n    return this._client;\n  }\n\n  /**\n   * Add internal on change listener. Used for sub SDKs that need to store the scope.\n   * @hidden\n   */\n  public addScopeListener(callback: (scope: Scope) => void): void {\n    this._scopeListeners.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addEventProcessor(callback: EventProcessor): this {\n    this._eventProcessors.push(callback);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): this {\n    // If null is passed we want to unset everything, but still define keys,\n    // so that later down in the pipeline any existing values are cleared.\n    this._user = user || {\n      email: undefined,\n      id: undefined,\n      ip_address: undefined,\n      segment: undefined,\n      username: undefined,\n    };\n\n    if (this._session) {\n      updateSession(this._session, { user });\n    }\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getUser(): User | undefined {\n    return this._user;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getRequestSession(): RequestSession | undefined {\n    return this._requestSession;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setRequestSession(requestSession?: RequestSession): this {\n    this._requestSession = requestSession;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: Primitive }): this {\n    this._tags = {\n      ...this._tags,\n      ...tags,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): this {\n    this._tags = { ...this._tags, [key]: value };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: Extras): this {\n    this._extra = {\n      ...this._extra,\n      ...extras,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: Extra): this {\n    this._extra = { ...this._extra, [key]: extra };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setFingerprint(fingerprint: string[]): this {\n    this._fingerprint = fingerprint;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setLevel(\n    // eslint-disable-next-line deprecation/deprecation\n    level: Severity | SeverityLevel,\n  ): this {\n    this._level = level;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets the transaction name on the scope for future events.\n   */\n  public setTransactionName(name?: string): this {\n    this._transactionName = name;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setContext(key: string, context: Context | null): this {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts[key] = context;\n    }\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets the Span on the scope.\n   * @param span Span\n   * @deprecated Instead of setting a span on a scope, use `startSpan()`/`startSpanManual()` instead.\n   */\n  public setSpan(span?: Span): this {\n    this._span = span;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Returns the `Span` if there is one.\n   * @deprecated Use `getActiveSpan()` instead.\n   */\n  public getSpan(): Span | undefined {\n    return this._span;\n  }\n\n  /**\n   * Returns the `Transaction` attached to the scope (if there is one).\n   * @deprecated You should not rely on the transaction, but just use `startSpan()` APIs instead.\n   */\n  public getTransaction(): Transaction | undefined {\n    // Often, this span (if it exists at all) will be a transaction, but it's not guaranteed to be. Regardless, it will\n    // have a pointer to the currently-active transaction.\n    const span = this._span;\n    // Cannot replace with getRootSpan because getRootSpan returns a span, not a transaction\n    // Also, this method will be removed anyway.\n    // eslint-disable-next-line deprecation/deprecation\n    return span && span.transaction;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSession(session?: Session): this {\n    if (!session) {\n      delete this._session;\n    } else {\n      this._session = session;\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getSession(): Session | undefined {\n    return this._session;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public update(captureContext?: CaptureContext): this {\n    if (!captureContext) {\n      return this;\n    }\n\n    const scopeToMerge = typeof captureContext === 'function' ? captureContext(this) : captureContext;\n\n    if (scopeToMerge instanceof Scope) {\n      const scopeData = scopeToMerge.getScopeData();\n\n      this._tags = { ...this._tags, ...scopeData.tags };\n      this._extra = { ...this._extra, ...scopeData.extra };\n      this._contexts = { ...this._contexts, ...scopeData.contexts };\n      if (scopeData.user && Object.keys(scopeData.user).length) {\n        this._user = scopeData.user;\n      }\n      if (scopeData.level) {\n        this._level = scopeData.level;\n      }\n      if (scopeData.fingerprint.length) {\n        this._fingerprint = scopeData.fingerprint;\n      }\n      if (scopeToMerge.getRequestSession()) {\n        this._requestSession = scopeToMerge.getRequestSession();\n      }\n      if (scopeData.propagationContext) {\n        this._propagationContext = scopeData.propagationContext;\n      }\n    } else if (isPlainObject(scopeToMerge)) {\n      const scopeContext = captureContext as ScopeContext;\n      this._tags = { ...this._tags, ...scopeContext.tags };\n      this._extra = { ...this._extra, ...scopeContext.extra };\n      this._contexts = { ...this._contexts, ...scopeContext.contexts };\n      if (scopeContext.user) {\n        this._user = scopeContext.user;\n      }\n      if (scopeContext.level) {\n        this._level = scopeContext.level;\n      }\n      if (scopeContext.fingerprint) {\n        this._fingerprint = scopeContext.fingerprint;\n      }\n      if (scopeContext.requestSession) {\n        this._requestSession = scopeContext.requestSession;\n      }\n      if (scopeContext.propagationContext) {\n        this._propagationContext = scopeContext.propagationContext;\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clear(): this {\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._requestSession = undefined;\n    this._span = undefined;\n    this._session = undefined;\n    this._notifyScopeListeners();\n    this._attachments = [];\n    this._propagationContext = generatePropagationContext();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, maxBreadcrumbs?: number): this {\n    const maxCrumbs = typeof maxBreadcrumbs === 'number' ? maxBreadcrumbs : DEFAULT_MAX_BREADCRUMBS;\n\n    // No data has been changed, so don't notify scope listeners\n    if (maxCrumbs <= 0) {\n      return this;\n    }\n\n    const mergedBreadcrumb = {\n      timestamp: dateTimestampInSeconds(),\n      ...breadcrumb,\n    };\n\n    const breadcrumbs = this._breadcrumbs;\n    breadcrumbs.push(mergedBreadcrumb);\n    this._breadcrumbs = breadcrumbs.length > maxCrumbs ? breadcrumbs.slice(-maxCrumbs) : breadcrumbs;\n\n    this._notifyScopeListeners();\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getLastBreadcrumb(): Breadcrumb | undefined {\n    return this._breadcrumbs[this._breadcrumbs.length - 1];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clearBreadcrumbs(): this {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addAttachment(attachment: Attachment): this {\n    this._attachments.push(attachment);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use `getScopeData()` instead.\n   */\n  public getAttachments(): Attachment[] {\n    const data = this.getScopeData();\n\n    return data.attachments;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clearAttachments(): this {\n    this._attachments = [];\n    return this;\n  }\n\n  /** @inheritDoc */\n  public getScopeData(): ScopeData {\n    const {\n      _breadcrumbs,\n      _attachments,\n      _contexts,\n      _tags,\n      _extra,\n      _user,\n      _level,\n      _fingerprint,\n      _eventProcessors,\n      _propagationContext,\n      _sdkProcessingMetadata,\n      _transactionName,\n      _span,\n    } = this;\n\n    return {\n      breadcrumbs: _breadcrumbs,\n      attachments: _attachments,\n      contexts: _contexts,\n      tags: _tags,\n      extra: _extra,\n      user: _user,\n      level: _level,\n      fingerprint: _fingerprint || [],\n      eventProcessors: _eventProcessors,\n      propagationContext: _propagationContext,\n      sdkProcessingMetadata: _sdkProcessingMetadata,\n      transactionName: _transactionName,\n      span: _span,\n    };\n  }\n\n  /**\n   * Applies data from the scope to the event and runs all event processors on it.\n   *\n   * @param event Event\n   * @param hint Object containing additional information about the original exception, for use by the event processors.\n   * @hidden\n   * @deprecated Use `applyScopeDataToEvent()` directly\n   */\n  public applyToEvent(\n    event: Event,\n    hint: EventHint = {},\n    additionalEventProcessors: EventProcessor[] = [],\n  ): PromiseLike<Event | null> {\n    applyScopeDataToEvent(event, this.getScopeData());\n\n    // TODO (v8): Update this order to be: Global > Client > Scope\n    const eventProcessors: EventProcessor[] = [\n      ...additionalEventProcessors,\n      // eslint-disable-next-line deprecation/deprecation\n      ...getGlobalEventProcessors(),\n      ...this._eventProcessors,\n    ];\n\n    return notifyEventProcessors(eventProcessors, event, hint);\n  }\n\n  /**\n   * Add data which will be accessible during event processing but won't get sent to Sentry\n   */\n  public setSDKProcessingMetadata(newData: { [key: string]: unknown }): this {\n    this._sdkProcessingMetadata = { ...this._sdkProcessingMetadata, ...newData };\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setPropagationContext(context: PropagationContext): this {\n    this._propagationContext = context;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getPropagationContext(): PropagationContext {\n    return this._propagationContext;\n  }\n\n  /**\n   * Capture an exception for this scope.\n   *\n   * @param exception The exception to capture.\n   * @param hint Optinal additional data to attach to the Sentry event.\n   * @returns the id of the captured Sentry event.\n   */\n  public captureException(exception: unknown, hint?: EventHint): string {\n    const eventId = hint && hint.event_id ? hint.event_id : uuid4();\n\n    if (!this._client) {\n      logger.warn('No client configured on scope - will not capture exception!');\n      return eventId;\n    }\n\n    const syntheticException = new Error('Sentry syntheticException');\n\n    this._client.captureException(\n      exception,\n      {\n        originalException: exception,\n        syntheticException,\n        ...hint,\n        event_id: eventId,\n      },\n      this,\n    );\n\n    return eventId;\n  }\n\n  /**\n   * Capture a message for this scope.\n   *\n   * @param message The message to capture.\n   * @param level An optional severity level to report the message with.\n   * @param hint Optional additional data to attach to the Sentry event.\n   * @returns the id of the captured message.\n   */\n  public captureMessage(message: string, level?: SeverityLevel, hint?: EventHint): string {\n    const eventId = hint && hint.event_id ? hint.event_id : uuid4();\n\n    if (!this._client) {\n      logger.warn('No client configured on scope - will not capture message!');\n      return eventId;\n    }\n\n    const syntheticException = new Error(message);\n\n    this._client.captureMessage(\n      message,\n      level,\n      {\n        originalException: message,\n        syntheticException,\n        ...hint,\n        event_id: eventId,\n      },\n      this,\n    );\n\n    return eventId;\n  }\n\n  /**\n   * Captures a manually created event for this scope and sends it to Sentry.\n   *\n   * @param exception The event to capture.\n   * @param hint Optional additional data to attach to the Sentry event.\n   * @returns the id of the captured event.\n   */\n  public captureEvent(event: Event, hint?: EventHint): string {\n    const eventId = hint && hint.event_id ? hint.event_id : uuid4();\n\n    if (!this._client) {\n      logger.warn('No client configured on scope - will not capture event!');\n      return eventId;\n    }\n\n    this._client.captureEvent(event, { ...hint, event_id: eventId }, this);\n\n    return eventId;\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n  protected _notifyScopeListeners(): void {\n    // We need this check for this._notifyingListeners to be able to work on scope during updates\n    // If this check is not here we'll produce endless recursion when something is done with the scope\n    // during the callback.\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      this._scopeListeners.forEach(callback => {\n        callback(this);\n      });\n      this._notifyingListeners = false;\n    }\n  }\n}\n\n/**\n * Get the global scope.\n * This scope is applied to _all_ events.\n */\nexport function getGlobalScope(): ScopeInterface {\n  if (!globalScope) {\n    globalScope = new Scope();\n  }\n\n  return globalScope;\n}\n\n/**\n * This is mainly needed for tests.\n * DO NOT USE this, as this is an internal API and subject to change.\n * @hidden\n */\nexport function setGlobalScope(scope: ScopeInterface | undefined): void {\n  globalScope = scope;\n}\n\nfunction generatePropagationContext(): PropagationContext {\n  return {\n    traceId: uuid4(),\n    spanId: uuid4().substring(16),\n  };\n}\n","export const SDK_VERSION = '7.120.3';\n","/* eslint-disable max-lines */\nimport type {\n  Breadcrumb,\n  BreadcrumbHint,\n  Client,\n  CustomSamplingContext,\n  Event,\n  EventHint,\n  Extra,\n  Extras,\n  Hub as HubInterface,\n  Integration,\n  IntegrationClass,\n  Primitive,\n  Session,\n  SessionContext,\n  Severity,\n  SeverityLevel,\n  Transaction,\n  TransactionContext,\n  User,\n} from '@sentry/types';\nimport {\n  GLOBAL_OBJ,\n  consoleSandbox,\n  dateTimestampInSeconds,\n  getGlobalSingleton,\n  isThenable,\n  logger,\n  uuid4,\n} from '@sentry/utils';\n\nimport { DEFAULT_ENVIRONMENT } from './constants';\nimport { DEBUG_BUILD } from './debug-build';\nimport { Scope } from './scope';\nimport { closeSession, makeSession, updateSession } from './session';\nimport { SDK_VERSION } from './version';\n\n/**\n * API compatibility version of this hub.\n *\n * WARNING: This number should only be increased when the global interface\n * changes and new methods are introduced.\n *\n * @hidden\n */\nexport const API_VERSION = parseFloat(SDK_VERSION);\n\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\nconst DEFAULT_BREADCRUMBS = 100;\n\nexport interface RunWithAsyncContextOptions {\n  /** Whether to reuse an existing async context if one exists. Defaults to false. */\n  reuseExisting?: boolean;\n}\n\n/**\n * @private Private API with no semver guarantees!\n *\n * Strategy used to track async context.\n */\nexport interface AsyncContextStrategy {\n  /**\n   * Gets the current async context. Returns undefined if there is no current async context.\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  getCurrentHub: () => Hub | undefined;\n  /**\n   * Runs the supplied callback in its own async context.\n   */\n  runWithAsyncContext<T>(callback: () => T, options: RunWithAsyncContextOptions): T;\n}\n\n/**\n * A layer in the process stack.\n * @hidden\n */\nexport interface Layer {\n  client?: Client;\n  scope: Scope;\n}\n\n/**\n * An object that contains a hub and maintains a scope stack.\n * @hidden\n */\nexport interface Carrier {\n  __SENTRY__?: {\n    // eslint-disable-next-line deprecation/deprecation\n    hub?: Hub;\n    acs?: AsyncContextStrategy;\n    /**\n     * Extra Hub properties injected by various SDKs\n     */\n    integrations?: Integration[];\n    extensions?: {\n      /** Extension methods for the hub, which are bound to the current Hub instance */\n      // eslint-disable-next-line @typescript-eslint/ban-types\n      [key: string]: Function;\n    };\n  };\n}\n\n/**\n * @deprecated The `Hub` class will be removed in version 8 of the SDK in favour of `Scope` and `Client` objects.\n *\n * If you previously used the `Hub` class directly, replace it with `Scope` and `Client` objects. More information:\n * - [Multiple Sentry Instances](https://docs.sentry.io/platforms/javascript/best-practices/multiple-sentry-instances/)\n * - [Browser Extensions](https://docs.sentry.io/platforms/javascript/best-practices/browser-extensions/)\n *\n * Some of our APIs are typed with the Hub class instead of the interface (e.g. `getCurrentHub`). Most of them are deprecated\n * themselves and will also be removed in version 8. More information:\n * - [Migration Guide](https://github.com/getsentry/sentry-javascript/blob/develop/MIGRATION.md#deprecate-hub)\n */\n// eslint-disable-next-line deprecation/deprecation\nexport class Hub implements HubInterface {\n  /** Is a {@link Layer}[] containing the client and scope */\n  private readonly _stack: Layer[];\n\n  /** Contains the last event id of a captured event.  */\n  private _lastEventId?: string;\n\n  private _isolationScope: Scope;\n\n  /**\n   * Creates a new instance of the hub, will push one {@link Layer} into the\n   * internal stack on creation.\n   *\n   * @param client bound to the hub.\n   * @param scope bound to the hub.\n   * @param version number, higher number means higher priority.\n   *\n   * @deprecated Instantiation of Hub objects is deprecated and the constructor will be removed in version 8 of the SDK.\n   *\n   * If you are currently using the Hub for multi-client use like so:\n   *\n   * ```\n   * // OLD\n   * const hub = new Hub();\n   * hub.bindClient(client);\n   * makeMain(hub)\n   * ```\n   *\n   * instead initialize the client as follows:\n   *\n   * ```\n   * // NEW\n   * Sentry.withIsolationScope(() => {\n   *    Sentry.setCurrentClient(client);\n   *    client.init();\n   * });\n   * ```\n   *\n   * If you are using the Hub to capture events like so:\n   *\n   * ```\n   * // OLD\n   * const client = new Client();\n   * const hub = new Hub(client);\n   * hub.captureException()\n   * ```\n   *\n   * instead capture isolated events as follows:\n   *\n   * ```\n   * // NEW\n   * const client = new Client();\n   * const scope = new Scope();\n   * scope.setClient(client);\n   * scope.captureException();\n   * ```\n   */\n  public constructor(\n    client?: Client,\n    scope?: Scope,\n    isolationScope?: Scope,\n    private readonly _version: number = API_VERSION,\n  ) {\n    let assignedScope;\n    if (!scope) {\n      assignedScope = new Scope();\n      assignedScope.setClient(client);\n    } else {\n      assignedScope = scope;\n    }\n\n    let assignedIsolationScope;\n    if (!isolationScope) {\n      assignedIsolationScope = new Scope();\n      assignedIsolationScope.setClient(client);\n    } else {\n      assignedIsolationScope = isolationScope;\n    }\n\n    this._stack = [{ scope: assignedScope }];\n\n    if (client) {\n      // eslint-disable-next-line deprecation/deprecation\n      this.bindClient(client);\n    }\n\n    this._isolationScope = assignedIsolationScope;\n  }\n\n  /**\n   * Checks if this hub's version is older than the given version.\n   *\n   * @param version A version number to compare to.\n   * @return True if the given version is newer; otherwise false.\n   *\n   * @deprecated This will be removed in v8.\n   */\n  public isOlderThan(version: number): boolean {\n    return this._version < version;\n  }\n\n  /**\n   * This binds the given client to the current scope.\n   * @param client An SDK client (client) instance.\n   *\n   * @deprecated Use `initAndBind()` directly, or `setCurrentClient()` and/or `client.init()` instead.\n   */\n  public bindClient(client?: Client): void {\n    // eslint-disable-next-line deprecation/deprecation\n    const top = this.getStackTop();\n    top.client = client;\n    top.scope.setClient(client);\n    // eslint-disable-next-line deprecation/deprecation\n    if (client && client.setupIntegrations) {\n      // eslint-disable-next-line deprecation/deprecation\n      client.setupIntegrations();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `withScope` instead.\n   */\n  public pushScope(): Scope {\n    // We want to clone the content of prev scope\n    // eslint-disable-next-line deprecation/deprecation\n    const scope = this.getScope().clone();\n    // eslint-disable-next-line deprecation/deprecation\n    this.getStack().push({\n      // eslint-disable-next-line deprecation/deprecation\n      client: this.getClient(),\n      scope,\n    });\n    return scope;\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `withScope` instead.\n   */\n  public popScope(): boolean {\n    // eslint-disable-next-line deprecation/deprecation\n    if (this.getStack().length <= 1) return false;\n    // eslint-disable-next-line deprecation/deprecation\n    return !!this.getStack().pop();\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `Sentry.withScope()` instead.\n   */\n  public withScope<T>(callback: (scope: Scope) => T): T {\n    // eslint-disable-next-line deprecation/deprecation\n    const scope = this.pushScope();\n\n    let maybePromiseResult: T;\n    try {\n      maybePromiseResult = callback(scope);\n    } catch (e) {\n      // eslint-disable-next-line deprecation/deprecation\n      this.popScope();\n      throw e;\n    }\n\n    if (isThenable(maybePromiseResult)) {\n      // @ts-expect-error - isThenable returns the wrong type\n      return maybePromiseResult.then(\n        res => {\n          // eslint-disable-next-line deprecation/deprecation\n          this.popScope();\n          return res;\n        },\n        e => {\n          // eslint-disable-next-line deprecation/deprecation\n          this.popScope();\n          throw e;\n        },\n      );\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    this.popScope();\n    return maybePromiseResult;\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `Sentry.getClient()` instead.\n   */\n  public getClient<C extends Client>(): C | undefined {\n    // eslint-disable-next-line deprecation/deprecation\n    return this.getStackTop().client as C;\n  }\n\n  /**\n   * Returns the scope of the top stack.\n   *\n   * @deprecated Use `Sentry.getCurrentScope()` instead.\n   */\n  public getScope(): Scope {\n    // eslint-disable-next-line deprecation/deprecation\n    return this.getStackTop().scope;\n  }\n\n  /**\n   * @deprecated Use `Sentry.getIsolationScope()` instead.\n   */\n  public getIsolationScope(): Scope {\n    return this._isolationScope;\n  }\n\n  /**\n   * Returns the scope stack for domains or the process.\n   * @deprecated This will be removed in v8.\n   */\n  public getStack(): Layer[] {\n    return this._stack;\n  }\n\n  /**\n   * Returns the topmost scope layer in the order domain > local > process.\n   * @deprecated This will be removed in v8.\n   */\n  public getStackTop(): Layer {\n    return this._stack[this._stack.length - 1];\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `Sentry.captureException()` instead.\n   */\n  public captureException(exception: unknown, hint?: EventHint): string {\n    const eventId = (this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4());\n    const syntheticException = new Error('Sentry syntheticException');\n    // eslint-disable-next-line deprecation/deprecation\n    this.getScope().captureException(exception, {\n      originalException: exception,\n      syntheticException,\n      ...hint,\n      event_id: eventId,\n    });\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use  `Sentry.captureMessage()` instead.\n   */\n  public captureMessage(\n    message: string,\n    // eslint-disable-next-line deprecation/deprecation\n    level?: Severity | SeverityLevel,\n    hint?: EventHint,\n  ): string {\n    const eventId = (this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4());\n    const syntheticException = new Error(message);\n    // eslint-disable-next-line deprecation/deprecation\n    this.getScope().captureMessage(message, level, {\n      originalException: message,\n      syntheticException,\n      ...hint,\n      event_id: eventId,\n    });\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `Sentry.captureEvent()` instead.\n   */\n  public captureEvent(event: Event, hint?: EventHint): string {\n    const eventId = hint && hint.event_id ? hint.event_id : uuid4();\n    if (!event.type) {\n      this._lastEventId = eventId;\n    }\n    // eslint-disable-next-line deprecation/deprecation\n    this.getScope().captureEvent(event, { ...hint, event_id: eventId });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated This will be removed in v8.\n   */\n  public lastEventId(): string | undefined {\n    return this._lastEventId;\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `Sentry.addBreadcrumb()` instead.\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, hint?: BreadcrumbHint): void {\n    // eslint-disable-next-line deprecation/deprecation\n    const { scope, client } = this.getStackTop();\n\n    if (!client) return;\n\n    const { beforeBreadcrumb = null, maxBreadcrumbs = DEFAULT_BREADCRUMBS } =\n      (client.getOptions && client.getOptions()) || {};\n\n    if (maxBreadcrumbs <= 0) return;\n\n    const timestamp = dateTimestampInSeconds();\n    const mergedBreadcrumb = { timestamp, ...breadcrumb };\n    const finalBreadcrumb = beforeBreadcrumb\n      ? (consoleSandbox(() => beforeBreadcrumb(mergedBreadcrumb, hint)) as Breadcrumb | null)\n      : mergedBreadcrumb;\n\n    if (finalBreadcrumb === null) return;\n\n    if (client.emit) {\n      client.emit('beforeAddBreadcrumb', finalBreadcrumb, hint);\n    }\n\n    // TODO(v8): I know this comment doesn't make much sense because the hub will be deprecated but I still wanted to\n    // write it down. In theory, we would have to add the breadcrumbs to the isolation scope here, however, that would\n    // duplicate all of the breadcrumbs. There was the possibility of adding breadcrumbs to both, the isolation scope\n    // and the normal scope, and deduplicating it down the line in the event processing pipeline. However, that would\n    // have been very fragile, because the breadcrumb objects would have needed to keep their identity all throughout\n    // the event processing pipeline.\n    // In the new implementation, the top level `Sentry.addBreadcrumb()` should ONLY write to the isolation scope.\n\n    scope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use `Sentry.setUser()` instead.\n   */\n  public setUser(user: User | null): void {\n    // TODO(v8): The top level `Sentry.setUser()` function should write ONLY to the isolation scope.\n    // eslint-disable-next-line deprecation/deprecation\n    this.getScope().setUser(user);\n    // eslint-disable-next-line deprecation/deprecation\n    this.getIsolationScope().setUser(user);\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use `Sentry.setTags()` instead.\n   */\n  public setTags(tags: { [key: string]: Primitive }): void {\n    // TODO(v8): The top level `Sentry.setTags()` function should write ONLY to the isolation scope.\n    // eslint-disable-next-line deprecation/deprecation\n    this.getScope().setTags(tags);\n    // eslint-disable-next-line deprecation/deprecation\n    this.getIsolationScope().setTags(tags);\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use `Sentry.setExtras()` instead.\n   */\n  public setExtras(extras: Extras): void {\n    // TODO(v8): The top level `Sentry.setExtras()` function should write ONLY to the isolation scope.\n    // eslint-disable-next-line deprecation/deprecation\n    this.getScope().setExtras(extras);\n    // eslint-disable-next-line deprecation/deprecation\n    this.getIsolationScope().setExtras(extras);\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use `Sentry.setTag()` instead.\n   */\n  public setTag(key: string, value: Primitive): void {\n    // TODO(v8): The top level `Sentry.setTag()` function should write ONLY to the isolation scope.\n    // eslint-disable-next-line deprecation/deprecation\n    this.getScope().setTag(key, value);\n    // eslint-disable-next-line deprecation/deprecation\n    this.getIsolationScope().setTag(key, value);\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use `Sentry.setExtra()` instead.\n   */\n  public setExtra(key: string, extra: Extra): void {\n    // TODO(v8): The top level `Sentry.setExtra()` function should write ONLY to the isolation scope.\n    // eslint-disable-next-line deprecation/deprecation\n    this.getScope().setExtra(key, extra);\n    // eslint-disable-next-line deprecation/deprecation\n    this.getIsolationScope().setExtra(key, extra);\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use `Sentry.setContext()` instead.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public setContext(name: string, context: { [key: string]: any } | null): void {\n    // TODO(v8): The top level `Sentry.setContext()` function should write ONLY to the isolation scope.\n    // eslint-disable-next-line deprecation/deprecation\n    this.getScope().setContext(name, context);\n    // eslint-disable-next-line deprecation/deprecation\n    this.getIsolationScope().setContext(name, context);\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `getScope()` directly.\n   */\n  public configureScope(callback: (scope: Scope) => void): void {\n    // eslint-disable-next-line deprecation/deprecation\n    const { scope, client } = this.getStackTop();\n    if (client) {\n      callback(scope);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  public run(callback: (hub: Hub) => void): void {\n    // eslint-disable-next-line deprecation/deprecation\n    const oldHub = makeMain(this);\n    try {\n      callback(this);\n    } finally {\n      // eslint-disable-next-line deprecation/deprecation\n      makeMain(oldHub);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use `Sentry.getClient().getIntegrationByName()` instead.\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    // eslint-disable-next-line deprecation/deprecation\n    const client = this.getClient();\n    if (!client) return null;\n    try {\n      // eslint-disable-next-line deprecation/deprecation\n      return client.getIntegration(integration);\n    } catch (_oO) {\n      DEBUG_BUILD && logger.warn(`Cannot retrieve integration ${integration.id} from the current Hub`);\n      return null;\n    }\n  }\n\n  /**\n   * Starts a new `Transaction` and returns it. This is the entry point to manual tracing instrumentation.\n   *\n   * A tree structure can be built by adding child spans to the transaction, and child spans to other spans. To start a\n   * new child span within the transaction or any span, call the respective `.startChild()` method.\n   *\n   * Every child span must be finished before the transaction is finished, otherwise the unfinished spans are discarded.\n   *\n   * The transaction must be finished with a call to its `.end()` method, at which point the transaction with all its\n   * finished child spans will be sent to Sentry.\n   *\n   * @param context Properties of the new `Transaction`.\n   * @param customSamplingContext Information given to the transaction sampling function (along with context-dependent\n   * default values). See {@link Options.tracesSampler}.\n   *\n   * @returns The transaction which was just started\n   *\n   * @deprecated Use `startSpan()`, `startSpanManual()` or `startInactiveSpan()` instead.\n   */\n  public startTransaction(context: TransactionContext, customSamplingContext?: CustomSamplingContext): Transaction {\n    const result = this._callExtensionMethod<Transaction>('startTransaction', context, customSamplingContext);\n\n    if (DEBUG_BUILD && !result) {\n      // eslint-disable-next-line deprecation/deprecation\n      const client = this.getClient();\n      if (!client) {\n        logger.warn(\n          \"Tracing extension 'startTransaction' is missing. You should 'init' the SDK before calling 'startTransaction'\",\n        );\n      } else {\n        logger.warn(`Tracing extension 'startTransaction' has not been added. Call 'addTracingExtensions' before calling 'init':\nSentry.addTracingExtensions();\nSentry.init({...});\n`);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use `spanToTraceHeader()` instead.\n   */\n  public traceHeaders(): { [key: string]: string } {\n    return this._callExtensionMethod<{ [key: string]: string }>('traceHeaders');\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use top level `captureSession` instead.\n   */\n  public captureSession(endSession: boolean = false): void {\n    // both send the update and pull the session from the scope\n    if (endSession) {\n      // eslint-disable-next-line deprecation/deprecation\n      return this.endSession();\n    }\n\n    // only send the update\n    this._sendSessionUpdate();\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use top level `endSession` instead.\n   */\n  public endSession(): void {\n    // eslint-disable-next-line deprecation/deprecation\n    const layer = this.getStackTop();\n    const scope = layer.scope;\n    const session = scope.getSession();\n    if (session) {\n      closeSession(session);\n    }\n    this._sendSessionUpdate();\n\n    // the session is over; take it off of the scope\n    scope.setSession();\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use top level `startSession` instead.\n   */\n  public startSession(context?: SessionContext): Session {\n    // eslint-disable-next-line deprecation/deprecation\n    const { scope, client } = this.getStackTop();\n    const { release, environment = DEFAULT_ENVIRONMENT } = (client && client.getOptions()) || {};\n\n    // Will fetch userAgent if called from browser sdk\n    const { userAgent } = GLOBAL_OBJ.navigator || {};\n\n    const session = makeSession({\n      release,\n      environment,\n      user: scope.getUser(),\n      ...(userAgent && { userAgent }),\n      ...context,\n    });\n\n    // End existing session if there's one\n    const currentSession = scope.getSession && scope.getSession();\n    if (currentSession && currentSession.status === 'ok') {\n      updateSession(currentSession, { status: 'exited' });\n    }\n    // eslint-disable-next-line deprecation/deprecation\n    this.endSession();\n\n    // Afterwards we set the new session on the scope\n    scope.setSession(session);\n\n    return session;\n  }\n\n  /**\n   * Returns if default PII should be sent to Sentry and propagated in ourgoing requests\n   * when Tracing is used.\n   *\n   * @deprecated Use top-level `getClient().getOptions().sendDefaultPii` instead. This function\n   * only unnecessarily increased API surface but only wrapped accessing the option.\n   */\n  public shouldSendDefaultPii(): boolean {\n    // eslint-disable-next-line deprecation/deprecation\n    const client = this.getClient();\n    const options = client && client.getOptions();\n    return Boolean(options && options.sendDefaultPii);\n  }\n\n  /**\n   * Sends the current Session on the scope\n   */\n  private _sendSessionUpdate(): void {\n    // eslint-disable-next-line deprecation/deprecation\n    const { scope, client } = this.getStackTop();\n\n    const session = scope.getSession();\n    if (session && client && client.captureSession) {\n      client.captureSession(session);\n    }\n  }\n\n  /**\n   * Calls global extension method and binding current instance to the function call\n   */\n  // @ts-expect-error Function lacks ending return statement and return type does not include 'undefined'. ts(2366)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _callExtensionMethod<T>(method: string, ...args: any[]): T {\n    const carrier = getMainCarrier();\n    const sentry = carrier.__SENTRY__;\n    if (sentry && sentry.extensions && typeof sentry.extensions[method] === 'function') {\n      return sentry.extensions[method].apply(this, args);\n    }\n    DEBUG_BUILD && logger.warn(`Extension method ${method} couldn't be found, doing nothing.`);\n  }\n}\n\n/**\n * Returns the global shim registry.\n *\n * FIXME: This function is problematic, because despite always returning a valid Carrier,\n * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check\n * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.\n **/\nexport function getMainCarrier(): Carrier {\n  GLOBAL_OBJ.__SENTRY__ = GLOBAL_OBJ.__SENTRY__ || {\n    extensions: {},\n    hub: undefined,\n  };\n  return GLOBAL_OBJ;\n}\n\n/**\n * Replaces the current main hub with the passed one on the global object\n *\n * @returns The old replaced hub\n *\n * @deprecated Use `setCurrentClient()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport function makeMain(hub: Hub): Hub {\n  const registry = getMainCarrier();\n  const oldHub = getHubFromCarrier(registry);\n  setHubOnCarrier(registry, hub);\n  return oldHub;\n}\n\n/**\n * Returns the default hub instance.\n *\n * If a hub is already registered in the global carrier but this module\n * contains a more recent version, it replaces the registered version.\n * Otherwise, the currently registered hub will be returned.\n *\n * @deprecated Use the respective replacement method directly instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport function getCurrentHub(): Hub {\n  // Get main carrier (global for every environment)\n  const registry = getMainCarrier();\n\n  if (registry.__SENTRY__ && registry.__SENTRY__.acs) {\n    const hub = registry.__SENTRY__.acs.getCurrentHub();\n\n    if (hub) {\n      return hub;\n    }\n  }\n\n  // Return hub that lives on a global object\n  return getGlobalHub(registry);\n}\n\n/**\n * Get the currently active isolation scope.\n * The isolation scope is active for the current exection context,\n * meaning that it will remain stable for the same Hub.\n */\nexport function getIsolationScope(): Scope {\n  // eslint-disable-next-line deprecation/deprecation\n  return getCurrentHub().getIsolationScope();\n}\n\n// eslint-disable-next-line deprecation/deprecation\nfunction getGlobalHub(registry: Carrier = getMainCarrier()): Hub {\n  // If there's no hub, or its an old API, assign a new one\n\n  if (\n    !hasHubOnCarrier(registry) ||\n    // eslint-disable-next-line deprecation/deprecation\n    getHubFromCarrier(registry).isOlderThan(API_VERSION)\n  ) {\n    // eslint-disable-next-line deprecation/deprecation\n    setHubOnCarrier(registry, new Hub());\n  }\n\n  // Return hub that lives on a global object\n  return getHubFromCarrier(registry);\n}\n\n/**\n * @private Private API with no semver guarantees!\n *\n * If the carrier does not contain a hub, a new hub is created with the global hub client and scope.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport function ensureHubOnCarrier(carrier: Carrier, parent: Hub = getGlobalHub()): void {\n  // If there's no hub on current domain, or it's an old API, assign a new one\n  if (\n    !hasHubOnCarrier(carrier) ||\n    // eslint-disable-next-line deprecation/deprecation\n    getHubFromCarrier(carrier).isOlderThan(API_VERSION)\n  ) {\n    // eslint-disable-next-line deprecation/deprecation\n    const client = parent.getClient();\n    // eslint-disable-next-line deprecation/deprecation\n    const scope = parent.getScope();\n    // eslint-disable-next-line deprecation/deprecation\n    const isolationScope = parent.getIsolationScope();\n    // eslint-disable-next-line deprecation/deprecation\n    setHubOnCarrier(carrier, new Hub(client, scope.clone(), isolationScope.clone()));\n  }\n}\n\n/**\n * @private Private API with no semver guarantees!\n *\n * Sets the global async context strategy\n */\nexport function setAsyncContextStrategy(strategy: AsyncContextStrategy | undefined): void {\n  // Get main carrier (global for every environment)\n  const registry = getMainCarrier();\n  registry.__SENTRY__ = registry.__SENTRY__ || {};\n  registry.__SENTRY__.acs = strategy;\n}\n\n/**\n * Runs the supplied callback in its own async context. Async Context strategies are defined per SDK.\n *\n * @param callback The callback to run in its own async context\n * @param options Options to pass to the async context strategy\n * @returns The result of the callback\n */\nexport function runWithAsyncContext<T>(callback: () => T, options: RunWithAsyncContextOptions = {}): T {\n  const registry = getMainCarrier();\n\n  if (registry.__SENTRY__ && registry.__SENTRY__.acs) {\n    return registry.__SENTRY__.acs.runWithAsyncContext(callback, options);\n  }\n\n  // if there was no strategy, fallback to just calling the callback\n  return callback();\n}\n\n/**\n * This will tell whether a carrier has a hub on it or not\n * @param carrier object\n */\nfunction hasHubOnCarrier(carrier: Carrier): boolean {\n  return !!(carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub);\n}\n\n/**\n * This will create a new {@link Hub} and add to the passed object on\n * __SENTRY__.hub.\n * @param carrier object\n * @hidden\n */\n// eslint-disable-next-line deprecation/deprecation\nexport function getHubFromCarrier(carrier: Carrier): Hub {\n  // eslint-disable-next-line deprecation/deprecation\n  return getGlobalSingleton<Hub>('hub', () => new Hub(), carrier);\n}\n\n/**\n * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute\n * @param carrier object\n * @param hub Hub\n * @returns A boolean indicating success or failure\n */\n// eslint-disable-next-line deprecation/deprecation\nexport function setHubOnCarrier(carrier: Carrier, hub: Hub): boolean {\n  if (!carrier) return false;\n  const __SENTRY__ = (carrier.__SENTRY__ = carrier.__SENTRY__ || {});\n  __SENTRY__.hub = hub;\n  return true;\n}\n","import type {\n  Client,\n  Event,\n  EventHint,\n  Integration,\n  IntegrationClass,\n  IntegrationFn,\n  IntegrationFnResult,\n  Options,\n} from '@sentry/types';\nimport { arrayify, logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from './debug-build';\nimport { addGlobalEventProcessor } from './eventProcessors';\nimport { getClient } from './exports';\nimport { getCurrentHub } from './hub';\n\ndeclare module '@sentry/types' {\n  interface Integration {\n    isDefaultInstance?: boolean;\n  }\n}\n\nexport const installedIntegrations: string[] = [];\n\n/** Map of integrations assigned to a client */\nexport type IntegrationIndex = {\n  [key: string]: Integration;\n};\n\n/**\n * Remove duplicates from the given array, preferring the last instance of any duplicate. Not guaranteed to\n * preseve the order of integrations in the array.\n *\n * @private\n */\nfunction filterDuplicates(integrations: Integration[]): Integration[] {\n  const integrationsByName: { [key: string]: Integration } = {};\n\n  integrations.forEach(currentInstance => {\n    const { name } = currentInstance;\n\n    const existingInstance = integrationsByName[name];\n\n    // We want integrations later in the array to overwrite earlier ones of the same type, except that we never want a\n    // default instance to overwrite an existing user instance\n    if (existingInstance && !existingInstance.isDefaultInstance && currentInstance.isDefaultInstance) {\n      return;\n    }\n\n    integrationsByName[name] = currentInstance;\n  });\n\n  return Object.keys(integrationsByName).map(k => integrationsByName[k]);\n}\n\n/** Gets integrations to install */\nexport function getIntegrationsToSetup(options: Pick<Options, 'defaultIntegrations' | 'integrations'>): Integration[] {\n  const defaultIntegrations = options.defaultIntegrations || [];\n  const userIntegrations = options.integrations;\n\n  // We flag default instances, so that later we can tell them apart from any user-created instances of the same class\n  defaultIntegrations.forEach(integration => {\n    integration.isDefaultInstance = true;\n  });\n\n  let integrations: Integration[];\n\n  if (Array.isArray(userIntegrations)) {\n    integrations = [...defaultIntegrations, ...userIntegrations];\n  } else if (typeof userIntegrations === 'function') {\n    integrations = arrayify(userIntegrations(defaultIntegrations));\n  } else {\n    integrations = defaultIntegrations;\n  }\n\n  const finalIntegrations = filterDuplicates(integrations);\n\n  // The `Debug` integration prints copies of the `event` and `hint` which will be passed to `beforeSend` or\n  // `beforeSendTransaction`. It therefore has to run after all other integrations, so that the changes of all event\n  // processors will be reflected in the printed values. For lack of a more elegant way to guarantee that, we therefore\n  // locate it and, assuming it exists, pop it out of its current spot and shove it onto the end of the array.\n  const debugIndex = findIndex(finalIntegrations, integration => integration.name === 'Debug');\n  if (debugIndex !== -1) {\n    const [debugInstance] = finalIntegrations.splice(debugIndex, 1);\n    finalIntegrations.push(debugInstance);\n  }\n\n  return finalIntegrations;\n}\n\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */\nexport function setupIntegrations(client: Client, integrations: Integration[]): IntegrationIndex {\n  const integrationIndex: IntegrationIndex = {};\n\n  integrations.forEach(integration => {\n    // guard against empty provided integrations\n    if (integration) {\n      setupIntegration(client, integration, integrationIndex);\n    }\n  });\n\n  return integrationIndex;\n}\n\n/**\n * Execute the `afterAllSetup` hooks of the given integrations.\n */\nexport function afterSetupIntegrations(client: Client, integrations: Integration[]): void {\n  for (const integration of integrations) {\n    // guard against empty provided integrations\n    if (integration && integration.afterAllSetup) {\n      integration.afterAllSetup(client);\n    }\n  }\n}\n\n/** Setup a single integration.  */\nexport function setupIntegration(client: Client, integration: Integration, integrationIndex: IntegrationIndex): void {\n  if (integrationIndex[integration.name]) {\n    DEBUG_BUILD && logger.log(`Integration skipped because it was already installed: ${integration.name}`);\n    return;\n  }\n  integrationIndex[integration.name] = integration;\n\n  // `setupOnce` is only called the first time\n  if (installedIntegrations.indexOf(integration.name) === -1) {\n    // eslint-disable-next-line deprecation/deprecation\n    integration.setupOnce(addGlobalEventProcessor, getCurrentHub);\n    installedIntegrations.push(integration.name);\n  }\n\n  // `setup` is run for each client\n  if (integration.setup && typeof integration.setup === 'function') {\n    integration.setup(client);\n  }\n\n  if (client.on && typeof integration.preprocessEvent === 'function') {\n    const callback = integration.preprocessEvent.bind(integration) as typeof integration.preprocessEvent;\n    client.on('preprocessEvent', (event, hint) => callback(event, hint, client));\n  }\n\n  if (client.addEventProcessor && typeof integration.processEvent === 'function') {\n    const callback = integration.processEvent.bind(integration) as typeof integration.processEvent;\n\n    const processor = Object.assign((event: Event, hint: EventHint) => callback(event, hint, client), {\n      id: integration.name,\n    });\n\n    client.addEventProcessor(processor);\n  }\n\n  DEBUG_BUILD && logger.log(`Integration installed: ${integration.name}`);\n}\n\n/** Add an integration to the current hub's client. */\nexport function addIntegration(integration: Integration): void {\n  const client = getClient();\n\n  if (!client || !client.addIntegration) {\n    DEBUG_BUILD && logger.warn(`Cannot add integration \"${integration.name}\" because no SDK Client is available.`);\n    return;\n  }\n\n  client.addIntegration(integration);\n}\n\n// Polyfill for Array.findIndex(), which is not supported in ES5\nfunction findIndex<T>(arr: T[], callback: (item: T) => boolean): number {\n  for (let i = 0; i < arr.length; i++) {\n    if (callback(arr[i]) === true) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n/**\n * Convert a new integration function to the legacy class syntax.\n * In v8, we can remove this and instead export the integration functions directly.\n *\n * @deprecated This will be removed in v8!\n */\nexport function convertIntegrationFnToClass<Fn extends IntegrationFn>(\n  name: string,\n  fn: Fn,\n): IntegrationClass<Integration> {\n  return Object.assign(\n    function ConvertedIntegration(...args: Parameters<Fn>): Integration {\n      return fn(...args);\n    },\n    { id: name },\n  ) as unknown as IntegrationClass<Integration>;\n}\n\n/**\n * Define an integration function that can be used to create an integration instance.\n * Note that this by design hides the implementation details of the integration, as they are considered internal.\n */\nexport function defineIntegration<Fn extends IntegrationFn>(fn: Fn): (...args: Parameters<Fn>) => IntegrationFnResult {\n  return fn;\n}\n","import type { Client, Event, EventHint, Integration, IntegrationClass, IntegrationFn, StackFrame } from '@sentry/types';\nimport { getEventDescription, logger, stringMatchesSomePattern } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../debug-build';\nimport { convertIntegrationFnToClass, defineIntegration } from '../integration';\n\n// \"Script error.\" is hard coded into browsers for errors that it can't read.\n// this is the result of a script being pulled in from an external domain and CORS.\nconst DEFAULT_IGNORE_ERRORS = [\n  /^Script error\\.?$/,\n  /^Javascript error: Script error\\.? on line 0$/,\n  /^ResizeObserver loop completed with undelivered notifications.$/,\n  /^Cannot redefine property: googletag$/,\n];\n\nconst DEFAULT_IGNORE_TRANSACTIONS = [\n  /^.*\\/healthcheck$/,\n  /^.*\\/healthy$/,\n  /^.*\\/live$/,\n  /^.*\\/ready$/,\n  /^.*\\/heartbeat$/,\n  /^.*\\/health$/,\n  /^.*\\/healthz$/,\n];\n\n/** Options for the InboundFilters integration */\nexport interface InboundFiltersOptions {\n  allowUrls: Array<string | RegExp>;\n  denyUrls: Array<string | RegExp>;\n  ignoreErrors: Array<string | RegExp>;\n  ignoreTransactions: Array<string | RegExp>;\n  ignoreInternal: boolean;\n  disableErrorDefaults: boolean;\n  disableTransactionDefaults: boolean;\n}\n\nconst INTEGRATION_NAME = 'InboundFilters';\nconst _inboundFiltersIntegration = ((options: Partial<InboundFiltersOptions> = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    processEvent(event, _hint, client) {\n      const clientOptions = client.getOptions();\n      const mergedOptions = _mergeOptions(options, clientOptions);\n      return _shouldDropEvent(event, mergedOptions) ? null : event;\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const inboundFiltersIntegration = defineIntegration(_inboundFiltersIntegration);\n\n/**\n * Inbound filters configurable by the user.\n * @deprecated Use `inboundFiltersIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport const InboundFilters = convertIntegrationFnToClass(\n  INTEGRATION_NAME,\n  inboundFiltersIntegration,\n) as IntegrationClass<Integration & { preprocessEvent: (event: Event, hint: EventHint, client: Client) => void }> & {\n  new (\n    options?: Partial<{\n      allowUrls: Array<string | RegExp>;\n      denyUrls: Array<string | RegExp>;\n      ignoreErrors: Array<string | RegExp>;\n      ignoreTransactions: Array<string | RegExp>;\n      ignoreInternal: boolean;\n      disableErrorDefaults: boolean;\n      disableTransactionDefaults: boolean;\n    }>,\n  ): Integration;\n};\n\nfunction _mergeOptions(\n  internalOptions: Partial<InboundFiltersOptions> = {},\n  clientOptions: Partial<InboundFiltersOptions> = {},\n): Partial<InboundFiltersOptions> {\n  return {\n    allowUrls: [...(internalOptions.allowUrls || []), ...(clientOptions.allowUrls || [])],\n    denyUrls: [...(internalOptions.denyUrls || []), ...(clientOptions.denyUrls || [])],\n    ignoreErrors: [\n      ...(internalOptions.ignoreErrors || []),\n      ...(clientOptions.ignoreErrors || []),\n      ...(internalOptions.disableErrorDefaults ? [] : DEFAULT_IGNORE_ERRORS),\n    ],\n    ignoreTransactions: [\n      ...(internalOptions.ignoreTransactions || []),\n      ...(clientOptions.ignoreTransactions || []),\n      ...(internalOptions.disableTransactionDefaults ? [] : DEFAULT_IGNORE_TRANSACTIONS),\n    ],\n    ignoreInternal: internalOptions.ignoreInternal !== undefined ? internalOptions.ignoreInternal : true,\n  };\n}\n\nfunction _shouldDropEvent(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n  if (options.ignoreInternal && _isSentryError(event)) {\n    DEBUG_BUILD &&\n      logger.warn(`Event dropped due to being internal Sentry Error.\\nEvent: ${getEventDescription(event)}`);\n    return true;\n  }\n  if (_isIgnoredError(event, options.ignoreErrors)) {\n    DEBUG_BUILD &&\n      logger.warn(\n        `Event dropped due to being matched by \\`ignoreErrors\\` option.\\nEvent: ${getEventDescription(event)}`,\n      );\n    return true;\n  }\n  if (_isIgnoredTransaction(event, options.ignoreTransactions)) {\n    DEBUG_BUILD &&\n      logger.warn(\n        `Event dropped due to being matched by \\`ignoreTransactions\\` option.\\nEvent: ${getEventDescription(event)}`,\n      );\n    return true;\n  }\n  if (_isDeniedUrl(event, options.denyUrls)) {\n    DEBUG_BUILD &&\n      logger.warn(\n        `Event dropped due to being matched by \\`denyUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${_getEventFilterUrl(event)}`,\n      );\n    return true;\n  }\n  if (!_isAllowedUrl(event, options.allowUrls)) {\n    DEBUG_BUILD &&\n      logger.warn(\n        `Event dropped due to not being matched by \\`allowUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${_getEventFilterUrl(event)}`,\n      );\n    return true;\n  }\n  return false;\n}\n\nfunction _isIgnoredError(event: Event, ignoreErrors?: Array<string | RegExp>): boolean {\n  // If event.type, this is not an error\n  if (event.type || !ignoreErrors || !ignoreErrors.length) {\n    return false;\n  }\n\n  return _getPossibleEventMessages(event).some(message => stringMatchesSomePattern(message, ignoreErrors));\n}\n\nfunction _isIgnoredTransaction(event: Event, ignoreTransactions?: Array<string | RegExp>): boolean {\n  if (event.type !== 'transaction' || !ignoreTransactions || !ignoreTransactions.length) {\n    return false;\n  }\n\n  const name = event.transaction;\n  return name ? stringMatchesSomePattern(name, ignoreTransactions) : false;\n}\n\nfunction _isDeniedUrl(event: Event, denyUrls?: Array<string | RegExp>): boolean {\n  // TODO: Use Glob instead?\n  if (!denyUrls || !denyUrls.length) {\n    return false;\n  }\n  const url = _getEventFilterUrl(event);\n  return !url ? false : stringMatchesSomePattern(url, denyUrls);\n}\n\nfunction _isAllowedUrl(event: Event, allowUrls?: Array<string | RegExp>): boolean {\n  // TODO: Use Glob instead?\n  if (!allowUrls || !allowUrls.length) {\n    return true;\n  }\n  const url = _getEventFilterUrl(event);\n  return !url ? true : stringMatchesSomePattern(url, allowUrls);\n}\n\nfunction _getPossibleEventMessages(event: Event): string[] {\n  const possibleMessages: string[] = [];\n\n  if (event.message) {\n    possibleMessages.push(event.message);\n  }\n\n  let lastException;\n  try {\n    // @ts-expect-error Try catching to save bundle size\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    lastException = event.exception.values[event.exception.values.length - 1];\n  } catch (e) {\n    // try catching to save bundle size checking existence of variables\n  }\n\n  if (lastException) {\n    if (lastException.value) {\n      possibleMessages.push(lastException.value);\n      if (lastException.type) {\n        possibleMessages.push(`${lastException.type}: ${lastException.value}`);\n      }\n    }\n  }\n\n  if (DEBUG_BUILD && possibleMessages.length === 0) {\n    logger.error(`Could not extract message for event ${getEventDescription(event)}`);\n  }\n\n  return possibleMessages;\n}\n\nfunction _isSentryError(event: Event): boolean {\n  try {\n    // @ts-expect-error can't be a sentry error if undefined\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    return event.exception.values[0].type === 'SentryError';\n  } catch (e) {\n    // ignore\n  }\n  return false;\n}\n\nfunction _getLastValidUrl(frames: StackFrame[] = []): string | null {\n  for (let i = frames.length - 1; i >= 0; i--) {\n    const frame = frames[i];\n\n    if (frame && frame.filename !== '<anonymous>' && frame.filename !== '[native code]') {\n      return frame.filename || null;\n    }\n  }\n\n  return null;\n}\n\nfunction _getEventFilterUrl(event: Event): string | null {\n  try {\n    let frames;\n    try {\n      // @ts-expect-error we only care about frames if the whole thing here is defined\n      frames = event.exception.values[0].stacktrace.frames;\n    } catch (e) {\n      // ignore\n    }\n    return frames ? _getLastValidUrl(frames) : null;\n  } catch (oO) {\n    DEBUG_BUILD && logger.error(`Cannot extract url for event ${getEventDescription(event)}`);\n    return null;\n  }\n}\n","import type { Client, Integration, IntegrationClass, IntegrationFn, WrappedFunction } from '@sentry/types';\nimport { getOriginalFunction } from '@sentry/utils';\nimport { getClient } from '../exports';\nimport { convertIntegrationFnToClass, defineIntegration } from '../integration';\n\nlet originalFunctionToString: () => void;\n\nconst INTEGRATION_NAME = 'FunctionToString';\n\nconst SETUP_CLIENTS = new WeakMap<Client, boolean>();\n\nconst _functionToStringIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      originalFunctionToString = Function.prototype.toString;\n\n      // intrinsics (like Function.prototype) might be immutable in some environments\n      // e.g. Node with --frozen-intrinsics, XS (an embedded JavaScript engine) or SES (a JavaScript proposal)\n      try {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Function.prototype.toString = function (this: WrappedFunction, ...args: any[]): string {\n          const originalFunction = getOriginalFunction(this);\n          const context =\n            SETUP_CLIENTS.has(getClient() as Client) && originalFunction !== undefined ? originalFunction : this;\n          return originalFunctionToString.apply(context, args);\n        };\n      } catch {\n        // ignore errors here, just don't patch this\n      }\n    },\n    setup(client) {\n      SETUP_CLIENTS.set(client, true);\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Patch toString calls to return proper name for wrapped functions.\n *\n * ```js\n * Sentry.init({\n *   integrations: [\n *     functionToStringIntegration(),\n *   ],\n * });\n * ```\n */\nexport const functionToStringIntegration = defineIntegration(_functionToStringIntegration);\n\n/**\n * Patch toString calls to return proper name for wrapped functions.\n *\n * @deprecated Use `functionToStringIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport const FunctionToString = convertIntegrationFnToClass(\n  INTEGRATION_NAME,\n  functionToStringIntegration,\n) as IntegrationClass<Integration & { setupOnce: () => void }>;\n\n// eslint-disable-next-line deprecation/deprecation\nexport type FunctionToString = typeof FunctionToString;\n","import type { browserTracingIntegration } from '@sentry-internal/tracing';\nimport { BrowserTracing } from '@sentry-internal/tracing';\nimport { captureException, withScope } from '@sentry/core';\nimport type { DsnLike, Integration, Mechanism, WrappedFunction } from '@sentry/types';\nimport {\n  GLOBAL_OBJ,\n  addExceptionMechanism,\n  addExceptionTypeValue,\n  addNonEnumerableProperty,\n  getOriginalFunction,\n  markFunctionWrapped,\n} from '@sentry/utils';\n\nexport const WINDOW = GLOBAL_OBJ as typeof GLOBAL_OBJ & Window;\n\nlet ignoreOnError: number = 0;\n\n/**\n * @hidden\n */\nexport function shouldIgnoreOnError(): boolean {\n  return ignoreOnError > 0;\n}\n\n/**\n * @hidden\n */\nexport function ignoreNextOnError(): void {\n  // onerror should trigger before setTimeout\n  ignoreOnError++;\n  setTimeout(() => {\n    ignoreOnError--;\n  });\n}\n\n/**\n * Instruments the given function and sends an event to Sentry every time the\n * function throws an exception.\n *\n * @param fn A function to wrap. It is generally safe to pass an unbound function, because the returned wrapper always\n * has a correct `this` context.\n * @returns The wrapped function.\n * @hidden\n */\nexport function wrap(\n  fn: WrappedFunction,\n  options: {\n    mechanism?: Mechanism;\n  } = {},\n  before?: WrappedFunction,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n): any {\n  // for future readers what this does is wrap a function and then create\n  // a bi-directional wrapping between them.\n  //\n  // example: wrapped = wrap(original);\n  //  original.__sentry_wrapped__ -> wrapped\n  //  wrapped.__sentry_original__ -> original\n\n  if (typeof fn !== 'function') {\n    return fn;\n  }\n\n  try {\n    // if we're dealing with a function that was previously wrapped, return\n    // the original wrapper.\n    const wrapper = fn.__sentry_wrapped__;\n    if (wrapper) {\n      if (typeof wrapper === 'function') {\n        return wrapper;\n      } else {\n        // If we find that the `__sentry_wrapped__` function is not a function at the time of accessing it, it means\n        // that something messed with it. In that case we want to return the originally passed function.\n        return fn;\n      }\n    }\n\n    // We don't wanna wrap it twice\n    if (getOriginalFunction(fn)) {\n      return fn;\n    }\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    // Bail on wrapping and return the function as-is (defers to window.onerror).\n    return fn;\n  }\n\n  /* eslint-disable prefer-rest-params */\n  // It is important that `sentryWrapped` is not an arrow function to preserve the context of `this`\n  const sentryWrapped: WrappedFunction = function (this: unknown): void {\n    const args = Array.prototype.slice.call(arguments);\n\n    try {\n      if (before && typeof before === 'function') {\n        before.apply(this, arguments);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n      const wrappedArguments = args.map((arg: any) => wrap(arg, options));\n\n      // Attempt to invoke user-land function\n      // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n      //       means the sentry.javascript SDK caught an error invoking your application code. This\n      //       is expected behavior and NOT indicative of a bug with sentry.javascript.\n      return fn.apply(this, wrappedArguments);\n    } catch (ex) {\n      ignoreNextOnError();\n\n      withScope(scope => {\n        scope.addEventProcessor(event => {\n          if (options.mechanism) {\n            addExceptionTypeValue(event, undefined, undefined);\n            addExceptionMechanism(event, options.mechanism);\n          }\n\n          event.extra = {\n            ...event.extra,\n            arguments: args,\n          };\n\n          return event;\n        });\n\n        captureException(ex);\n      });\n\n      throw ex;\n    }\n  };\n  /* eslint-enable prefer-rest-params */\n\n  // Accessing some objects may throw\n  // ref: https://github.com/getsentry/sentry-javascript/issues/1168\n  try {\n    for (const property in fn) {\n      if (Object.prototype.hasOwnProperty.call(fn, property)) {\n        sentryWrapped[property] = fn[property];\n      }\n    }\n  } catch (_oO) {} // eslint-disable-line no-empty\n\n  // Signal that this function has been wrapped/filled already\n  // for both debugging and to prevent it to being wrapped/filled twice\n  markFunctionWrapped(sentryWrapped, fn);\n\n  addNonEnumerableProperty(fn, '__sentry_wrapped__', sentryWrapped);\n\n  // Restore original function name (not all browsers allow that)\n  try {\n    const descriptor = Object.getOwnPropertyDescriptor(sentryWrapped, 'name') as PropertyDescriptor;\n    if (descriptor.configurable) {\n      Object.defineProperty(sentryWrapped, 'name', {\n        get(): string {\n          return fn.name;\n        },\n      });\n    }\n    // eslint-disable-next-line no-empty\n  } catch (_oO) {}\n\n  return sentryWrapped;\n}\n\n/**\n * All properties the report dialog supports\n *\n * @deprecated This type will be removed in the next major version of the Sentry SDK. `showReportDialog` will still be around, however the `eventId` option will now be required.\n */\nexport interface ReportDialogOptions {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any;\n  eventId?: string;\n  dsn?: DsnLike;\n  user?: {\n    email?: string;\n    name?: string;\n  };\n  lang?: string;\n  title?: string;\n  subtitle?: string;\n  subtitle2?: string;\n  labelName?: string;\n  labelEmail?: string;\n  labelComments?: string;\n  labelClose?: string;\n  labelSubmit?: string;\n  errorGeneric?: string;\n  errorFormEntry?: string;\n  successMessage?: string;\n  /** Callback after reportDialog showed up */\n  onLoad?(this: void): void;\n  /** Callback after reportDialog closed */\n  onClose?(this: void): void;\n}\n\n/**\n * This is a slim shim of `browserTracingIntegration` for the CDN bundles.\n * Since the actual functional integration uses a different code from `BrowserTracing`,\n * we want to avoid shipping both of them in the CDN bundles, as that would blow up the size.\n * Instead, we provide a functional integration with the same API, but the old implementation.\n * This means that it's not possible to register custom routing instrumentation, but that's OK for now.\n * We also don't expose the utilities for this anyhow in the CDN bundles.\n * For users that need custom routing in CDN bundles, they have to continue using `new BrowserTracing()` until v8.\n */\nexport function bundleBrowserTracingIntegration(\n  options: Parameters<typeof browserTracingIntegration>[0] = {},\n): Integration {\n  // Migrate some options from the old integration to the new one\n  // eslint-disable-next-line deprecation/deprecation\n  const opts: ConstructorParameters<typeof BrowserTracing>[0] = options;\n\n  if (typeof options.markBackgroundSpan === 'boolean') {\n    opts.markBackgroundTransactions = options.markBackgroundSpan;\n  }\n\n  if (typeof options.instrumentPageLoad === 'boolean') {\n    opts.startTransactionOnPageLoad = options.instrumentPageLoad;\n  }\n\n  if (typeof options.instrumentNavigation === 'boolean') {\n    opts.startTransactionOnLocationChange = options.instrumentNavigation;\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  return new BrowserTracing(opts);\n}\n","import { convertIntegrationFnToClass, defineIntegration } from '@sentry/core';\nimport type { Integration, IntegrationClass, IntegrationFn, WrappedFunction } from '@sentry/types';\nimport { fill, getFunctionName, getOriginalFunction } from '@sentry/utils';\n\nimport { WINDOW, wrap } from '../helpers';\n\nconst DEFAULT_EVENT_TARGET = [\n  'EventTarget',\n  'Window',\n  'Node',\n  'ApplicationCache',\n  'AudioTrackList',\n  'BroadcastChannel',\n  'ChannelMergerNode',\n  'CryptoOperation',\n  'EventSource',\n  'FileReader',\n  'HTMLUnknownElement',\n  'IDBDatabase',\n  'IDBRequest',\n  'IDBTransaction',\n  'KeyOperation',\n  'MediaController',\n  'MessagePort',\n  'ModalWindow',\n  'Notification',\n  'SVGElementInstance',\n  'Screen',\n  'SharedWorker',\n  'TextTrack',\n  'TextTrackCue',\n  'TextTrackList',\n  'WebSocket',\n  'WebSocketWorker',\n  'Worker',\n  'XMLHttpRequest',\n  'XMLHttpRequestEventTarget',\n  'XMLHttpRequestUpload',\n];\n\nconst INTEGRATION_NAME = 'TryCatch';\n\ntype XMLHttpRequestProp = 'onload' | 'onerror' | 'onprogress' | 'onreadystatechange';\n\ninterface TryCatchOptions {\n  setTimeout: boolean;\n  setInterval: boolean;\n  requestAnimationFrame: boolean;\n  XMLHttpRequest: boolean;\n  eventTarget: boolean | string[];\n}\n\nconst _browserApiErrorsIntegration = ((options: Partial<TryCatchOptions> = {}) => {\n  const _options = {\n    XMLHttpRequest: true,\n    eventTarget: true,\n    requestAnimationFrame: true,\n    setInterval: true,\n    setTimeout: true,\n    ...options,\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    // TODO: This currently only works for the first client this is setup\n    // We may want to adjust this to check for client etc.\n    setupOnce() {\n      if (_options.setTimeout) {\n        fill(WINDOW, 'setTimeout', _wrapTimeFunction);\n      }\n\n      if (_options.setInterval) {\n        fill(WINDOW, 'setInterval', _wrapTimeFunction);\n      }\n\n      if (_options.requestAnimationFrame) {\n        fill(WINDOW, 'requestAnimationFrame', _wrapRAF);\n      }\n\n      if (_options.XMLHttpRequest && 'XMLHttpRequest' in WINDOW) {\n        fill(XMLHttpRequest.prototype, 'send', _wrapXHR);\n      }\n\n      const eventTargetOption = _options.eventTarget;\n      if (eventTargetOption) {\n        const eventTarget = Array.isArray(eventTargetOption) ? eventTargetOption : DEFAULT_EVENT_TARGET;\n        eventTarget.forEach(_wrapEventTarget);\n      }\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const browserApiErrorsIntegration = defineIntegration(_browserApiErrorsIntegration);\n\n/**\n * Wrap timer functions and event targets to catch errors and provide better meta data.\n * @deprecated Use `browserApiErrorsIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport const TryCatch = convertIntegrationFnToClass(\n  INTEGRATION_NAME,\n  browserApiErrorsIntegration,\n) as IntegrationClass<Integration> & {\n  new (options?: {\n    setTimeout: boolean;\n    setInterval: boolean;\n    requestAnimationFrame: boolean;\n    XMLHttpRequest: boolean;\n    eventTarget: boolean | string[];\n  }): Integration;\n};\n\nfunction _wrapTimeFunction(original: () => void): () => number {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function (this: any, ...args: any[]): number {\n    const originalCallback = args[0];\n    args[0] = wrap(originalCallback, {\n      mechanism: {\n        data: { function: getFunctionName(original) },\n        handled: false,\n        type: 'instrument',\n      },\n    });\n    return original.apply(this, args);\n  };\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _wrapRAF(original: any): (callback: () => void) => any {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function (this: any, callback: () => void): () => void {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    return original.apply(this, [\n      wrap(callback, {\n        mechanism: {\n          data: {\n            function: 'requestAnimationFrame',\n            handler: getFunctionName(original),\n          },\n          handled: false,\n          type: 'instrument',\n        },\n      }),\n    ]);\n  };\n}\n\nfunction _wrapXHR(originalSend: () => void): () => void {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function (this: XMLHttpRequest, ...args: any[]): void {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const xhr = this;\n    const xmlHttpRequestProps: XMLHttpRequestProp[] = ['onload', 'onerror', 'onprogress', 'onreadystatechange'];\n\n    xmlHttpRequestProps.forEach(prop => {\n      if (prop in xhr && typeof xhr[prop] === 'function') {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        fill(xhr, prop, function (original: WrappedFunction): () => any {\n          const wrapOptions = {\n            mechanism: {\n              data: {\n                function: prop,\n                handler: getFunctionName(original),\n              },\n              handled: false,\n              type: 'instrument',\n            },\n          };\n\n          // If Instrument integration has been called before TryCatch, get the name of original function\n          const originalFunction = getOriginalFunction(original);\n          if (originalFunction) {\n            wrapOptions.mechanism.data.handler = getFunctionName(originalFunction);\n          }\n\n          // Otherwise wrap directly\n          return wrap(original, wrapOptions);\n        });\n      }\n    });\n\n    return originalSend.apply(this, args);\n  };\n}\n\nfunction _wrapEventTarget(target: string): void {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const globalObject = WINDOW as { [key: string]: any };\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  const proto = globalObject[target] && globalObject[target].prototype;\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins\n  if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n    return;\n  }\n\n  fill(proto, 'addEventListener', function (original: VoidFunction,): (\n    eventName: string,\n    fn: EventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ) => void {\n    return function (\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this: any,\n      eventName: string,\n      fn: EventListenerObject,\n      options?: boolean | AddEventListenerOptions,\n    ): (eventName: string, fn: EventListenerObject, capture?: boolean, secure?: boolean) => void {\n      try {\n        if (typeof fn.handleEvent === 'function') {\n          // ESlint disable explanation:\n          //  First, it is generally safe to call `wrap` with an unbound function. Furthermore, using `.bind()` would\n          //  introduce a bug here, because bind returns a new function that doesn't have our\n          //  flags(like __sentry_original__) attached. `wrap` checks for those flags to avoid unnecessary wrapping.\n          //  Without those flags, every call to addEventListener wraps the function again, causing a memory leak.\n          // eslint-disable-next-line @typescript-eslint/unbound-method\n          fn.handleEvent = wrap(fn.handleEvent, {\n            mechanism: {\n              data: {\n                function: 'handleEvent',\n                handler: getFunctionName(fn),\n                target,\n              },\n              handled: false,\n              type: 'instrument',\n            },\n          });\n        }\n      } catch (err) {\n        // can sometimes get 'Permission denied to access property \"handle Event'\n      }\n\n      return original.apply(this, [\n        eventName,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        wrap(fn as any as WrappedFunction, {\n          mechanism: {\n            data: {\n              function: 'addEventListener',\n              handler: getFunctionName(fn),\n              target,\n            },\n            handled: false,\n            type: 'instrument',\n          },\n        }),\n        options,\n      ]);\n    };\n  });\n\n  fill(\n    proto,\n    'removeEventListener',\n    function (\n      originalRemoveEventListener: () => void,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ): (this: any, eventName: string, fn: EventListenerObject, options?: boolean | EventListenerOptions) => () => void {\n      return function (\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this: any,\n        eventName: string,\n        fn: EventListenerObject,\n        options?: boolean | EventListenerOptions,\n      ): () => void {\n        /**\n         * There are 2 possible scenarios here:\n         *\n         * 1. Someone passes a callback, which was attached prior to Sentry initialization, or by using unmodified\n         * method, eg. `document.addEventListener.call(el, name, handler). In this case, we treat this function\n         * as a pass-through, and call original `removeEventListener` with it.\n         *\n         * 2. Someone passes a callback, which was attached after Sentry was initialized, which means that it was using\n         * our wrapped version of `addEventListener`, which internally calls `wrap` helper.\n         * This helper \"wraps\" whole callback inside a try/catch statement, and attached appropriate metadata to it,\n         * in order for us to make a distinction between wrapped/non-wrapped functions possible.\n         * If a function was wrapped, it has additional property of `__sentry_wrapped__`, holding the handler.\n         *\n         * When someone adds a handler prior to initialization, and then do it again, but after,\n         * then we have to detach both of them. Otherwise, if we'd detach only wrapped one, it'd be impossible\n         * to get rid of the initial handler and it'd stick there forever.\n         */\n        const wrappedEventHandler = fn as unknown as WrappedFunction;\n        try {\n          const originalEventHandler = wrappedEventHandler && wrappedEventHandler.__sentry_wrapped__;\n          if (originalEventHandler) {\n            originalRemoveEventListener.call(this, eventName, originalEventHandler, options);\n          }\n        } catch (e) {\n          // ignore, accessing __sentry_wrapped__ will throw in some Selenium environments\n        }\n        return originalRemoveEventListener.call(this, eventName, wrappedEventHandler, options);\n      };\n    },\n  );\n}\n","import { DEBUG_BUILD } from '../debug-build';\nimport { logger } from '../logger';\nimport { getFunctionName } from '../stacktrace';\n\nexport type InstrumentHandlerType = 'console' | 'dom' | 'fetch' | 'history' | 'xhr' | 'error' | 'unhandledrejection';\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type InstrumentHandlerCallback = (data: any) => void;\n\n// We keep the handlers globally\nconst handlers: { [key in InstrumentHandlerType]?: InstrumentHandlerCallback[] } = {};\nconst instrumented: { [key in InstrumentHandlerType]?: boolean } = {};\n\n/** Add a handler function. */\nexport function addHandler(type: InstrumentHandlerType, handler: InstrumentHandlerCallback): void {\n  handlers[type] = handlers[type] || [];\n  (handlers[type] as InstrumentHandlerCallback[]).push(handler);\n}\n\n/**\n * Reset all instrumentation handlers.\n * This can be used by tests to ensure we have a clean slate of instrumentation handlers.\n */\nexport function resetInstrumentationHandlers(): void {\n  Object.keys(handlers).forEach(key => {\n    handlers[key as InstrumentHandlerType] = undefined;\n  });\n}\n\n/** Maybe run an instrumentation function, unless it was already called. */\nexport function maybeInstrument(type: InstrumentHandlerType, instrumentFn: () => void): void {\n  if (!instrumented[type]) {\n    instrumentFn();\n    instrumented[type] = true;\n  }\n}\n\n/** Trigger handlers for a given instrumentation type. */\nexport function triggerHandlers(type: InstrumentHandlerType, data: unknown): void {\n  const typeHandlers = type && handlers[type];\n  if (!typeHandlers) {\n    return;\n  }\n\n  for (const handler of typeHandlers) {\n    try {\n      handler(data);\n    } catch (e) {\n      DEBUG_BUILD &&\n        logger.error(\n          `Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${getFunctionName(handler)}\\nError:`,\n          e,\n        );\n    }\n  }\n}\n","import type { HandlerDataError } from '@sentry/types';\n\nimport { GLOBAL_OBJ } from '../worldwide';\nimport { addHandler, maybeInstrument, triggerHandlers } from './_handlers';\n\nlet _oldOnErrorHandler: (typeof GLOBAL_OBJ)['onerror'] | null = null;\n\n/**\n * Add an instrumentation handler for when an error is captured by the global error handler.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addGlobalErrorInstrumentationHandler(handler: (data: HandlerDataError) => void): void {\n  const type = 'error';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentError);\n}\n\nfunction instrumentError(): void {\n  _oldOnErrorHandler = GLOBAL_OBJ.onerror;\n\n  GLOBAL_OBJ.onerror = function (\n    msg: string | object,\n    url?: string,\n    line?: number,\n    column?: number,\n    error?: Error,\n  ): boolean {\n    const handlerData: HandlerDataError = {\n      column,\n      error,\n      line,\n      msg,\n      url,\n    };\n    triggerHandlers('error', handlerData);\n\n    if (_oldOnErrorHandler && !_oldOnErrorHandler.__SENTRY_LOADER__) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnErrorHandler.apply(this, arguments);\n    }\n\n    return false;\n  };\n\n  GLOBAL_OBJ.onerror.__SENTRY_INSTRUMENTED__ = true;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport type { HandlerDataUnhandledRejection } from '@sentry/types';\n\nimport { GLOBAL_OBJ } from '../worldwide';\nimport { addHandler, maybeInstrument, triggerHandlers } from './_handlers';\n\nlet _oldOnUnhandledRejectionHandler: (typeof GLOBAL_OBJ)['onunhandledrejection'] | null = null;\n\n/**\n * Add an instrumentation handler for when an unhandled promise rejection is captured.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addGlobalUnhandledRejectionInstrumentationHandler(\n  handler: (data: HandlerDataUnhandledRejection) => void,\n): void {\n  const type = 'unhandledrejection';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentUnhandledRejection);\n}\n\nfunction instrumentUnhandledRejection(): void {\n  _oldOnUnhandledRejectionHandler = GLOBAL_OBJ.onunhandledrejection;\n\n  GLOBAL_OBJ.onunhandledrejection = function (e: any): boolean {\n    const handlerData: HandlerDataUnhandledRejection = e;\n    triggerHandlers('unhandledrejection', handlerData);\n\n    if (_oldOnUnhandledRejectionHandler && !_oldOnUnhandledRejectionHandler.__SENTRY_LOADER__) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnUnhandledRejectionHandler.apply(this, arguments);\n    }\n\n    return true;\n  };\n\n  GLOBAL_OBJ.onunhandledrejection.__SENTRY_INSTRUMENTED__ = true;\n}\n","import { getClient } from '@sentry/core';\nimport type {\n  Event,\n  EventHint,\n  Exception,\n  ParameterizedString,\n  Severity,\n  SeverityLevel,\n  StackFrame,\n  StackParser,\n} from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addExceptionTypeValue,\n  extractExceptionKeysForMessage,\n  isDOMError,\n  isDOMException,\n  isError,\n  isErrorEvent,\n  isEvent,\n  isParameterizedString,\n  isPlainObject,\n  normalizeToSize,\n  resolvedSyncPromise,\n} from '@sentry/utils';\n\ntype Prototype = { constructor: (...args: unknown[]) => unknown };\n\n/**\n * This function creates an exception from a JavaScript Error\n */\nexport function exceptionFromError(stackParser: StackParser, ex: Error): Exception {\n  // Get the frames first since Opera can lose the stack if we touch anything else first\n  const frames = parseStackFrames(stackParser, ex);\n\n  const exception: Exception = {\n    type: ex && ex.name,\n    value: extractMessage(ex),\n  };\n\n  if (frames.length) {\n    exception.stacktrace = { frames };\n  }\n\n  if (exception.type === undefined && exception.value === '') {\n    exception.value = 'Unrecoverable error caught';\n  }\n\n  return exception;\n}\n\n/**\n * @hidden\n */\nexport function eventFromPlainObject(\n  stackParser: StackParser,\n  exception: Record<string, unknown>,\n  syntheticException?: Error,\n  isUnhandledRejection?: boolean,\n): Event {\n  const client = getClient();\n  const normalizeDepth = client && client.getOptions().normalizeDepth;\n\n  const event: Event = {\n    exception: {\n      values: [\n        {\n          type: isEvent(exception) ? exception.constructor.name : isUnhandledRejection ? 'UnhandledRejection' : 'Error',\n          value: getNonErrorObjectExceptionValue(exception, { isUnhandledRejection }),\n        },\n      ],\n    },\n    extra: {\n      __serialized__: normalizeToSize(exception, normalizeDepth),\n    },\n  };\n\n  if (syntheticException) {\n    const frames = parseStackFrames(stackParser, syntheticException);\n    if (frames.length) {\n      // event.exception.values[0] has been set above\n      (event.exception as { values: Exception[] }).values[0].stacktrace = { frames };\n    }\n  }\n\n  return event;\n}\n\n/**\n * @hidden\n */\nexport function eventFromError(stackParser: StackParser, ex: Error): Event {\n  return {\n    exception: {\n      values: [exceptionFromError(stackParser, ex)],\n    },\n  };\n}\n\n/** Parses stack frames from an error */\nexport function parseStackFrames(\n  stackParser: StackParser,\n  ex: Error & { framesToPop?: number; stacktrace?: string },\n): StackFrame[] {\n  // Access and store the stacktrace property before doing ANYTHING\n  // else to it because Opera is not very good at providing it\n  // reliably in other circumstances.\n  const stacktrace = ex.stacktrace || ex.stack || '';\n\n  const popSize = getPopSize(ex);\n\n  try {\n    return stackParser(stacktrace, popSize);\n  } catch (e) {\n    // no-empty\n  }\n\n  return [];\n}\n\n// Based on our own mapping pattern - https://github.com/getsentry/sentry/blob/9f08305e09866c8bd6d0c24f5b0aabdd7dd6c59c/src/sentry/lang/javascript/errormapping.py#L83-L108\nconst reactMinifiedRegexp = /Minified React error #\\d+;/i;\n\nfunction getPopSize(ex: Error & { framesToPop?: number }): number {\n  if (ex) {\n    if (typeof ex.framesToPop === 'number') {\n      return ex.framesToPop;\n    }\n\n    if (reactMinifiedRegexp.test(ex.message)) {\n      return 1;\n    }\n  }\n\n  return 0;\n}\n\n/**\n * There are cases where stacktrace.message is an Event object\n * https://github.com/getsentry/sentry-javascript/issues/1949\n * In this specific case we try to extract stacktrace.message.error.message\n */\nfunction extractMessage(ex: Error & { message: { error?: Error } }): string {\n  const message = ex && ex.message;\n  if (!message) {\n    return 'No error message';\n  }\n  if (message.error && typeof message.error.message === 'string') {\n    return message.error.message;\n  }\n  return message;\n}\n\n/**\n * Creates an {@link Event} from all inputs to `captureException` and non-primitive inputs to `captureMessage`.\n * @hidden\n */\nexport function eventFromException(\n  stackParser: StackParser,\n  exception: unknown,\n  hint?: EventHint,\n  attachStacktrace?: boolean,\n): PromiseLike<Event> {\n  const syntheticException = (hint && hint.syntheticException) || undefined;\n  const event = eventFromUnknownInput(stackParser, exception, syntheticException, attachStacktrace);\n  addExceptionMechanism(event); // defaults to { type: 'generic', handled: true }\n  event.level = 'error';\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return resolvedSyncPromise(event);\n}\n\n/**\n * Builds and Event from a Message\n * @hidden\n */\nexport function eventFromMessage(\n  stackParser: StackParser,\n  message: ParameterizedString,\n  // eslint-disable-next-line deprecation/deprecation\n  level: Severity | SeverityLevel = 'info',\n  hint?: EventHint,\n  attachStacktrace?: boolean,\n): PromiseLike<Event> {\n  const syntheticException = (hint && hint.syntheticException) || undefined;\n  const event = eventFromString(stackParser, message, syntheticException, attachStacktrace);\n  event.level = level;\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return resolvedSyncPromise(event);\n}\n\n/**\n * @hidden\n */\nexport function eventFromUnknownInput(\n  stackParser: StackParser,\n  exception: unknown,\n  syntheticException?: Error,\n  attachStacktrace?: boolean,\n  isUnhandledRejection?: boolean,\n): Event {\n  let event: Event;\n\n  if (isErrorEvent(exception as ErrorEvent) && (exception as ErrorEvent).error) {\n    // If it is an ErrorEvent with `error` property, extract it to get actual Error\n    const errorEvent = exception as ErrorEvent;\n    return eventFromError(stackParser, errorEvent.error as Error);\n  }\n\n  // If it is a `DOMError` (which is a legacy API, but still supported in some browsers) then we just extract the name\n  // and message, as it doesn't provide anything else. According to the spec, all `DOMExceptions` should also be\n  // `Error`s, but that's not the case in IE11, so in that case we treat it the same as we do a `DOMError`.\n  //\n  // https://developer.mozilla.org/en-US/docs/Web/API/DOMError\n  // https://developer.mozilla.org/en-US/docs/Web/API/DOMException\n  // https://webidl.spec.whatwg.org/#es-DOMException-specialness\n  if (isDOMError(exception) || isDOMException(exception as DOMException)) {\n    const domException = exception as DOMException;\n\n    if ('stack' in (exception as Error)) {\n      event = eventFromError(stackParser, exception as Error);\n    } else {\n      const name = domException.name || (isDOMError(domException) ? 'DOMError' : 'DOMException');\n      const message = domException.message ? `${name}: ${domException.message}` : name;\n      event = eventFromString(stackParser, message, syntheticException, attachStacktrace);\n      addExceptionTypeValue(event, message);\n    }\n    if ('code' in domException) {\n      // eslint-disable-next-line deprecation/deprecation\n      event.tags = { ...event.tags, 'DOMException.code': `${domException.code}` };\n    }\n\n    return event;\n  }\n  if (isError(exception)) {\n    // we have a real Error object, do nothing\n    return eventFromError(stackParser, exception);\n  }\n  if (isPlainObject(exception) || isEvent(exception)) {\n    // If it's a plain object or an instance of `Event` (the built-in JS kind, not this SDK's `Event` type), serialize\n    // it manually. This will allow us to group events based on top-level keys which is much better than creating a new\n    // group on any key/value change.\n    const objectException = exception as Record<string, unknown>;\n    event = eventFromPlainObject(stackParser, objectException, syntheticException, isUnhandledRejection);\n    addExceptionMechanism(event, {\n      synthetic: true,\n    });\n    return event;\n  }\n\n  // If none of previous checks were valid, then it means that it's not:\n  // - an instance of DOMError\n  // - an instance of DOMException\n  // - an instance of Event\n  // - an instance of Error\n  // - a valid ErrorEvent (one with an error property)\n  // - a plain Object\n  //\n  // So bail out and capture it as a simple message:\n  event = eventFromString(stackParser, exception as string, syntheticException, attachStacktrace);\n  addExceptionTypeValue(event, `${exception}`, undefined);\n  addExceptionMechanism(event, {\n    synthetic: true,\n  });\n\n  return event;\n}\n\n/**\n * @hidden\n */\nexport function eventFromString(\n  stackParser: StackParser,\n  message: ParameterizedString,\n  syntheticException?: Error,\n  attachStacktrace?: boolean,\n): Event {\n  const event: Event = {};\n\n  if (attachStacktrace && syntheticException) {\n    const frames = parseStackFrames(stackParser, syntheticException);\n    if (frames.length) {\n      event.exception = {\n        values: [{ value: message, stacktrace: { frames } }],\n      };\n    }\n  }\n\n  if (isParameterizedString(message)) {\n    const { __sentry_template_string__, __sentry_template_values__ } = message;\n\n    event.logentry = {\n      message: __sentry_template_string__,\n      params: __sentry_template_values__,\n    };\n    return event;\n  }\n\n  event.message = message;\n  return event;\n}\n\nfunction getNonErrorObjectExceptionValue(\n  exception: Record<string, unknown>,\n  { isUnhandledRejection }: { isUnhandledRejection?: boolean },\n): string {\n  const keys = extractExceptionKeysForMessage(exception);\n  const captureType = isUnhandledRejection ? 'promise rejection' : 'exception';\n\n  // Some ErrorEvent instances do not have an `error` property, which is why they are not handled before\n  // We still want to try to get a decent message for these cases\n  if (isErrorEvent(exception)) {\n    return `Event \\`ErrorEvent\\` captured as ${captureType} with message \\`${exception.message}\\``;\n  }\n\n  if (isEvent(exception)) {\n    const className = getObjectClassName(exception);\n    return `Event \\`${className}\\` (type=${exception.type}) captured as ${captureType}`;\n  }\n\n  return `Object captured as ${captureType} with keys: ${keys}`;\n}\n\nfunction getObjectClassName(obj: unknown): string | undefined | void {\n  try {\n    const prototype: Prototype | null = Object.getPrototypeOf(obj);\n    return prototype ? prototype.constructor.name : undefined;\n  } catch (e) {\n    // ignore errors here\n  }\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport { captureEvent, convertIntegrationFnToClass, defineIntegration, getClient } from '@sentry/core';\nimport type {\n  Client,\n  Event,\n  Integration,\n  IntegrationClass,\n  IntegrationFn,\n  Primitive,\n  StackParser,\n} from '@sentry/types';\nimport {\n  addGlobalErrorInstrumentationHandler,\n  addGlobalUnhandledRejectionInstrumentationHandler,\n  getLocationHref,\n  isErrorEvent,\n  isPrimitive,\n  isString,\n  logger,\n} from '@sentry/utils';\n\nimport type { BrowserClient } from '../client';\nimport { DEBUG_BUILD } from '../debug-build';\nimport { eventFromUnknownInput } from '../eventbuilder';\nimport { shouldIgnoreOnError } from '../helpers';\n\ntype GlobalHandlersIntegrationsOptionKeys = 'onerror' | 'onunhandledrejection';\n\ntype GlobalHandlersIntegrations = Record<GlobalHandlersIntegrationsOptionKeys, boolean>;\n\nconst INTEGRATION_NAME = 'GlobalHandlers';\n\nconst _globalHandlersIntegration = ((options: Partial<GlobalHandlersIntegrations> = {}) => {\n  const _options = {\n    onerror: true,\n    onunhandledrejection: true,\n    ...options,\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      Error.stackTraceLimit = 50;\n    },\n    setup(client) {\n      if (_options.onerror) {\n        _installGlobalOnErrorHandler(client);\n        globalHandlerLog('onerror');\n      }\n      if (_options.onunhandledrejection) {\n        _installGlobalOnUnhandledRejectionHandler(client);\n        globalHandlerLog('onunhandledrejection');\n      }\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const globalHandlersIntegration = defineIntegration(_globalHandlersIntegration);\n\n/**\n * Global handlers.\n * @deprecated Use `globalHandlersIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport const GlobalHandlers = convertIntegrationFnToClass(\n  INTEGRATION_NAME,\n  globalHandlersIntegration,\n) as IntegrationClass<Integration & { setup: (client: Client) => void }> & {\n  new (options?: Partial<GlobalHandlersIntegrations>): Integration;\n};\n\nfunction _installGlobalOnErrorHandler(client: Client): void {\n  addGlobalErrorInstrumentationHandler(data => {\n    const { stackParser, attachStacktrace } = getOptions();\n\n    if (getClient() !== client || shouldIgnoreOnError()) {\n      return;\n    }\n\n    const { msg, url, line, column, error } = data;\n\n    const event =\n      error === undefined && isString(msg)\n        ? _eventFromIncompleteOnError(msg, url, line, column)\n        : _enhanceEventWithInitialFrame(\n            eventFromUnknownInput(stackParser, error || msg, undefined, attachStacktrace, false),\n            url,\n            line,\n            column,\n          );\n\n    event.level = 'error';\n\n    captureEvent(event, {\n      originalException: error,\n      mechanism: {\n        handled: false,\n        type: 'onerror',\n      },\n    });\n  });\n}\n\nfunction _installGlobalOnUnhandledRejectionHandler(client: Client): void {\n  addGlobalUnhandledRejectionInstrumentationHandler(e => {\n    const { stackParser, attachStacktrace } = getOptions();\n\n    if (getClient() !== client || shouldIgnoreOnError()) {\n      return;\n    }\n\n    const error = _getUnhandledRejectionError(e as unknown);\n\n    const event = isPrimitive(error)\n      ? _eventFromRejectionWithPrimitive(error)\n      : eventFromUnknownInput(stackParser, error, undefined, attachStacktrace, true);\n\n    event.level = 'error';\n\n    captureEvent(event, {\n      originalException: error,\n      mechanism: {\n        handled: false,\n        type: 'onunhandledrejection',\n      },\n    });\n  });\n}\n\nfunction _getUnhandledRejectionError(error: unknown): unknown {\n  if (isPrimitive(error)) {\n    return error;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const e = error as any;\n\n  // dig the object of the rejection out of known event types\n  try {\n    // PromiseRejectionEvents store the object of the rejection under 'reason'\n    // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n    if ('reason' in e) {\n      return e.reason;\n    }\n\n    // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n    // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n    // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n    // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n    // https://github.com/getsentry/sentry-javascript/issues/2380\n    else if ('detail' in e && 'reason' in e.detail) {\n      return e.detail.reason;\n    }\n  } catch {} // eslint-disable-line no-empty\n\n  return error;\n}\n\n/**\n * Create an event from a promise rejection where the `reason` is a primitive.\n *\n * @param reason: The `reason` property of the promise rejection\n * @returns An Event object with an appropriate `exception` value\n */\nfunction _eventFromRejectionWithPrimitive(reason: Primitive): Event {\n  return {\n    exception: {\n      values: [\n        {\n          type: 'UnhandledRejection',\n          // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)\n          value: `Non-Error promise rejection captured with value: ${String(reason)}`,\n        },\n      ],\n    },\n  };\n}\n\n/**\n * This function creates a stack from an old, error-less onerror handler.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _eventFromIncompleteOnError(msg: any, url: any, line: any, column: any): Event {\n  const ERROR_TYPES_RE =\n    /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;\n\n  // If 'message' is ErrorEvent, get real message from inside\n  let message = isErrorEvent(msg) ? msg.message : msg;\n  let name = 'Error';\n\n  const groups = message.match(ERROR_TYPES_RE);\n  if (groups) {\n    name = groups[1];\n    message = groups[2];\n  }\n\n  const event = {\n    exception: {\n      values: [\n        {\n          type: name,\n          value: message,\n        },\n      ],\n    },\n  };\n\n  return _enhanceEventWithInitialFrame(event, url, line, column);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _enhanceEventWithInitialFrame(event: Event, url: any, line: any, column: any): Event {\n  // event.exception\n  const e = (event.exception = event.exception || {});\n  // event.exception.values\n  const ev = (e.values = e.values || []);\n  // event.exception.values[0]\n  const ev0 = (ev[0] = ev[0] || {});\n  // event.exception.values[0].stacktrace\n  const ev0s = (ev0.stacktrace = ev0.stacktrace || {});\n  // event.exception.values[0].stacktrace.frames\n  const ev0sf = (ev0s.frames = ev0s.frames || []);\n\n  const colno = isNaN(parseInt(column, 10)) ? undefined : column;\n  const lineno = isNaN(parseInt(line, 10)) ? undefined : line;\n  const filename = isString(url) && url.length > 0 ? url : getLocationHref();\n\n  // event.exception.values[0].stacktrace.frames\n  if (ev0sf.length === 0) {\n    ev0sf.push({\n      colno,\n      filename,\n      function: '?',\n      in_app: true,\n      lineno,\n    });\n  }\n\n  return event;\n}\n\nfunction globalHandlerLog(type: string): void {\n  DEBUG_BUILD && logger.log(`Global Handler attached: ${type}`);\n}\n\nfunction getOptions(): { stackParser: StackParser; attachStacktrace?: boolean } {\n  const client = getClient<BrowserClient>();\n  const options = (client && client.getOptions()) || {\n    stackParser: () => [],\n    attachStacktrace: false,\n  };\n  return options;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\nimport type { ConsoleLevel, HandlerDataConsole } from '@sentry/types';\n\nimport { CONSOLE_LEVELS, originalConsoleMethods } from '../logger';\nimport { fill } from '../object';\nimport { GLOBAL_OBJ } from '../worldwide';\nimport { addHandler, maybeInstrument, triggerHandlers } from './_handlers';\n\n/**\n * Add an instrumentation handler for when a console.xxx method is called.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addConsoleInstrumentationHandler(handler: (data: HandlerDataConsole) => void): void {\n  const type = 'console';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentConsole);\n}\n\nfunction instrumentConsole(): void {\n  if (!('console' in GLOBAL_OBJ)) {\n    return;\n  }\n\n  CONSOLE_LEVELS.forEach(function (level: ConsoleLevel): void {\n    if (!(level in GLOBAL_OBJ.console)) {\n      return;\n    }\n\n    fill(GLOBAL_OBJ.console, level, function (originalConsoleMethod: () => any): Function {\n      originalConsoleMethods[level] = originalConsoleMethod;\n\n      return function (...args: any[]): void {\n        const handlerData: HandlerDataConsole = { args, level };\n        triggerHandlers('console', handlerData);\n\n        const log = originalConsoleMethods[level];\n        log && log.apply(GLOBAL_OBJ.console, args);\n      };\n    });\n  });\n}\n","// TODO(v8): Move everything in this file into the browser package. Nothing here is generic and we run risk of leaking browser types into non-browser packages.\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\nimport type { HandlerDataDom } from '@sentry/types';\n\nimport { uuid4 } from '../misc';\nimport { addNonEnumerableProperty, fill } from '../object';\nimport { GLOBAL_OBJ } from '../worldwide';\nimport { addHandler, maybeInstrument, triggerHandlers } from './_handlers';\n\ntype SentryWrappedTarget = HTMLElement & { _sentryId?: string };\n\ntype AddEventListener = (\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | AddEventListenerOptions,\n) => void;\ntype RemoveEventListener = (\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | EventListenerOptions,\n) => void;\n\ntype InstrumentedElement = Element & {\n  __sentry_instrumentation_handlers__?: {\n    [key in 'click' | 'keypress']?: {\n      handler?: Function;\n      /** The number of custom listeners attached to this element */\n      refCount: number;\n    };\n  };\n};\n\nconst WINDOW = GLOBAL_OBJ as unknown as Window;\nconst DEBOUNCE_DURATION = 1000;\n\nlet debounceTimerID: number | undefined;\nlet lastCapturedEventType: string | undefined;\nlet lastCapturedEventTargetId: string | undefined;\n\n/**\n * Add an instrumentation handler for when a click or a keypress happens.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addClickKeypressInstrumentationHandler(handler: (data: HandlerDataDom) => void): void {\n  const type = 'dom';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentDOM);\n}\n\n/** Exported for tests only. */\nexport function instrumentDOM(): void {\n  if (!WINDOW.document) {\n    return;\n  }\n\n  // Make it so that any click or keypress that is unhandled / bubbled up all the way to the document triggers our dom\n  // handlers. (Normally we have only one, which captures a breadcrumb for each click or keypress.) Do this before\n  // we instrument `addEventListener` so that we don't end up attaching this handler twice.\n  const triggerDOMHandler = triggerHandlers.bind(null, 'dom');\n  const globalDOMEventHandler = makeDOMEventHandler(triggerDOMHandler, true);\n  WINDOW.document.addEventListener('click', globalDOMEventHandler, false);\n  WINDOW.document.addEventListener('keypress', globalDOMEventHandler, false);\n\n  // After hooking into click and keypress events bubbled up to `document`, we also hook into user-handled\n  // clicks & keypresses, by adding an event listener of our own to any element to which they add a listener. That\n  // way, whenever one of their handlers is triggered, ours will be, too. (This is needed because their handler\n  // could potentially prevent the event from bubbling up to our global listeners. This way, our handler are still\n  // guaranteed to fire at least once.)\n  ['EventTarget', 'Node'].forEach((target: string) => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const proto = (WINDOW as any)[target] && (WINDOW as any)[target].prototype;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n      return;\n    }\n\n    fill(proto, 'addEventListener', function (originalAddEventListener: AddEventListener): AddEventListener {\n      return function (\n        this: Element,\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: boolean | AddEventListenerOptions,\n      ): AddEventListener {\n        if (type === 'click' || type == 'keypress') {\n          try {\n            const el = this as InstrumentedElement;\n            const handlers = (el.__sentry_instrumentation_handlers__ = el.__sentry_instrumentation_handlers__ || {});\n            const handlerForType = (handlers[type] = handlers[type] || { refCount: 0 });\n\n            if (!handlerForType.handler) {\n              const handler = makeDOMEventHandler(triggerDOMHandler);\n              handlerForType.handler = handler;\n              originalAddEventListener.call(this, type, handler, options);\n            }\n\n            handlerForType.refCount++;\n          } catch (e) {\n            // Accessing dom properties is always fragile.\n            // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n          }\n        }\n\n        return originalAddEventListener.call(this, type, listener, options);\n      };\n    });\n\n    fill(\n      proto,\n      'removeEventListener',\n      function (originalRemoveEventListener: RemoveEventListener): RemoveEventListener {\n        return function (\n          this: Element,\n          type: string,\n          listener: EventListenerOrEventListenerObject,\n          options?: boolean | EventListenerOptions,\n        ): () => void {\n          if (type === 'click' || type == 'keypress') {\n            try {\n              const el = this as InstrumentedElement;\n              const handlers = el.__sentry_instrumentation_handlers__ || {};\n              const handlerForType = handlers[type];\n\n              if (handlerForType) {\n                handlerForType.refCount--;\n                // If there are no longer any custom handlers of the current type on this element, we can remove ours, too.\n                if (handlerForType.refCount <= 0) {\n                  originalRemoveEventListener.call(this, type, handlerForType.handler, options);\n                  handlerForType.handler = undefined;\n                  delete handlers[type]; // eslint-disable-line @typescript-eslint/no-dynamic-delete\n                }\n\n                // If there are no longer any custom handlers of any type on this element, cleanup everything.\n                if (Object.keys(handlers).length === 0) {\n                  delete el.__sentry_instrumentation_handlers__;\n                }\n              }\n            } catch (e) {\n              // Accessing dom properties is always fragile.\n              // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n            }\n          }\n\n          return originalRemoveEventListener.call(this, type, listener, options);\n        };\n      },\n    );\n  });\n}\n\n/**\n * Check whether the event is similar to the last captured one. For example, two click events on the same button.\n */\nfunction isSimilarToLastCapturedEvent(event: Event): boolean {\n  // If both events have different type, then user definitely performed two separate actions. e.g. click + keypress.\n  if (event.type !== lastCapturedEventType) {\n    return false;\n  }\n\n  try {\n    // If both events have the same type, it's still possible that actions were performed on different targets.\n    // e.g. 2 clicks on different buttons.\n    if (!event.target || (event.target as SentryWrappedTarget)._sentryId !== lastCapturedEventTargetId) {\n      return false;\n    }\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n  }\n\n  // If both events have the same type _and_ same `target` (an element which triggered an event, _not necessarily_\n  // to which an event listener was attached), we treat them as the same action, as we want to capture\n  // only one breadcrumb. e.g. multiple clicks on the same button, or typing inside a user input box.\n  return true;\n}\n\n/**\n * Decide whether an event should be captured.\n * @param event event to be captured\n */\nfunction shouldSkipDOMEvent(eventType: string, target: SentryWrappedTarget | null): boolean {\n  // We are only interested in filtering `keypress` events for now.\n  if (eventType !== 'keypress') {\n    return false;\n  }\n\n  if (!target || !target.tagName) {\n    return true;\n  }\n\n  // Only consider keypress events on actual input elements. This will disregard keypresses targeting body\n  // e.g.tabbing through elements, hotkeys, etc.\n  if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.isContentEditable) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Wraps addEventListener to capture UI breadcrumbs\n */\nfunction makeDOMEventHandler(\n  handler: (data: HandlerDataDom) => void,\n  globalListener: boolean = false,\n): (event: Event) => void {\n  return (event: Event & { _sentryCaptured?: true }): void => {\n    // It's possible this handler might trigger multiple times for the same\n    // event (e.g. event propagation through node ancestors).\n    // Ignore if we've already captured that event.\n    if (!event || event['_sentryCaptured']) {\n      return;\n    }\n\n    const target = getEventTarget(event);\n\n    // We always want to skip _some_ events.\n    if (shouldSkipDOMEvent(event.type, target)) {\n      return;\n    }\n\n    // Mark event as \"seen\"\n    addNonEnumerableProperty(event, '_sentryCaptured', true);\n\n    if (target && !target._sentryId) {\n      // Add UUID to event target so we can identify if\n      addNonEnumerableProperty(target, '_sentryId', uuid4());\n    }\n\n    const name = event.type === 'keypress' ? 'input' : event.type;\n\n    // If there is no last captured event, it means that we can safely capture the new event and store it for future comparisons.\n    // If there is a last captured event, see if the new event is different enough to treat it as a unique one.\n    // If that's the case, emit the previous event and store locally the newly-captured DOM event.\n    if (!isSimilarToLastCapturedEvent(event)) {\n      const handlerData: HandlerDataDom = { event, name, global: globalListener };\n      handler(handlerData);\n      lastCapturedEventType = event.type;\n      lastCapturedEventTargetId = target ? target._sentryId : undefined;\n    }\n\n    // Start a new debounce timer that will prevent us from capturing multiple events that should be grouped together.\n    clearTimeout(debounceTimerID);\n    debounceTimerID = WINDOW.setTimeout(() => {\n      lastCapturedEventTargetId = undefined;\n      lastCapturedEventType = undefined;\n    }, DEBOUNCE_DURATION);\n  };\n}\n\nfunction getEventTarget(event: Event): SentryWrappedTarget | null {\n  try {\n    return event.target as SentryWrappedTarget | null;\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n    return null;\n  }\n}\n","// TODO(v8): Move everything in this file into the browser package. Nothing here is generic and we run risk of leaking browser types into non-browser packages.\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\nimport type { HandlerDataXhr, SentryWrappedXMLHttpRequest, WrappedFunction } from '@sentry/types';\n\nimport { isString } from '../is';\nimport { fill } from '../object';\nimport { GLOBAL_OBJ } from '../worldwide';\nimport { addHandler, maybeInstrument, triggerHandlers } from './_handlers';\n\nconst WINDOW = GLOBAL_OBJ as unknown as Window;\n\nexport const SENTRY_XHR_DATA_KEY = '__sentry_xhr_v3__';\n\n/**\n * Add an instrumentation handler for when an XHR request happens.\n * The handler function is called once when the request starts and once when it ends,\n * which can be identified by checking if it has an `endTimestamp`.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addXhrInstrumentationHandler(handler: (data: HandlerDataXhr) => void): void {\n  const type = 'xhr';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentXHR);\n}\n\n/** Exported only for tests. */\nexport function instrumentXHR(): void {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  if (!(WINDOW as any).XMLHttpRequest) {\n    return;\n  }\n\n  const xhrproto = XMLHttpRequest.prototype;\n\n  fill(xhrproto, 'open', function (originalOpen: () => void): () => void {\n    return function (this: XMLHttpRequest & SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      const startTimestamp = Date.now();\n\n      // open() should always be called with two or more arguments\n      // But to be on the safe side, we actually validate this and bail out if we don't have a method & url\n      const method = isString(args[0]) ? args[0].toUpperCase() : undefined;\n      const url = parseUrl(args[1]);\n\n      if (!method || !url) {\n        return originalOpen.apply(this, args);\n      }\n\n      this[SENTRY_XHR_DATA_KEY] = {\n        method,\n        url,\n        request_headers: {},\n      };\n\n      // if Sentry key appears in URL, don't capture it as a request\n      if (method === 'POST' && url.match(/sentry_key/)) {\n        this.__sentry_own_request__ = true;\n      }\n\n      const onreadystatechangeHandler: () => void = () => {\n        // For whatever reason, this is not the same instance here as from the outer method\n        const xhrInfo = this[SENTRY_XHR_DATA_KEY];\n\n        if (!xhrInfo) {\n          return;\n        }\n\n        if (this.readyState === 4) {\n          try {\n            // touching statusCode in some platforms throws\n            // an exception\n            xhrInfo.status_code = this.status;\n          } catch (e) {\n            /* do nothing */\n          }\n\n          const handlerData: HandlerDataXhr = {\n            args: [method, url],\n            endTimestamp: Date.now(),\n            startTimestamp,\n            xhr: this,\n          };\n          triggerHandlers('xhr', handlerData);\n        }\n      };\n\n      if ('onreadystatechange' in this && typeof this.onreadystatechange === 'function') {\n        fill(this, 'onreadystatechange', function (original: WrappedFunction): Function {\n          return function (this: SentryWrappedXMLHttpRequest, ...readyStateArgs: any[]): void {\n            onreadystatechangeHandler();\n            return original.apply(this, readyStateArgs);\n          };\n        });\n      } else {\n        this.addEventListener('readystatechange', onreadystatechangeHandler);\n      }\n\n      // Intercepting `setRequestHeader` to access the request headers of XHR instance.\n      // This will only work for user/library defined headers, not for the default/browser-assigned headers.\n      // Request cookies are also unavailable for XHR, as `Cookie` header can't be defined by `setRequestHeader`.\n      fill(this, 'setRequestHeader', function (original: WrappedFunction): Function {\n        return function (this: SentryWrappedXMLHttpRequest, ...setRequestHeaderArgs: unknown[]): void {\n          const [header, value] = setRequestHeaderArgs;\n\n          const xhrInfo = this[SENTRY_XHR_DATA_KEY];\n\n          if (xhrInfo && isString(header) && isString(value)) {\n            xhrInfo.request_headers[header.toLowerCase()] = value;\n          }\n\n          return original.apply(this, setRequestHeaderArgs);\n        };\n      });\n\n      return originalOpen.apply(this, args);\n    };\n  });\n\n  fill(xhrproto, 'send', function (originalSend: () => void): () => void {\n    return function (this: XMLHttpRequest & SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      const sentryXhrData = this[SENTRY_XHR_DATA_KEY];\n\n      if (!sentryXhrData) {\n        return originalSend.apply(this, args);\n      }\n\n      if (args[0] !== undefined) {\n        sentryXhrData.body = args[0];\n      }\n\n      const handlerData: HandlerDataXhr = {\n        args: [sentryXhrData.method, sentryXhrData.url],\n        startTimestamp: Date.now(),\n        xhr: this,\n      };\n      triggerHandlers('xhr', handlerData);\n\n      return originalSend.apply(this, args);\n    };\n  });\n}\n\nfunction parseUrl(url: string | unknown): string | undefined {\n  if (isString(url)) {\n    return url;\n  }\n\n  try {\n    // url can be a string or URL\n    // but since URL is not available in IE11, we do not check for it,\n    // but simply assume it is an URL and return `toString()` from it (which returns the full URL)\n    // If that fails, we just return undefined\n    return (url as URL).toString();\n  } catch {} // eslint-disable-line no-empty\n\n  return undefined;\n}\n","import { DEBUG_BUILD } from './debug-build';\nimport { logger } from './logger';\nimport { getGlobalObject } from './worldwide';\n\n// eslint-disable-next-line deprecation/deprecation\nconst WINDOW = getGlobalObject<Window>();\n\ndeclare const EdgeRuntime: string | undefined;\n\nexport { supportsHistory } from './vendor/supportsHistory';\n\n/**\n * Tells whether current environment supports ErrorEvent objects\n * {@link supportsErrorEvent}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsErrorEvent(): boolean {\n  try {\n    new ErrorEvent('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMError objects\n * {@link supportsDOMError}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMError(): boolean {\n  try {\n    // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':\n    // 1 argument required, but only 0 present.\n    // @ts-expect-error It really needs 1 argument, not 0.\n    new DOMError('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMException objects\n * {@link supportsDOMException}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMException(): boolean {\n  try {\n    new DOMException('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports Fetch API\n * {@link supportsFetch}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsFetch(): boolean {\n  if (!('fetch' in WINDOW)) {\n    return false;\n  }\n\n  try {\n    new Headers();\n    new Request('http://www.example.com');\n    new Response();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * isNativeFetch checks if the given function is a native implementation of fetch()\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isNativeFetch(func: Function): boolean {\n  return func && /^function fetch\\(\\)\\s+\\{\\s+\\[native code\\]\\s+\\}$/.test(func.toString());\n}\n\n/**\n * Tells whether current environment supports Fetch API natively\n * {@link supportsNativeFetch}.\n *\n * @returns true if `window.fetch` is natively implemented, false otherwise\n */\nexport function supportsNativeFetch(): boolean {\n  if (typeof EdgeRuntime === 'string') {\n    return true;\n  }\n\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  // Fast path to avoid DOM I/O\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  if (isNativeFetch(WINDOW.fetch)) {\n    return true;\n  }\n\n  // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)\n  // so create a \"pure\" iframe to see if that has native fetch\n  let result = false;\n  const doc = WINDOW.document;\n  // eslint-disable-next-line deprecation/deprecation\n  if (doc && typeof (doc.createElement as unknown) === 'function') {\n    try {\n      const sandbox = doc.createElement('iframe');\n      sandbox.hidden = true;\n      doc.head.appendChild(sandbox);\n      if (sandbox.contentWindow && sandbox.contentWindow.fetch) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        result = isNativeFetch(sandbox.contentWindow.fetch);\n      }\n      doc.head.removeChild(sandbox);\n    } catch (err) {\n      DEBUG_BUILD &&\n        logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Tells whether current environment supports ReportingObserver API\n * {@link supportsReportingObserver}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReportingObserver(): boolean {\n  return 'ReportingObserver' in WINDOW;\n}\n\n/**\n * Tells whether current environment supports Referrer Policy API\n * {@link supportsReferrerPolicy}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReferrerPolicy(): boolean {\n  // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default'\n  // (see https://caniuse.com/#feat=referrer-policy),\n  // it doesn't. And it throws an exception instead of ignoring this parameter...\n  // REF: https://github.com/getsentry/raven-js/issues/1233\n\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  try {\n    new Request('_', {\n      referrerPolicy: 'origin' as ReferrerPolicy,\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\nimport type { HandlerDataFetch } from '@sentry/types';\n\nimport { fill } from '../object';\nimport { supportsNativeFetch } from '../supports';\nimport { GLOBAL_OBJ } from '../worldwide';\nimport { addHandler, maybeInstrument, triggerHandlers } from './_handlers';\n\ntype FetchResource = string | { toString(): string } | { url: string };\n\n/**\n * Add an instrumentation handler for when a fetch request happens.\n * The handler function is called once when the request starts and once when it ends,\n * which can be identified by checking if it has an `endTimestamp`.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addFetchInstrumentationHandler(handler: (data: HandlerDataFetch) => void): void {\n  const type = 'fetch';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentFetch);\n}\n\nfunction instrumentFetch(): void {\n  if (!supportsNativeFetch()) {\n    return;\n  }\n\n  fill(GLOBAL_OBJ, 'fetch', function (originalFetch: () => void): () => void {\n    return function (...args: any[]): void {\n      const { method, url } = parseFetchArgs(args);\n\n      const handlerData: HandlerDataFetch = {\n        args,\n        fetchData: {\n          method,\n          url,\n        },\n        startTimestamp: Date.now(),\n      };\n\n      triggerHandlers('fetch', {\n        ...handlerData,\n      });\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return originalFetch.apply(GLOBAL_OBJ, args).then(\n        (response: Response) => {\n          const finishedHandlerData: HandlerDataFetch = {\n            ...handlerData,\n            endTimestamp: Date.now(),\n            response,\n          };\n\n          triggerHandlers('fetch', finishedHandlerData);\n          return response;\n        },\n        (error: Error) => {\n          const erroredHandlerData: HandlerDataFetch = {\n            ...handlerData,\n            endTimestamp: Date.now(),\n            error,\n          };\n\n          triggerHandlers('fetch', erroredHandlerData);\n          // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n          //       it means the sentry.javascript SDK caught an error invoking your application code.\n          //       This is expected behavior and NOT indicative of a bug with sentry.javascript.\n          throw error;\n        },\n      );\n    };\n  });\n}\n\nfunction hasProp<T extends string>(obj: unknown, prop: T): obj is Record<string, string> {\n  return !!obj && typeof obj === 'object' && !!(obj as Record<string, string>)[prop];\n}\n\nfunction getUrlFromResource(resource: FetchResource): string {\n  if (typeof resource === 'string') {\n    return resource;\n  }\n\n  if (!resource) {\n    return '';\n  }\n\n  if (hasProp(resource, 'url')) {\n    return resource.url;\n  }\n\n  if (resource.toString) {\n    return resource.toString();\n  }\n\n  return '';\n}\n\n/**\n * Parses the fetch arguments to find the used Http method and the url of the request.\n * Exported for tests only.\n */\nexport function parseFetchArgs(fetchArgs: unknown[]): { method: string; url: string } {\n  if (fetchArgs.length === 0) {\n    return { method: 'GET', url: '' };\n  }\n\n  if (fetchArgs.length === 2) {\n    const [url, options] = fetchArgs as [FetchResource, object];\n\n    return {\n      url: getUrlFromResource(url),\n      method: hasProp(options, 'method') ? String(options.method).toUpperCase() : 'GET',\n    };\n  }\n\n  const arg = fetchArgs[0];\n  return {\n    url: getUrlFromResource(arg as FetchResource),\n    method: hasProp(arg, 'method') ? String(arg.method).toUpperCase() : 'GET',\n  };\n}\n","// Based on https://github.com/angular/angular.js/pull/13945/files\n// The MIT License\n\n// Copyright (c) 2010-2016 Google, Inc. http://angularjs.org\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport { getGlobalObject } from '../worldwide';\n\n// eslint-disable-next-line deprecation/deprecation\nconst WINDOW = getGlobalObject<Window>();\n\n/**\n * Tells whether current environment supports History API\n * {@link supportsHistory}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsHistory(): boolean {\n  // NOTE: in Chrome App environment, touching history.pushState, *even inside\n  //       a try/catch block*, will cause Chrome to output an error to console.error\n  // borrowed from: https://github.com/angular/angular.js/pull/13945/files\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const chromeVar = (WINDOW as any).chrome;\n  const isChromePackagedApp = chromeVar && chromeVar.app && chromeVar.app.runtime;\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n  const hasHistoryApi = 'history' in WINDOW && !!WINDOW.history.pushState && !!WINDOW.history.replaceState;\n\n  return !isChromePackagedApp && hasHistoryApi;\n}\n","// TODO(v8): Move everything in this file into the browser package. Nothing here is generic and we run risk of leaking browser types into non-browser packages.\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\nimport type { HandlerDataHistory } from '@sentry/types';\n\nimport { fill } from '../object';\nimport { supportsHistory } from '../supports';\nimport { GLOBAL_OBJ } from '../worldwide';\nimport { addHandler, maybeInstrument, triggerHandlers } from './_handlers';\n\nconst WINDOW = GLOBAL_OBJ as unknown as Window;\n\nlet lastHref: string | undefined;\n\n/**\n * Add an instrumentation handler for when a fetch request happens.\n * The handler function is called once when the request starts and once when it ends,\n * which can be identified by checking if it has an `endTimestamp`.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addHistoryInstrumentationHandler(handler: (data: HandlerDataHistory) => void): void {\n  const type = 'history';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentHistory);\n}\n\nfunction instrumentHistory(): void {\n  if (!supportsHistory()) {\n    return;\n  }\n\n  const oldOnPopState = WINDOW.onpopstate;\n  WINDOW.onpopstate = function (this: WindowEventHandlers, ...args: any[]): any {\n    const to = WINDOW.location.href;\n    // keep track of the current URL state, as we always receive only the updated state\n    const from = lastHref;\n    lastHref = to;\n    const handlerData: HandlerDataHistory = { from, to };\n    triggerHandlers('history', handlerData);\n    if (oldOnPopState) {\n      // Apparently this can throw in Firefox when incorrectly implemented plugin is installed.\n      // https://github.com/getsentry/sentry-javascript/issues/3344\n      // https://github.com/bugsnag/bugsnag-js/issues/469\n      try {\n        return oldOnPopState.apply(this, args);\n      } catch (_oO) {\n        // no-empty\n      }\n    }\n  };\n\n  function historyReplacementFunction(originalHistoryFunction: () => void): () => void {\n    return function (this: History, ...args: any[]): void {\n      const url = args.length > 2 ? args[2] : undefined;\n      if (url) {\n        // coerce to string (this is what pushState does)\n        const from = lastHref;\n        const to = String(url);\n        // keep track of the current URL state, as we always receive only the updated state\n        lastHref = to;\n        const handlerData: HandlerDataHistory = { from, to };\n        triggerHandlers('history', handlerData);\n      }\n      return originalHistoryFunction.apply(this, args);\n    };\n  }\n\n  fill(WINDOW.history, 'pushState', historyReplacementFunction);\n  fill(WINDOW.history, 'replaceState', historyReplacementFunction);\n}\n","/* eslint-disable deprecation/deprecation */\nimport type { Severity, SeverityLevel } from '@sentry/types';\n\n// Note: Ideally the `SeverityLevel` type would be derived from `validSeverityLevels`, but that would mean either\n//\n// a) moving `validSeverityLevels` to `@sentry/types`,\n// b) moving the`SeverityLevel` type here, or\n// c) importing `validSeverityLevels` from here into `@sentry/types`.\n//\n// Option A would make `@sentry/types` a runtime dependency of `@sentry/utils` (not good), and options B and C would\n// create a circular dependency between `@sentry/types` and `@sentry/utils` (also not good). So a TODO accompanying the\n// type, reminding anyone who changes it to change this list also, will have to do.\n\nexport const validSeverityLevels = ['fatal', 'error', 'warning', 'log', 'info', 'debug'];\n\n/**\n * Converts a string-based level into a member of the deprecated {@link Severity} enum.\n *\n * @deprecated `severityFromString` is deprecated. Please use `severityLevelFromString` instead.\n *\n * @param level String representation of Severity\n * @returns Severity\n */\nexport function severityFromString(level: Severity | SeverityLevel | string): Severity {\n  return severityLevelFromString(level) as Severity;\n}\n\n/**\n * Converts a string-based level into a `SeverityLevel`, normalizing it along the way.\n *\n * @param level String representation of desired `SeverityLevel`.\n * @returns The `SeverityLevel` corresponding to the given string, or 'log' if the string isn't a valid level.\n */\nexport function severityLevelFromString(level: SeverityLevel | string): SeverityLevel {\n  return (level === 'warn' ? 'warning' : validSeverityLevels.includes(level) ? level : 'log') as SeverityLevel;\n}\n","type PartialURL = {\n  host?: string;\n  path?: string;\n  protocol?: string;\n  relative?: string;\n  search?: string;\n  hash?: string;\n};\n\n/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */\nexport function parseUrl(url: string): PartialURL {\n  if (!url) {\n    return {};\n  }\n\n  const match = url.match(/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n\n  if (!match) {\n    return {};\n  }\n\n  // coerce to undefined values to empty string so we don't get 'undefined'\n  const query = match[6] || '';\n  const fragment = match[8] || '';\n  return {\n    host: match[4],\n    path: match[5],\n    protocol: match[2],\n    search: query,\n    hash: fragment,\n    relative: match[5] + query + fragment, // everything minus origin\n  };\n}\n\n/**\n * Strip the query string and fragment off of a given URL or path (if present)\n *\n * @param urlPath Full URL or path, including possible query string and/or fragment\n * @returns URL or path without query string or fragment\n */\nexport function stripUrlQueryAndFragment(urlPath: string): string {\n  // eslint-disable-next-line no-useless-escape\n  return urlPath.split(/[\\?#]/, 1)[0];\n}\n\n/**\n * Returns number of URL segments of a passed string URL.\n */\nexport function getNumberOfUrlSegments(url: string): number {\n  // split at '/' or at '\\/' to split regex urls correctly\n  return url.split(/\\\\?\\//).filter(s => s.length > 0 && s !== ',').length;\n}\n\n/**\n * Takes a URL object and returns a sanitized string which is safe to use as span description\n * see: https://develop.sentry.dev/sdk/data-handling/#structuring-data\n */\nexport function getSanitizedUrlString(url: PartialURL): string {\n  const { protocol, host, path } = url;\n\n  const filteredHost =\n    (host &&\n      host\n        // Always filter out authority\n        .replace(/^.*@/, '[filtered]:[filtered]@')\n        // Don't show standard :80 (http) and :443 (https) ports to reduce the noise\n        // TODO: Use new URL global if it exists\n        .replace(/(:80)$/, '')\n        .replace(/(:443)$/, '')) ||\n    '';\n\n  return `${protocol ? `${protocol}://` : ''}${filteredHost}${path}`;\n}\n","/* eslint-disable max-lines */\nimport { addBreadcrumb, convertIntegrationFnToClass, defineIntegration, getClient } from '@sentry/core';\nimport type {\n  Client,\n  Event as SentryEvent,\n  HandlerDataConsole,\n  HandlerDataDom,\n  HandlerDataFetch,\n  HandlerDataHistory,\n  HandlerDataXhr,\n  Integration,\n  IntegrationClass,\n  IntegrationFn,\n} from '@sentry/types';\nimport type {\n  Breadcrumb,\n  FetchBreadcrumbData,\n  FetchBreadcrumbHint,\n  XhrBreadcrumbData,\n  XhrBreadcrumbHint,\n} from '@sentry/types/build/types/breadcrumb';\nimport {\n  SENTRY_XHR_DATA_KEY,\n  addClickKeypressInstrumentationHandler,\n  addConsoleInstrumentationHandler,\n  addFetchInstrumentationHandler,\n  addHistoryInstrumentationHandler,\n  addXhrInstrumentationHandler,\n  getComponentName,\n  getEventDescription,\n  htmlTreeAsString,\n  logger,\n  parseUrl,\n  safeJoin,\n  severityLevelFromString,\n} from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../debug-build';\nimport { WINDOW } from '../helpers';\n\ninterface BreadcrumbsOptions {\n  console: boolean;\n  dom:\n    | boolean\n    | {\n        serializeAttribute?: string | string[];\n        maxStringLength?: number;\n      };\n  fetch: boolean;\n  history: boolean;\n  sentry: boolean;\n  xhr: boolean;\n}\n\n/** maxStringLength gets capped to prevent 100 breadcrumbs exceeding 1MB event payload size */\nconst MAX_ALLOWED_STRING_LENGTH = 1024;\n\nconst INTEGRATION_NAME = 'Breadcrumbs';\n\nconst _breadcrumbsIntegration = ((options: Partial<BreadcrumbsOptions> = {}) => {\n  const _options = {\n    console: true,\n    dom: true,\n    fetch: true,\n    history: true,\n    sentry: true,\n    xhr: true,\n    ...options,\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    setup(client) {\n      if (_options.console) {\n        addConsoleInstrumentationHandler(_getConsoleBreadcrumbHandler(client));\n      }\n      if (_options.dom) {\n        addClickKeypressInstrumentationHandler(_getDomBreadcrumbHandler(client, _options.dom));\n      }\n      if (_options.xhr) {\n        addXhrInstrumentationHandler(_getXhrBreadcrumbHandler(client));\n      }\n      if (_options.fetch) {\n        addFetchInstrumentationHandler(_getFetchBreadcrumbHandler(client));\n      }\n      if (_options.history) {\n        addHistoryInstrumentationHandler(_getHistoryBreadcrumbHandler(client));\n      }\n      if (_options.sentry && client.on) {\n        client.on('beforeSendEvent', _getSentryBreadcrumbHandler(client));\n      }\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const breadcrumbsIntegration = defineIntegration(_breadcrumbsIntegration);\n\n/**\n * Default Breadcrumbs instrumentations\n *\n * @deprecated Use `breadcrumbsIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport const Breadcrumbs = convertIntegrationFnToClass(INTEGRATION_NAME, breadcrumbsIntegration) as IntegrationClass<\n  Integration & { setup: (client: Client) => void }\n> & {\n  new (\n    options?: Partial<{\n      console: boolean;\n      dom:\n        | boolean\n        | {\n            serializeAttribute?: string | string[];\n            maxStringLength?: number;\n          };\n      fetch: boolean;\n      history: boolean;\n      sentry: boolean;\n      xhr: boolean;\n    }>,\n  ): Integration;\n};\n\n/**\n * Adds a breadcrumb for Sentry events or transactions if this option is enabled.\n */\nfunction _getSentryBreadcrumbHandler(client: Client): (event: SentryEvent) => void {\n  return function addSentryBreadcrumb(event: SentryEvent): void {\n    if (getClient() !== client) {\n      return;\n    }\n\n    addBreadcrumb(\n      {\n        category: `sentry.${event.type === 'transaction' ? 'transaction' : 'event'}`,\n        event_id: event.event_id,\n        level: event.level,\n        message: getEventDescription(event),\n      },\n      {\n        event,\n      },\n    );\n  };\n}\n\n/**\n * A HOC that creaes a function that creates breadcrumbs from DOM API calls.\n * This is a HOC so that we get access to dom options in the closure.\n */\nfunction _getDomBreadcrumbHandler(\n  client: Client,\n  dom: BreadcrumbsOptions['dom'],\n): (handlerData: HandlerDataDom) => void {\n  return function _innerDomBreadcrumb(handlerData: HandlerDataDom): void {\n    if (getClient() !== client) {\n      return;\n    }\n\n    let target;\n    let componentName;\n    let keyAttrs = typeof dom === 'object' ? dom.serializeAttribute : undefined;\n\n    let maxStringLength =\n      typeof dom === 'object' && typeof dom.maxStringLength === 'number' ? dom.maxStringLength : undefined;\n    if (maxStringLength && maxStringLength > MAX_ALLOWED_STRING_LENGTH) {\n      DEBUG_BUILD &&\n        logger.warn(\n          `\\`dom.maxStringLength\\` cannot exceed ${MAX_ALLOWED_STRING_LENGTH}, but a value of ${maxStringLength} was configured. Sentry will use ${MAX_ALLOWED_STRING_LENGTH} instead.`,\n        );\n      maxStringLength = MAX_ALLOWED_STRING_LENGTH;\n    }\n\n    if (typeof keyAttrs === 'string') {\n      keyAttrs = [keyAttrs];\n    }\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      const event = handlerData.event as Event | Node;\n      const element = _isEvent(event) ? event.target : event;\n\n      target = htmlTreeAsString(element, { keyAttrs, maxStringLength });\n      componentName = getComponentName(element);\n    } catch (e) {\n      target = '<unknown>';\n    }\n\n    if (target.length === 0) {\n      return;\n    }\n\n    const breadcrumb: Breadcrumb = {\n      category: `ui.${handlerData.name}`,\n      message: target,\n    };\n\n    if (componentName) {\n      breadcrumb.data = { 'ui.component_name': componentName };\n    }\n\n    addBreadcrumb(breadcrumb, {\n      event: handlerData.event,\n      name: handlerData.name,\n      global: handlerData.global,\n    });\n  };\n}\n\n/**\n * Creates breadcrumbs from console API calls\n */\nfunction _getConsoleBreadcrumbHandler(client: Client): (handlerData: HandlerDataConsole) => void {\n  return function _consoleBreadcrumb(handlerData: HandlerDataConsole): void {\n    if (getClient() !== client) {\n      return;\n    }\n\n    const breadcrumb = {\n      category: 'console',\n      data: {\n        arguments: handlerData.args,\n        logger: 'console',\n      },\n      level: severityLevelFromString(handlerData.level),\n      message: safeJoin(handlerData.args, ' '),\n    };\n\n    if (handlerData.level === 'assert') {\n      if (handlerData.args[0] === false) {\n        breadcrumb.message = `Assertion failed: ${safeJoin(handlerData.args.slice(1), ' ') || 'console.assert'}`;\n        breadcrumb.data.arguments = handlerData.args.slice(1);\n      } else {\n        // Don't capture a breadcrumb for passed assertions\n        return;\n      }\n    }\n\n    addBreadcrumb(breadcrumb, {\n      input: handlerData.args,\n      level: handlerData.level,\n    });\n  };\n}\n\n/**\n * Creates breadcrumbs from XHR API calls\n */\nfunction _getXhrBreadcrumbHandler(client: Client): (handlerData: HandlerDataXhr) => void {\n  return function _xhrBreadcrumb(handlerData: HandlerDataXhr): void {\n    if (getClient() !== client) {\n      return;\n    }\n\n    const { startTimestamp, endTimestamp } = handlerData;\n\n    const sentryXhrData = handlerData.xhr[SENTRY_XHR_DATA_KEY];\n\n    // We only capture complete, non-sentry requests\n    if (!startTimestamp || !endTimestamp || !sentryXhrData) {\n      return;\n    }\n\n    const { method, url, status_code, body } = sentryXhrData;\n\n    const data: XhrBreadcrumbData = {\n      method,\n      url,\n      status_code,\n    };\n\n    const hint: XhrBreadcrumbHint = {\n      xhr: handlerData.xhr,\n      input: body,\n      startTimestamp,\n      endTimestamp,\n    };\n\n    addBreadcrumb(\n      {\n        category: 'xhr',\n        data,\n        type: 'http',\n      },\n      hint,\n    );\n  };\n}\n\n/**\n * Creates breadcrumbs from fetch API calls\n */\nfunction _getFetchBreadcrumbHandler(client: Client): (handlerData: HandlerDataFetch) => void {\n  return function _fetchBreadcrumb(handlerData: HandlerDataFetch): void {\n    if (getClient() !== client) {\n      return;\n    }\n\n    const { startTimestamp, endTimestamp } = handlerData;\n\n    // We only capture complete fetch requests\n    if (!endTimestamp) {\n      return;\n    }\n\n    if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n      // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n      return;\n    }\n\n    if (handlerData.error) {\n      const data: FetchBreadcrumbData = handlerData.fetchData;\n      const hint: FetchBreadcrumbHint = {\n        data: handlerData.error,\n        input: handlerData.args,\n        startTimestamp,\n        endTimestamp,\n      };\n\n      addBreadcrumb(\n        {\n          category: 'fetch',\n          data,\n          level: 'error',\n          type: 'http',\n        },\n        hint,\n      );\n    } else {\n      const response = handlerData.response as Response | undefined;\n      const data: FetchBreadcrumbData = {\n        ...handlerData.fetchData,\n        status_code: response && response.status,\n      };\n      const hint: FetchBreadcrumbHint = {\n        input: handlerData.args,\n        response,\n        startTimestamp,\n        endTimestamp,\n      };\n      addBreadcrumb(\n        {\n          category: 'fetch',\n          data,\n          type: 'http',\n        },\n        hint,\n      );\n    }\n  };\n}\n\n/**\n * Creates breadcrumbs from history API calls\n */\nfunction _getHistoryBreadcrumbHandler(client: Client): (handlerData: HandlerDataHistory) => void {\n  return function _historyBreadcrumb(handlerData: HandlerDataHistory): void {\n    if (getClient() !== client) {\n      return;\n    }\n\n    let from: string | undefined = handlerData.from;\n    let to: string | undefined = handlerData.to;\n    const parsedLoc = parseUrl(WINDOW.location.href);\n    let parsedFrom = from ? parseUrl(from) : undefined;\n    const parsedTo = parseUrl(to);\n\n    // Initial pushState doesn't provide `from` information\n    if (!parsedFrom || !parsedFrom.path) {\n      parsedFrom = parsedLoc;\n    }\n\n    // Use only the path component of the URL if the URL matches the current\n    // document (almost all the time when using pushState)\n    if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n      to = parsedTo.relative;\n    }\n    if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n      from = parsedFrom.relative;\n    }\n\n    addBreadcrumb({\n      category: 'navigation',\n      data: {\n        from,\n        to,\n      },\n    });\n  };\n}\n\nfunction _isEvent(event: unknown): event is Event {\n  return !!event && !!(event as Record<string, unknown>).target;\n}\n","import type { Event, EventHint, Exception, ExtendedError, StackParser } from '@sentry/types';\n\nimport { isInstanceOf } from './is';\nimport { truncate } from './string';\n\n/**\n * Creates exceptions inside `event.exception.values` for errors that are nested on properties based on the `key` parameter.\n */\nexport function applyAggregateErrorsToEvent(\n  exceptionFromErrorImplementation: (stackParser: StackParser, ex: Error) => Exception,\n  parser: StackParser,\n  maxValueLimit: number = 250,\n  key: string,\n  limit: number,\n  event: Event,\n  hint?: EventHint,\n): void {\n  if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n    return;\n  }\n\n  // Generally speaking the last item in `event.exception.values` is the exception originating from the original Error\n  const originalException: Exception | undefined =\n    event.exception.values.length > 0 ? event.exception.values[event.exception.values.length - 1] : undefined;\n\n  // We only create exception grouping if there is an exception in the event.\n  if (originalException) {\n    event.exception.values = truncateAggregateExceptions(\n      aggregateExceptionsFromError(\n        exceptionFromErrorImplementation,\n        parser,\n        limit,\n        hint.originalException as ExtendedError,\n        key,\n        event.exception.values,\n        originalException,\n        0,\n      ),\n      maxValueLimit,\n    );\n  }\n}\n\nfunction aggregateExceptionsFromError(\n  exceptionFromErrorImplementation: (stackParser: StackParser, ex: Error) => Exception,\n  parser: StackParser,\n  limit: number,\n  error: ExtendedError,\n  key: string,\n  prevExceptions: Exception[],\n  exception: Exception,\n  exceptionId: number,\n): Exception[] {\n  if (prevExceptions.length >= limit + 1) {\n    return prevExceptions;\n  }\n\n  let newExceptions = [...prevExceptions];\n\n  // Recursively call this function in order to walk down a chain of errors\n  if (isInstanceOf(error[key], Error)) {\n    applyExceptionGroupFieldsForParentException(exception, exceptionId);\n    const newException = exceptionFromErrorImplementation(parser, error[key]);\n    const newExceptionId = newExceptions.length;\n    applyExceptionGroupFieldsForChildException(newException, key, newExceptionId, exceptionId);\n    newExceptions = aggregateExceptionsFromError(\n      exceptionFromErrorImplementation,\n      parser,\n      limit,\n      error[key],\n      key,\n      [newException, ...newExceptions],\n      newException,\n      newExceptionId,\n    );\n  }\n\n  // This will create exception grouping for AggregateErrors\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\n  if (Array.isArray(error.errors)) {\n    error.errors.forEach((childError, i) => {\n      if (isInstanceOf(childError, Error)) {\n        applyExceptionGroupFieldsForParentException(exception, exceptionId);\n        const newException = exceptionFromErrorImplementation(parser, childError);\n        const newExceptionId = newExceptions.length;\n        applyExceptionGroupFieldsForChildException(newException, `errors[${i}]`, newExceptionId, exceptionId);\n        newExceptions = aggregateExceptionsFromError(\n          exceptionFromErrorImplementation,\n          parser,\n          limit,\n          childError,\n          key,\n          [newException, ...newExceptions],\n          newException,\n          newExceptionId,\n        );\n      }\n    });\n  }\n\n  return newExceptions;\n}\n\nfunction applyExceptionGroupFieldsForParentException(exception: Exception, exceptionId: number): void {\n  // Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.\n  exception.mechanism = exception.mechanism || { type: 'generic', handled: true };\n\n  exception.mechanism = {\n    ...exception.mechanism,\n    ...(exception.type === 'AggregateError' && { is_exception_group: true }),\n    exception_id: exceptionId,\n  };\n}\n\nfunction applyExceptionGroupFieldsForChildException(\n  exception: Exception,\n  source: string,\n  exceptionId: number,\n  parentId: number | undefined,\n): void {\n  // Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.\n  exception.mechanism = exception.mechanism || { type: 'generic', handled: true };\n\n  exception.mechanism = {\n    ...exception.mechanism,\n    type: 'chained',\n    source,\n    exception_id: exceptionId,\n    parent_id: parentId,\n  };\n}\n\n/**\n * Truncate the message (exception.value) of all exceptions in the event.\n * Because this event processor is ran after `applyClientOptions`,\n * we need to truncate the message of the added exceptions here.\n */\nfunction truncateAggregateExceptions(exceptions: Exception[], maxValueLength: number): Exception[] {\n  return exceptions.map(exception => {\n    if (exception.value) {\n      exception.value = truncate(exception.value, maxValueLength);\n    }\n    return exception;\n  });\n}\n","import { convertIntegrationFnToClass, defineIntegration } from '@sentry/core';\nimport type { Client, Event, EventHint, Integration, IntegrationClass, IntegrationFn } from '@sentry/types';\nimport { applyAggregateErrorsToEvent } from '@sentry/utils';\nimport { exceptionFromError } from '../eventbuilder';\n\ninterface LinkedErrorsOptions {\n  key?: string;\n  limit?: number;\n}\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\nconst INTEGRATION_NAME = 'LinkedErrors';\n\nconst _linkedErrorsIntegration = ((options: LinkedErrorsOptions = {}) => {\n  const limit = options.limit || DEFAULT_LIMIT;\n  const key = options.key || DEFAULT_KEY;\n\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    preprocessEvent(event, hint, client) {\n      const options = client.getOptions();\n\n      applyAggregateErrorsToEvent(\n        // This differs from the LinkedErrors integration in core by using a different exceptionFromError function\n        exceptionFromError,\n        options.stackParser,\n        options.maxValueLength,\n        key,\n        limit,\n        event,\n        hint,\n      );\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const linkedErrorsIntegration = defineIntegration(_linkedErrorsIntegration);\n\n/**\n * Aggregrate linked errors in an event.\n * @deprecated Use `linkedErrorsIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport const LinkedErrors = convertIntegrationFnToClass(INTEGRATION_NAME, linkedErrorsIntegration) as IntegrationClass<\n  Integration & { preprocessEvent: (event: Event, hint: EventHint, client: Client) => void }\n> & { new (options?: { key?: string; limit?: number }): Integration };\n","import { convertIntegrationFnToClass, defineIntegration } from '@sentry/core';\nimport type { Event, Integration, IntegrationClass, IntegrationFn } from '@sentry/types';\n\nimport { WINDOW } from '../helpers';\n\nconst INTEGRATION_NAME = 'HttpContext';\n\nconst _httpContextIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    preprocessEvent(event) {\n      // if none of the information we want exists, don't bother\n      if (!WINDOW.navigator && !WINDOW.location && !WINDOW.document) {\n        return;\n      }\n\n      // grab as much info as exists and add it to the event\n      const url = (event.request && event.request.url) || (WINDOW.location && WINDOW.location.href);\n      const { referrer } = WINDOW.document || {};\n      const { userAgent } = WINDOW.navigator || {};\n\n      const headers = {\n        ...(event.request && event.request.headers),\n        ...(referrer && { Referer: referrer }),\n        ...(userAgent && { 'User-Agent': userAgent }),\n      };\n      const request = { ...event.request, ...(url && { url }), headers };\n\n      event.request = request;\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const httpContextIntegration = defineIntegration(_httpContextIntegration);\n\n/**\n * HttpContext integration collects information about HTTP request headers.\n * @deprecated Use `httpContextIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport const HttpContext = convertIntegrationFnToClass(INTEGRATION_NAME, httpContextIntegration) as IntegrationClass<\n  Integration & { preprocessEvent: (event: Event) => void }\n>;\n","function _setPrototypeOf(t, e) {\n  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {\n    return t.__proto__ = e, t;\n  }, _setPrototypeOf(t, e);\n}\nexport { _setPrototypeOf as default };","import setPrototypeOf from \"./setPrototypeOf.js\";\nfunction _inheritsLoose(t, o) {\n  t.prototype = Object.create(o.prototype), t.prototype.constructor = t, setPrototypeOf(t, o);\n}\nexport { _inheritsLoose as default };","function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nexport { _typeof as default };","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nexport { toPropertyKey as default };","import _typeof from \"./typeof.js\";\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nexport { toPrimitive as default };","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperties(e, r) {\n  for (var t = 0; t < r.length; t++) {\n    var o = r[t];\n    o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, toPropertyKey(o.key), o);\n  }\n}\nfunction _createClass(e, r, t) {\n  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n    writable: !1\n  }), e;\n}\nexport { _createClass as default };","/**\n * Use this attribute to represent the source of a span.\n * Should be one of: custom, url, route, view, component, task, unknown\n *\n */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = 'sentry.source';\n\n/**\n * Use this attribute to represent the sample rate used for a span.\n */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = 'sentry.sample_rate';\n\n/**\n * Use this attribute to represent the operation of a span.\n */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_OP = 'sentry.op';\n\n/**\n * Use this attribute to represent the origin of a span.\n */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = 'sentry.origin';\n\n/**\n * The id of the profile that this span occured in.\n */\nexport const SEMANTIC_ATTRIBUTE_PROFILE_ID = 'profile_id';\n","import type { Span } from '@sentry/types';\n\n/** The status of an Span.\n *\n * @deprecated Use string literals - if you require type casting, cast to SpanStatusType type\n */\nexport enum SpanStatus {\n  /** The operation completed successfully. */\n  Ok = 'ok',\n  /** Deadline expired before operation could complete. */\n  DeadlineExceeded = 'deadline_exceeded',\n  /** 401 Unauthorized (actually does mean unauthenticated according to RFC 7235) */\n  Unauthenticated = 'unauthenticated',\n  /** 403 Forbidden */\n  PermissionDenied = 'permission_denied',\n  /** 404 Not Found. Some requested entity (file or directory) was not found. */\n  NotFound = 'not_found',\n  /** 429 Too Many Requests */\n  ResourceExhausted = 'resource_exhausted',\n  /** Client specified an invalid argument. 4xx. */\n  InvalidArgument = 'invalid_argument',\n  /** 501 Not Implemented */\n  Unimplemented = 'unimplemented',\n  /** 503 Service Unavailable */\n  Unavailable = 'unavailable',\n  /** Other/generic 5xx. */\n  InternalError = 'internal_error',\n  /** Unknown. Any non-standard HTTP status code. */\n  UnknownError = 'unknown_error',\n  /** The operation was cancelled (typically by the user). */\n  Cancelled = 'cancelled',\n  /** Already exists (409) */\n  AlreadyExists = 'already_exists',\n  /** Operation was rejected because the system is not in a state required for the operation's */\n  FailedPrecondition = 'failed_precondition',\n  /** The operation was aborted, typically due to a concurrency issue. */\n  Aborted = 'aborted',\n  /** Operation was attempted past the valid range. */\n  OutOfRange = 'out_of_range',\n  /** Unrecoverable data loss or corruption */\n  DataLoss = 'data_loss',\n}\n\nexport type SpanStatusType =\n  /** The operation completed successfully. */\n  | 'ok'\n  /** Deadline expired before operation could complete. */\n  | 'deadline_exceeded'\n  /** 401 Unauthorized (actually does mean unauthenticated according to RFC 7235) */\n  | 'unauthenticated'\n  /** 403 Forbidden */\n  | 'permission_denied'\n  /** 404 Not Found. Some requested entity (file or directory) was not found. */\n  | 'not_found'\n  /** 429 Too Many Requests */\n  | 'resource_exhausted'\n  /** Client specified an invalid argument. 4xx. */\n  | 'invalid_argument'\n  /** 501 Not Implemented */\n  | 'unimplemented'\n  /** 503 Service Unavailable */\n  | 'unavailable'\n  /** Other/generic 5xx. */\n  | 'internal_error'\n  /** Unknown. Any non-standard HTTP status code. */\n  | 'unknown_error'\n  /** The operation was cancelled (typically by the user). */\n  | 'cancelled'\n  /** Already exists (409) */\n  | 'already_exists'\n  /** Operation was rejected because the system is not in a state required for the operation's */\n  | 'failed_precondition'\n  /** The operation was aborted, typically due to a concurrency issue. */\n  | 'aborted'\n  /** Operation was attempted past the valid range. */\n  | 'out_of_range'\n  /** Unrecoverable data loss or corruption */\n  | 'data_loss';\n\n/**\n * Converts a HTTP status code into a {@link SpanStatusType}.\n *\n * @param httpStatus The HTTP response status code.\n * @returns The span status or unknown_error.\n */\nexport function getSpanStatusFromHttpCode(httpStatus: number): SpanStatusType {\n  if (httpStatus < 400 && httpStatus >= 100) {\n    return 'ok';\n  }\n\n  if (httpStatus >= 400 && httpStatus < 500) {\n    switch (httpStatus) {\n      case 401:\n        return 'unauthenticated';\n      case 403:\n        return 'permission_denied';\n      case 404:\n        return 'not_found';\n      case 409:\n        return 'already_exists';\n      case 413:\n        return 'failed_precondition';\n      case 429:\n        return 'resource_exhausted';\n      default:\n        return 'invalid_argument';\n    }\n  }\n\n  if (httpStatus >= 500 && httpStatus < 600) {\n    switch (httpStatus) {\n      case 501:\n        return 'unimplemented';\n      case 503:\n        return 'unavailable';\n      case 504:\n        return 'deadline_exceeded';\n      default:\n        return 'internal_error';\n    }\n  }\n\n  return 'unknown_error';\n}\n\n/**\n * Converts a HTTP status code into a {@link SpanStatusType}.\n *\n * @deprecated Use {@link spanStatusFromHttpCode} instead.\n * This export will be removed in v8 as the signature contains a typo.\n *\n * @param httpStatus The HTTP response status code.\n * @returns The span status or unknown_error.\n */\nexport const spanStatusfromHttpCode = getSpanStatusFromHttpCode;\n\n/**\n * Sets the Http status attributes on the current span based on the http code.\n * Additionally, the span's status is updated, depending on the http code.\n */\nexport function setHttpStatus(span: Span, httpStatus: number): void {\n  // TODO (v8): Remove these calls\n  // Relay does not require us to send the status code as a tag\n  // For now, just because users might expect it to land as a tag we keep sending it.\n  // Same with data.\n  // In v8, we replace both, simply with\n  // span.setAttribute('http.response.status_code', httpStatus);\n\n  // eslint-disable-next-line deprecation/deprecation\n  span.setTag('http.status_code', String(httpStatus));\n  // eslint-disable-next-line deprecation/deprecation\n  span.setData('http.response.status_code', httpStatus);\n\n  const spanStatus = getSpanStatusFromHttpCode(httpStatus);\n  if (spanStatus !== 'unknown_error') {\n    span.setStatus(spanStatus);\n  }\n}\n","/* eslint-disable max-lines */\nimport type {\n  Instrumenter,\n  Measurements,\n  Primitive,\n  Span as SpanInterface,\n  SpanAttributeValue,\n  SpanAttributes,\n  SpanContext,\n  SpanContextData,\n  SpanJSON,\n  SpanOrigin,\n  SpanTimeInput,\n  TraceContext,\n  Transaction,\n} from '@sentry/types';\nimport { dropUndefinedKeys, logger, timestampInSeconds, uuid4 } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../debug-build';\nimport { getMetricSummaryJsonForSpan } from '../metrics/metric-summary';\nimport {\n  SEMANTIC_ATTRIBUTE_PROFILE_ID,\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n} from '../semanticAttributes';\nimport { getRootSpan } from '../utils/getRootSpan';\nimport {\n  TRACE_FLAG_NONE,\n  TRACE_FLAG_SAMPLED,\n  spanTimeInputToSeconds,\n  spanToJSON,\n  spanToTraceContext,\n  spanToTraceHeader,\n} from '../utils/spanUtils';\nimport type { SpanStatusType } from './spanstatus';\nimport { setHttpStatus } from './spanstatus';\n\n/**\n * Keeps track of finished spans for a given transaction\n * @internal\n * @hideconstructor\n * @hidden\n */\nexport class SpanRecorder {\n  public spans: Span[];\n\n  private readonly _maxlen: number;\n\n  public constructor(maxlen: number = 1000) {\n    this._maxlen = maxlen;\n    this.spans = [];\n  }\n\n  /**\n   * This is just so that we don't run out of memory while recording a lot\n   * of spans. At some point we just stop and flush out the start of the\n   * trace tree (i.e.the first n spans with the smallest\n   * start_timestamp).\n   */\n  public add(span: Span): void {\n    if (this.spans.length > this._maxlen) {\n      // eslint-disable-next-line deprecation/deprecation\n      span.spanRecorder = undefined;\n    } else {\n      this.spans.push(span);\n    }\n  }\n}\n\n/**\n * Span contains all data about a span\n */\nexport class Span implements SpanInterface {\n  /**\n   * Tags for the span.\n   * @deprecated Use `spanToJSON(span).atttributes` instead.\n   */\n  public tags: { [key: string]: Primitive };\n\n  /**\n   * Data for the span.\n   * @deprecated Use `spanToJSON(span).atttributes` instead.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public data: { [key: string]: any };\n\n  /**\n   * List of spans that were finalized\n   *\n   * @deprecated This property will no longer be public. Span recording will be handled internally.\n   */\n  public spanRecorder?: SpanRecorder;\n\n  /**\n   * @inheritDoc\n   * @deprecated Use top level `Sentry.getRootSpan()` instead\n   */\n  public transaction?: Transaction;\n\n  /**\n   * The instrumenter that created this span.\n   *\n   * TODO (v8): This can probably be replaced by an `instanceOf` check of the span class.\n   *            the instrumenter can only be sentry or otel so we can check the span instance\n   *            to verify which one it is and remove this field entirely.\n   *\n   * @deprecated This field will be removed.\n   */\n  public instrumenter: Instrumenter;\n\n  protected _traceId: string;\n  protected _spanId: string;\n  protected _parentSpanId?: string | undefined;\n  protected _sampled: boolean | undefined;\n  protected _name?: string | undefined;\n  protected _attributes: SpanAttributes;\n  /** Epoch timestamp in seconds when the span started. */\n  protected _startTime: number;\n  /** Epoch timestamp in seconds when the span ended. */\n  protected _endTime?: number | undefined;\n  /** Internal keeper of the status */\n  protected _status?: SpanStatusType | string | undefined;\n  protected _exclusiveTime?: number;\n\n  protected _measurements: Measurements;\n\n  private _logMessage?: string;\n\n  /**\n   * You should never call the constructor manually, always use `Sentry.startTransaction()`\n   * or call `startChild()` on an existing span.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  public constructor(spanContext: SpanContext = {}) {\n    this._traceId = spanContext.traceId || uuid4();\n    this._spanId = spanContext.spanId || uuid4().substring(16);\n    this._startTime = spanContext.startTimestamp || timestampInSeconds();\n    // eslint-disable-next-line deprecation/deprecation\n    this.tags = spanContext.tags ? { ...spanContext.tags } : {};\n    // eslint-disable-next-line deprecation/deprecation\n    this.data = spanContext.data ? { ...spanContext.data } : {};\n    // eslint-disable-next-line deprecation/deprecation\n    this.instrumenter = spanContext.instrumenter || 'sentry';\n\n    this._attributes = {};\n    this.setAttributes({\n      [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: spanContext.origin || 'manual',\n      [SEMANTIC_ATTRIBUTE_SENTRY_OP]: spanContext.op,\n      ...spanContext.attributes,\n    });\n\n    // eslint-disable-next-line deprecation/deprecation\n    this._name = spanContext.name || spanContext.description;\n\n    if (spanContext.parentSpanId) {\n      this._parentSpanId = spanContext.parentSpanId;\n    }\n    // We want to include booleans as well here\n    if ('sampled' in spanContext) {\n      this._sampled = spanContext.sampled;\n    }\n    if (spanContext.status) {\n      this._status = spanContext.status;\n    }\n    if (spanContext.endTimestamp) {\n      this._endTime = spanContext.endTimestamp;\n    }\n    if (spanContext.exclusiveTime !== undefined) {\n      this._exclusiveTime = spanContext.exclusiveTime;\n    }\n    this._measurements = spanContext.measurements ? { ...spanContext.measurements } : {};\n  }\n\n  // This rule conflicts with another eslint rule :(\n  /* eslint-disable @typescript-eslint/member-ordering */\n\n  /**\n   * An alias for `description` of the Span.\n   * @deprecated Use `spanToJSON(span).description` instead.\n   */\n  public get name(): string {\n    return this._name || '';\n  }\n\n  /**\n   * Update the name of the span.\n   * @deprecated Use `spanToJSON(span).description` instead.\n   */\n  public set name(name: string) {\n    this.updateName(name);\n  }\n\n  /**\n   * Get the description of the Span.\n   * @deprecated Use `spanToJSON(span).description` instead.\n   */\n  public get description(): string | undefined {\n    return this._name;\n  }\n\n  /**\n   * Get the description of the Span.\n   * @deprecated Use `spanToJSON(span).description` instead.\n   */\n  public set description(description: string | undefined) {\n    this._name = description;\n  }\n\n  /**\n   * The ID of the trace.\n   * @deprecated Use `spanContext().traceId` instead.\n   */\n  public get traceId(): string {\n    return this._traceId;\n  }\n\n  /**\n   * The ID of the trace.\n   * @deprecated You cannot update the traceId of a span after span creation.\n   */\n  public set traceId(traceId: string) {\n    this._traceId = traceId;\n  }\n\n  /**\n   * The ID of the span.\n   * @deprecated Use `spanContext().spanId` instead.\n   */\n  public get spanId(): string {\n    return this._spanId;\n  }\n\n  /**\n   * The ID of the span.\n   * @deprecated You cannot update the spanId of a span after span creation.\n   */\n  public set spanId(spanId: string) {\n    this._spanId = spanId;\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `startSpan` functions instead.\n   */\n  public set parentSpanId(string) {\n    this._parentSpanId = string;\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `spanToJSON(span).parent_span_id` instead.\n   */\n  public get parentSpanId(): string | undefined {\n    return this._parentSpanId;\n  }\n\n  /**\n   * Was this span chosen to be sent as part of the sample?\n   * @deprecated Use `isRecording()` instead.\n   */\n  public get sampled(): boolean | undefined {\n    return this._sampled;\n  }\n\n  /**\n   * Was this span chosen to be sent as part of the sample?\n   * @deprecated You cannot update the sampling decision of a span after span creation.\n   */\n  public set sampled(sampled: boolean | undefined) {\n    this._sampled = sampled;\n  }\n\n  /**\n   * Attributes for the span.\n   * @deprecated Use `spanToJSON(span).atttributes` instead.\n   */\n  public get attributes(): SpanAttributes {\n    return this._attributes;\n  }\n\n  /**\n   * Attributes for the span.\n   * @deprecated Use `setAttributes()` instead.\n   */\n  public set attributes(attributes: SpanAttributes) {\n    this._attributes = attributes;\n  }\n\n  /**\n   * Timestamp in seconds (epoch time) indicating when the span started.\n   * @deprecated Use `spanToJSON()` instead.\n   */\n  public get startTimestamp(): number {\n    return this._startTime;\n  }\n\n  /**\n   * Timestamp in seconds (epoch time) indicating when the span started.\n   * @deprecated In v8, you will not be able to update the span start time after creation.\n   */\n  public set startTimestamp(startTime: number) {\n    this._startTime = startTime;\n  }\n\n  /**\n   * Timestamp in seconds when the span ended.\n   * @deprecated Use `spanToJSON()` instead.\n   */\n  public get endTimestamp(): number | undefined {\n    return this._endTime;\n  }\n\n  /**\n   * Timestamp in seconds when the span ended.\n   * @deprecated Set the end time via `span.end()` instead.\n   */\n  public set endTimestamp(endTime: number | undefined) {\n    this._endTime = endTime;\n  }\n\n  /**\n   * The status of the span.\n   *\n   * @deprecated Use `spanToJSON().status` instead to get the status.\n   */\n  public get status(): SpanStatusType | string | undefined {\n    return this._status;\n  }\n\n  /**\n   * The status of the span.\n   *\n   * @deprecated Use `.setStatus()` instead to set or update the status.\n   */\n  public set status(status: SpanStatusType | string | undefined) {\n    this._status = status;\n  }\n\n  /**\n   * Operation of the span\n   *\n   * @deprecated Use `spanToJSON().op` to read the op instead.\n   */\n  public get op(): string | undefined {\n    return this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_OP] as string | undefined;\n  }\n\n  /**\n   * Operation of the span\n   *\n   * @deprecated Use `startSpan()` functions to set or `span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'op')\n   *             to update the span instead.\n   */\n  public set op(op: string | undefined) {\n    this.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, op);\n  }\n\n  /**\n   * The origin of the span, giving context about what created the span.\n   *\n   * @deprecated Use `spanToJSON().origin` to read the origin instead.\n   */\n  public get origin(): SpanOrigin | undefined {\n    return this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN] as SpanOrigin | undefined;\n  }\n\n  /**\n   * The origin of the span, giving context about what created the span.\n   *\n   * @deprecated Use `startSpan()` functions to set the origin instead.\n   */\n  public set origin(origin: SpanOrigin | undefined) {\n    this.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, origin);\n  }\n\n  /* eslint-enable @typescript-eslint/member-ordering */\n\n  /** @inheritdoc */\n  public spanContext(): SpanContextData {\n    const { _spanId: spanId, _traceId: traceId, _sampled: sampled } = this;\n    return {\n      spanId,\n      traceId,\n      traceFlags: sampled ? TRACE_FLAG_SAMPLED : TRACE_FLAG_NONE,\n    };\n  }\n\n  /**\n   * Creates a new `Span` while setting the current `Span.id` as `parentSpanId`.\n   * Also the `sampled` decision will be inherited.\n   *\n   * @deprecated Use `startSpan()`, `startSpanManual()` or `startInactiveSpan()` instead.\n   */\n  public startChild(\n    spanContext?: Pick<SpanContext, Exclude<keyof SpanContext, 'sampled' | 'traceId' | 'parentSpanId'>>,\n  ): SpanInterface {\n    const childSpan = new Span({\n      ...spanContext,\n      parentSpanId: this._spanId,\n      sampled: this._sampled,\n      traceId: this._traceId,\n    });\n\n    // eslint-disable-next-line deprecation/deprecation\n    childSpan.spanRecorder = this.spanRecorder;\n    // eslint-disable-next-line deprecation/deprecation\n    if (childSpan.spanRecorder) {\n      // eslint-disable-next-line deprecation/deprecation\n      childSpan.spanRecorder.add(childSpan);\n    }\n\n    const rootSpan = getRootSpan(this);\n    // TODO: still set span.transaction here until we have a more permanent solution\n    // Probably similarly to the weakmap we hold in node-experimental\n    // eslint-disable-next-line deprecation/deprecation\n    childSpan.transaction = rootSpan as Transaction;\n\n    if (DEBUG_BUILD && rootSpan) {\n      const opStr = (spanContext && spanContext.op) || '< unknown op >';\n      const nameStr = spanToJSON(childSpan).description || '< unknown name >';\n      const idStr = rootSpan.spanContext().spanId;\n\n      const logMessage = `[Tracing] Starting '${opStr}' span on transaction '${nameStr}' (${idStr}).`;\n      logger.log(logMessage);\n      this._logMessage = logMessage;\n    }\n\n    return childSpan;\n  }\n\n  /**\n   * Sets the tag attribute on the current span.\n   *\n   * Can also be used to unset a tag, by passing `undefined`.\n   *\n   * @param key Tag key\n   * @param value Tag value\n   * @deprecated Use `setAttribute()` instead.\n   */\n  public setTag(key: string, value: Primitive): this {\n    // eslint-disable-next-line deprecation/deprecation\n    this.tags = { ...this.tags, [key]: value };\n    return this;\n  }\n\n  /**\n   * Sets the data attribute on the current span\n   * @param key Data key\n   * @param value Data value\n   * @deprecated Use `setAttribute()` instead.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public setData(key: string, value: any): this {\n    // eslint-disable-next-line deprecation/deprecation\n    this.data = { ...this.data, [key]: value };\n    return this;\n  }\n\n  /** @inheritdoc */\n  public setAttribute(key: string, value: SpanAttributeValue | undefined): void {\n    if (value === undefined) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._attributes[key];\n    } else {\n      this._attributes[key] = value;\n    }\n  }\n\n  /** @inheritdoc */\n  public setAttributes(attributes: SpanAttributes): void {\n    Object.keys(attributes).forEach(key => this.setAttribute(key, attributes[key]));\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setStatus(value: SpanStatusType): this {\n    this._status = value;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated Use top-level `setHttpStatus()` instead.\n   */\n  public setHttpStatus(httpStatus: number): this {\n    setHttpStatus(this, httpStatus);\n    return this;\n  }\n\n  /**\n   * @inheritdoc\n   *\n   * @deprecated Use `.updateName()` instead.\n   */\n  public setName(name: string): void {\n    this.updateName(name);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public updateName(name: string): this {\n    this._name = name;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `spanToJSON(span).status === 'ok'` instead.\n   */\n  public isSuccess(): boolean {\n    return this._status === 'ok';\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `.end()` instead.\n   */\n  public finish(endTimestamp?: number): void {\n    return this.end(endTimestamp);\n  }\n\n  /** @inheritdoc */\n  public end(endTimestamp?: SpanTimeInput): void {\n    // If already ended, skip\n    if (this._endTime) {\n      return;\n    }\n    const rootSpan = getRootSpan(this);\n    if (\n      DEBUG_BUILD &&\n      // Don't call this for transactions\n      rootSpan &&\n      rootSpan.spanContext().spanId !== this._spanId\n    ) {\n      const logMessage = this._logMessage;\n      if (logMessage) {\n        logger.log((logMessage as string).replace('Starting', 'Finishing'));\n      }\n    }\n\n    this._endTime = spanTimeInputToSeconds(endTimestamp);\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `spanToTraceHeader()` instead.\n   */\n  public toTraceparent(): string {\n    return spanToTraceHeader(this);\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `spanToJSON()` or access the fields directly instead.\n   */\n  public toContext(): SpanContext {\n    return dropUndefinedKeys({\n      data: this._getData(),\n      description: this._name,\n      endTimestamp: this._endTime,\n      // eslint-disable-next-line deprecation/deprecation\n      op: this.op,\n      parentSpanId: this._parentSpanId,\n      sampled: this._sampled,\n      spanId: this._spanId,\n      startTimestamp: this._startTime,\n      status: this._status,\n      // eslint-disable-next-line deprecation/deprecation\n      tags: this.tags,\n      traceId: this._traceId,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Update the fields directly instead.\n   */\n  public updateWithContext(spanContext: SpanContext): this {\n    // eslint-disable-next-line deprecation/deprecation\n    this.data = spanContext.data || {};\n    // eslint-disable-next-line deprecation/deprecation\n    this._name = spanContext.name || spanContext.description;\n    this._endTime = spanContext.endTimestamp;\n    // eslint-disable-next-line deprecation/deprecation\n    this.op = spanContext.op;\n    this._parentSpanId = spanContext.parentSpanId;\n    this._sampled = spanContext.sampled;\n    this._spanId = spanContext.spanId || this._spanId;\n    this._startTime = spanContext.startTimestamp || this._startTime;\n    this._status = spanContext.status;\n    // eslint-disable-next-line deprecation/deprecation\n    this.tags = spanContext.tags || {};\n    this._traceId = spanContext.traceId || this._traceId;\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use `spanToTraceContext()` util function instead.\n   */\n  public getTraceContext(): TraceContext {\n    return spanToTraceContext(this);\n  }\n\n  /**\n   * Get JSON representation of this span.\n   *\n   * @hidden\n   * @internal This method is purely for internal purposes and should not be used outside\n   * of SDK code. If you need to get a JSON representation of a span,\n   * use `spanToJSON(span)` instead.\n   */\n  public getSpanJSON(): SpanJSON {\n    return dropUndefinedKeys({\n      data: this._getData(),\n      description: this._name,\n      op: this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_OP] as string | undefined,\n      parent_span_id: this._parentSpanId,\n      span_id: this._spanId,\n      start_timestamp: this._startTime,\n      status: this._status,\n      // eslint-disable-next-line deprecation/deprecation\n      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n      timestamp: this._endTime,\n      trace_id: this._traceId,\n      origin: this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN] as SpanOrigin | undefined,\n      _metrics_summary: getMetricSummaryJsonForSpan(this),\n      profile_id: this._attributes[SEMANTIC_ATTRIBUTE_PROFILE_ID] as string | undefined,\n      exclusive_time: this._exclusiveTime,\n      measurements: Object.keys(this._measurements).length > 0 ? this._measurements : undefined,\n    });\n  }\n\n  /** @inheritdoc */\n  public isRecording(): boolean {\n    return !this._endTime && !!this._sampled;\n  }\n\n  /**\n   * Convert the object to JSON.\n   * @deprecated Use `spanToJSON(span)` instead.\n   */\n  public toJSON(): SpanJSON {\n    return this.getSpanJSON();\n  }\n\n  /**\n   * Get the merged data for this span.\n   * For now, this combines `data` and `attributes` together,\n   * until eventually we can ingest `attributes` directly.\n   */\n  private _getData():\n    | {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        [key: string]: any;\n      }\n    | undefined {\n    // eslint-disable-next-line deprecation/deprecation\n    const { data, _attributes: attributes } = this;\n\n    const hasData = Object.keys(data).length > 0;\n    const hasAttributes = Object.keys(attributes).length > 0;\n\n    if (!hasData && !hasAttributes) {\n      return undefined;\n    }\n\n    if (hasData && hasAttributes) {\n      return {\n        ...data,\n        ...attributes,\n      };\n    }\n\n    return hasData ? data : attributes;\n  }\n}\n","import type { Options } from '@sentry/types';\n\nimport { getClient } from '../exports';\n\n// Treeshakable guard to remove all code related to tracing\ndeclare const __SENTRY_TRACING__: boolean | undefined;\n\n/**\n * Determines if tracing is currently enabled.\n *\n * Tracing is enabled when at least one of `tracesSampleRate` and `tracesSampler` is defined in the SDK config.\n */\nexport function hasTracingEnabled(\n  maybeOptions?: Pick<Options, 'tracesSampleRate' | 'tracesSampler' | 'enableTracing'> | undefined,\n): boolean {\n  if (typeof __SENTRY_TRACING__ === 'boolean' && !__SENTRY_TRACING__) {\n    return false;\n  }\n\n  const client = getClient();\n  const options = maybeOptions || (client && client.getOptions());\n  return !!options && (options.enableTracing || 'tracesSampleRate' in options || 'tracesSampler' in options);\n}\n","import type { Scope, Span, SpanTimeInput, StartSpanOptions, TransactionContext } from '@sentry/types';\n\nimport { addNonEnumerableProperty, dropUndefinedKeys, logger, tracingContextFromHeaders } from '@sentry/utils';\nimport { getDynamicSamplingContextFromSpan } from '.';\n\nimport { DEBUG_BUILD } from '../debug-build';\nimport { getCurrentScope, withScope } from '../exports';\nimport type { Hub } from '../hub';\nimport { runWithAsyncContext } from '../hub';\nimport { getIsolationScope } from '../hub';\nimport { getCurrentHub } from '../hub';\nimport type { Scope as ScopeClass } from '../scope';\nimport { handleCallbackErrors } from '../utils/handleCallbackErrors';\nimport { hasTracingEnabled } from '../utils/hasTracingEnabled';\nimport { spanIsSampled, spanTimeInputToSeconds, spanToJSON } from '../utils/spanUtils';\n\n/**\n * Wraps a function with a transaction/span and finishes the span after the function is done.\n *\n * Note that if you have not enabled tracing extensions via `addTracingExtensions`\n * or you didn't set `tracesSampleRate`, this function will not generate spans\n * and the `span` returned from the callback will be undefined.\n *\n * This function is meant to be used internally and may break at any time. Use at your own risk.\n *\n * @internal\n * @private\n *\n * @deprecated Use `startSpan` instead.\n */\nexport function trace<T>(\n  context: TransactionContext,\n  callback: (span?: Span) => T,\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onError: (error: unknown, span?: Span) => void = () => {},\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  afterFinish: () => void = () => {},\n): T {\n  // eslint-disable-next-line deprecation/deprecation\n  const hub = getCurrentHub();\n  const scope = getCurrentScope();\n  // eslint-disable-next-line deprecation/deprecation\n  const parentSpan = scope.getSpan();\n\n  const spanContext = normalizeContext(context);\n  const activeSpan = createChildSpanOrTransaction(hub, {\n    parentSpan,\n    spanContext,\n    forceTransaction: false,\n    scope,\n  });\n\n  // eslint-disable-next-line deprecation/deprecation\n  scope.setSpan(activeSpan);\n\n  return handleCallbackErrors(\n    () => callback(activeSpan),\n    error => {\n      activeSpan && activeSpan.setStatus('internal_error');\n      onError(error, activeSpan);\n    },\n    () => {\n      activeSpan && activeSpan.end();\n      // eslint-disable-next-line deprecation/deprecation\n      scope.setSpan(parentSpan);\n      afterFinish();\n    },\n  );\n}\n\n/**\n * Wraps a function with a transaction/span and finishes the span after the function is done.\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getSpan()`, as long as the function is executed while the scope is active.\n *\n * If you want to create a span that is not set as active, use {@link startInactiveSpan}.\n *\n * Note that if you have not enabled tracing extensions via `addTracingExtensions`\n * or you didn't set `tracesSampleRate`, this function will not generate spans\n * and the `span` returned from the callback will be undefined.\n */\nexport function startSpan<T>(context: StartSpanOptions, callback: (span: Span | undefined) => T): T {\n  const spanContext = normalizeContext(context);\n\n  return runWithAsyncContext(() => {\n    return withScope(context.scope, scope => {\n      // eslint-disable-next-line deprecation/deprecation\n      const hub = getCurrentHub();\n      // eslint-disable-next-line deprecation/deprecation\n      const parentSpan = scope.getSpan();\n\n      const shouldSkipSpan = context.onlyIfParent && !parentSpan;\n      const activeSpan = shouldSkipSpan\n        ? undefined\n        : createChildSpanOrTransaction(hub, {\n            parentSpan,\n            spanContext,\n            forceTransaction: context.forceTransaction,\n            scope,\n          });\n\n      return handleCallbackErrors(\n        () => callback(activeSpan),\n        () => {\n          // Only update the span status if it hasn't been changed yet\n          if (activeSpan) {\n            const { status } = spanToJSON(activeSpan);\n            if (!status || status === 'ok') {\n              activeSpan.setStatus('internal_error');\n            }\n          }\n        },\n        () => activeSpan && activeSpan.end(),\n      );\n    });\n  });\n}\n\n/**\n * @deprecated Use {@link startSpan} instead.\n */\nexport const startActiveSpan = startSpan;\n\n/**\n * Similar to `Sentry.startSpan`. Wraps a function with a transaction/span, but does not finish the span\n * after the function is done automatically. You'll have to call `span.end()` manually.\n *\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * Note that if you have not enabled tracing extensions via `addTracingExtensions`\n * or you didn't set `tracesSampleRate`, this function will not generate spans\n * and the `span` returned from the callback will be undefined.\n */\nexport function startSpanManual<T>(\n  context: StartSpanOptions,\n  callback: (span: Span | undefined, finish: () => void) => T,\n): T {\n  const spanContext = normalizeContext(context);\n\n  return runWithAsyncContext(() => {\n    return withScope(context.scope, scope => {\n      // eslint-disable-next-line deprecation/deprecation\n      const hub = getCurrentHub();\n      // eslint-disable-next-line deprecation/deprecation\n      const parentSpan = scope.getSpan();\n\n      const shouldSkipSpan = context.onlyIfParent && !parentSpan;\n      const activeSpan = shouldSkipSpan\n        ? undefined\n        : createChildSpanOrTransaction(hub, {\n            parentSpan,\n            spanContext,\n            forceTransaction: context.forceTransaction,\n            scope,\n          });\n\n      function finishAndSetSpan(): void {\n        activeSpan && activeSpan.end();\n      }\n\n      return handleCallbackErrors(\n        () => callback(activeSpan, finishAndSetSpan),\n        () => {\n          // Only update the span status if it hasn't been changed yet, and the span is not yet finished\n          if (activeSpan && activeSpan.isRecording()) {\n            const { status } = spanToJSON(activeSpan);\n            if (!status || status === 'ok') {\n              activeSpan.setStatus('internal_error');\n            }\n          }\n        },\n      );\n    });\n  });\n}\n\n/**\n * Creates a span. This span is not set as active, so will not get automatic instrumentation spans\n * as children or be able to be accessed via `Sentry.getSpan()`.\n *\n * If you want to create a span that is set as active, use {@link startSpan}.\n *\n * Note that if you have not enabled tracing extensions via `addTracingExtensions`\n * or you didn't set `tracesSampleRate` or `tracesSampler`, this function will not generate spans\n * and the `span` returned from the callback will be undefined.\n */\nexport function startInactiveSpan(context: StartSpanOptions): Span | undefined {\n  if (!hasTracingEnabled()) {\n    return undefined;\n  }\n\n  const spanContext = normalizeContext(context);\n  // eslint-disable-next-line deprecation/deprecation\n  const hub = getCurrentHub();\n  const parentSpan = context.scope\n    ? // eslint-disable-next-line deprecation/deprecation\n      context.scope.getSpan()\n    : getActiveSpan();\n\n  const shouldSkipSpan = context.onlyIfParent && !parentSpan;\n\n  if (shouldSkipSpan) {\n    return undefined;\n  }\n\n  const scope = context.scope || getCurrentScope();\n\n  // Even though we don't actually want to make this span active on the current scope,\n  // we need to make it active on a temporary scope that we use for event processing\n  // as otherwise, it won't pick the correct span for the event when processing it\n  const temporaryScope = (scope as ScopeClass).clone();\n\n  return createChildSpanOrTransaction(hub, {\n    parentSpan,\n    spanContext,\n    forceTransaction: context.forceTransaction,\n    scope: temporaryScope,\n  });\n}\n\n/**\n * Returns the currently active span.\n */\nexport function getActiveSpan(): Span | undefined {\n  // eslint-disable-next-line deprecation/deprecation\n  return getCurrentScope().getSpan();\n}\n\ninterface ContinueTrace {\n  /**\n   * Continue a trace from `sentry-trace` and `baggage` values.\n   * These values can be obtained from incoming request headers,\n   * or in the browser from `<meta name=\"sentry-trace\">` and `<meta name=\"baggage\">` HTML tags.\n   *\n   * @deprecated Use the version of this function taking a callback as second parameter instead:\n   *\n   * ```\n   * Sentry.continueTrace(sentryTrace: '...', baggage: '...' }, () => {\n   *    // ...\n   * })\n   * ```\n   *\n   */\n  ({\n    sentryTrace,\n    baggage,\n  }: {\n    // eslint-disable-next-line deprecation/deprecation\n    sentryTrace: Parameters<typeof tracingContextFromHeaders>[0];\n    // eslint-disable-next-line deprecation/deprecation\n    baggage: Parameters<typeof tracingContextFromHeaders>[1];\n  }): Partial<TransactionContext>;\n\n  /**\n   * Continue a trace from `sentry-trace` and `baggage` values.\n   * These values can be obtained from incoming request headers, or in the browser from `<meta name=\"sentry-trace\">`\n   * and `<meta name=\"baggage\">` HTML tags.\n   *\n   * Spans started with `startSpan`, `startSpanManual` and `startInactiveSpan`, within the callback will automatically\n   * be attached to the incoming trace.\n   *\n   * Deprecation notice: In the next major version of the SDK the provided callback will not receive a transaction\n   * context argument.\n   */\n  <V>(\n    {\n      sentryTrace,\n      baggage,\n    }: {\n      // eslint-disable-next-line deprecation/deprecation\n      sentryTrace: Parameters<typeof tracingContextFromHeaders>[0];\n      // eslint-disable-next-line deprecation/deprecation\n      baggage: Parameters<typeof tracingContextFromHeaders>[1];\n    },\n    // TODO(v8): Remove parameter from this callback.\n    callback: (transactionContext: Partial<TransactionContext>) => V,\n  ): V;\n}\n\nexport const continueTrace: ContinueTrace = <V>(\n  {\n    sentryTrace,\n    baggage,\n  }: {\n    // eslint-disable-next-line deprecation/deprecation\n    sentryTrace: Parameters<typeof tracingContextFromHeaders>[0];\n    // eslint-disable-next-line deprecation/deprecation\n    baggage: Parameters<typeof tracingContextFromHeaders>[1];\n  },\n  callback?: (transactionContext: Partial<TransactionContext>) => V,\n): V | Partial<TransactionContext> => {\n  // TODO(v8): Change this function so it doesn't do anything besides setting the propagation context on the current scope:\n  /*\n    return withScope((scope) => {\n      const propagationContext = propagationContextFromHeaders(sentryTrace, baggage);\n      scope.setPropagationContext(propagationContext);\n      return callback();\n    })\n  */\n\n  const currentScope = getCurrentScope();\n\n  // eslint-disable-next-line deprecation/deprecation\n  const { traceparentData, dynamicSamplingContext, propagationContext } = tracingContextFromHeaders(\n    sentryTrace,\n    baggage,\n  );\n\n  currentScope.setPropagationContext(propagationContext);\n\n  if (DEBUG_BUILD && traceparentData) {\n    logger.log(`[Tracing] Continuing trace ${traceparentData.traceId}.`);\n  }\n\n  const transactionContext: Partial<TransactionContext> = {\n    ...traceparentData,\n    metadata: dropUndefinedKeys({\n      dynamicSamplingContext,\n    }),\n  };\n\n  if (!callback) {\n    return transactionContext;\n  }\n\n  return runWithAsyncContext(() => {\n    return callback(transactionContext);\n  });\n};\n\nfunction createChildSpanOrTransaction(\n  // eslint-disable-next-line deprecation/deprecation\n  hub: Hub,\n  {\n    parentSpan,\n    spanContext,\n    forceTransaction,\n    scope,\n  }: {\n    parentSpan: Span | undefined;\n    spanContext: TransactionContext;\n    forceTransaction?: boolean;\n    scope: Scope;\n  },\n): Span | undefined {\n  if (!hasTracingEnabled()) {\n    return undefined;\n  }\n\n  const isolationScope = getIsolationScope();\n\n  let span: Span | undefined;\n  if (parentSpan && !forceTransaction) {\n    // eslint-disable-next-line deprecation/deprecation\n    span = parentSpan.startChild(spanContext);\n  } else if (parentSpan) {\n    // If we forced a transaction but have a parent span, make sure to continue from the parent span, not the scope\n    const dsc = getDynamicSamplingContextFromSpan(parentSpan);\n    const { traceId, spanId: parentSpanId } = parentSpan.spanContext();\n    const sampled = spanIsSampled(parentSpan);\n\n    // eslint-disable-next-line deprecation/deprecation\n    span = hub.startTransaction({\n      traceId,\n      parentSpanId,\n      parentSampled: sampled,\n      ...spanContext,\n      metadata: {\n        dynamicSamplingContext: dsc,\n        // eslint-disable-next-line deprecation/deprecation\n        ...spanContext.metadata,\n      },\n    });\n  } else {\n    const { traceId, dsc, parentSpanId, sampled } = {\n      ...isolationScope.getPropagationContext(),\n      ...scope.getPropagationContext(),\n    };\n\n    // eslint-disable-next-line deprecation/deprecation\n    span = hub.startTransaction({\n      traceId,\n      parentSpanId,\n      parentSampled: sampled,\n      ...spanContext,\n      metadata: {\n        dynamicSamplingContext: dsc,\n        // eslint-disable-next-line deprecation/deprecation\n        ...spanContext.metadata,\n      },\n    });\n  }\n\n  // We always set this as active span on the scope\n  // In the case of this being an inactive span, we ensure to pass a detached scope in here in the first place\n  // But by having this here, we can ensure that the lookup through `getCapturedScopesOnSpan` results in the correct scope & span combo\n  // eslint-disable-next-line deprecation/deprecation\n  scope.setSpan(span);\n\n  setCapturedScopesOnSpan(span, scope, isolationScope);\n\n  return span;\n}\n\n/**\n * This converts StartSpanOptions to TransactionContext.\n * For the most part (for now) we accept the same options,\n * but some of them need to be transformed.\n *\n * Eventually the StartSpanOptions will be more aligned with OpenTelemetry.\n */\nfunction normalizeContext(context: StartSpanOptions): TransactionContext {\n  if (context.startTime) {\n    const ctx: TransactionContext & { startTime?: SpanTimeInput } = { ...context };\n    ctx.startTimestamp = spanTimeInputToSeconds(context.startTime);\n    delete ctx.startTime;\n    return ctx;\n  }\n\n  return context;\n}\n\nconst SCOPE_ON_START_SPAN_FIELD = '_sentryScope';\nconst ISOLATION_SCOPE_ON_START_SPAN_FIELD = '_sentryIsolationScope';\n\ntype SpanWithScopes = Span & {\n  [SCOPE_ON_START_SPAN_FIELD]?: Scope;\n  [ISOLATION_SCOPE_ON_START_SPAN_FIELD]?: Scope;\n};\n\nfunction setCapturedScopesOnSpan(span: Span | undefined, scope: Scope, isolationScope: Scope): void {\n  if (span) {\n    addNonEnumerableProperty(span, ISOLATION_SCOPE_ON_START_SPAN_FIELD, isolationScope);\n    addNonEnumerableProperty(span, SCOPE_ON_START_SPAN_FIELD, scope);\n  }\n}\n\n/**\n * Grabs the scope and isolation scope off a span that were active when the span was started.\n */\nexport function getCapturedScopesOnSpan(span: Span): { scope?: Scope; isolationScope?: Scope } {\n  return {\n    scope: (span as SpanWithScopes)[SCOPE_ON_START_SPAN_FIELD],\n    isolationScope: (span as SpanWithScopes)[ISOLATION_SCOPE_ON_START_SPAN_FIELD],\n  };\n}\n","import type {\n  Context,\n  Contexts,\n  DynamicSamplingContext,\n  MeasurementUnit,\n  SpanTimeInput,\n  Transaction as TransactionInterface,\n  TransactionContext,\n  TransactionEvent,\n  TransactionMetadata,\n} from '@sentry/types';\nimport { dropUndefinedKeys, logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { Hub } from '../hub';\nimport { getCurrentHub } from '../hub';\nimport { getMetricSummaryJsonForSpan } from '../metrics/metric-summary';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE, SEMANTIC_ATTRIBUTE_SENTRY_SOURCE } from '../semanticAttributes';\nimport { spanTimeInputToSeconds, spanToJSON, spanToTraceContext } from '../utils/spanUtils';\nimport { getDynamicSamplingContextFromSpan } from './dynamicSamplingContext';\nimport { Span as SpanClass, SpanRecorder } from './span';\nimport { getCapturedScopesOnSpan } from './trace';\n\n/** JSDoc */\nexport class Transaction extends SpanClass implements TransactionInterface {\n  /**\n   * The reference to the current hub.\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  public _hub: Hub;\n\n  protected _name: string;\n\n  private _contexts: Contexts;\n\n  private _trimEnd?: boolean | undefined;\n\n  // DO NOT yet remove this property, it is used in a hack for v7 backwards compatibility.\n  private _frozenDynamicSamplingContext: Readonly<Partial<DynamicSamplingContext>> | undefined;\n\n  private _metadata: Partial<TransactionMetadata>;\n\n  /**\n   * This constructor should never be called manually. Those instrumenting tracing should use\n   * `Sentry.startTransaction()`, and internal methods should use `hub.startTransaction()`.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   *\n   * @deprecated Transactions will be removed in v8. Use spans instead.\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  public constructor(transactionContext: TransactionContext, hub?: Hub) {\n    super(transactionContext);\n    this._contexts = {};\n\n    // eslint-disable-next-line deprecation/deprecation\n    this._hub = hub || getCurrentHub();\n\n    this._name = transactionContext.name || '';\n\n    this._metadata = {\n      // eslint-disable-next-line deprecation/deprecation\n      ...transactionContext.metadata,\n    };\n\n    this._trimEnd = transactionContext.trimEnd;\n\n    // this is because transactions are also spans, and spans have a transaction pointer\n    // TODO (v8): Replace this with another way to set the root span\n    // eslint-disable-next-line deprecation/deprecation\n    this.transaction = this;\n\n    // If Dynamic Sampling Context is provided during the creation of the transaction, we freeze it as it usually means\n    // there is incoming Dynamic Sampling Context. (Either through an incoming request, a baggage meta-tag, or other means)\n    const incomingDynamicSamplingContext = this._metadata.dynamicSamplingContext;\n    if (incomingDynamicSamplingContext) {\n      // We shallow copy this in case anything writes to the original reference of the passed in `dynamicSamplingContext`\n      this._frozenDynamicSamplingContext = { ...incomingDynamicSamplingContext };\n    }\n  }\n\n  // This sadly conflicts with the getter/setter ordering :(\n  /* eslint-disable @typescript-eslint/member-ordering */\n\n  /**\n   * Getter for `name` property.\n   * @deprecated Use `spanToJSON(span).description` instead.\n   */\n  public get name(): string {\n    return this._name;\n  }\n\n  /**\n   * Setter for `name` property, which also sets `source` as custom.\n   * @deprecated Use `updateName()` and `setMetadata()` instead.\n   */\n  public set name(newName: string) {\n    // eslint-disable-next-line deprecation/deprecation\n    this.setName(newName);\n  }\n\n  /**\n   * Get the metadata for this transaction.\n   * @deprecated Use `spanGetMetadata(transaction)` instead.\n   */\n  public get metadata(): TransactionMetadata {\n    // We merge attributes in for backwards compatibility\n    return {\n      // Defaults\n      // eslint-disable-next-line deprecation/deprecation\n      source: 'custom',\n      spanMetadata: {},\n\n      // Legacy metadata\n      ...this._metadata,\n\n      // From attributes\n      ...(this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] && {\n        source: this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] as TransactionMetadata['source'],\n      }),\n      ...(this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE] && {\n        sampleRate: this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE] as TransactionMetadata['sampleRate'],\n      }),\n    };\n  }\n\n  /**\n   * Update the metadata for this transaction.\n   * @deprecated Use `spanGetMetadata(transaction)` instead.\n   */\n  public set metadata(metadata: TransactionMetadata) {\n    this._metadata = metadata;\n  }\n\n  /* eslint-enable @typescript-eslint/member-ordering */\n\n  /**\n   * Setter for `name` property, which also sets `source` on the metadata.\n   *\n   * @deprecated Use `.updateName()` and `.setAttribute()` instead.\n   */\n  public setName(name: string, source: TransactionMetadata['source'] = 'custom'): void {\n    this._name = name;\n    this.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, source);\n  }\n\n  /** @inheritdoc */\n  public updateName(name: string): this {\n    this._name = name;\n    return this;\n  }\n\n  /**\n   * Attaches SpanRecorder to the span itself\n   * @param maxlen maximum number of spans that can be recorded\n   */\n  public initSpanRecorder(maxlen: number = 1000): void {\n    // eslint-disable-next-line deprecation/deprecation\n    if (!this.spanRecorder) {\n      // eslint-disable-next-line deprecation/deprecation\n      this.spanRecorder = new SpanRecorder(maxlen);\n    }\n    // eslint-disable-next-line deprecation/deprecation\n    this.spanRecorder.add(this);\n  }\n\n  /**\n   * Set the context of a transaction event.\n   * @deprecated Use either `.setAttribute()`, or set the context on the scope before creating the transaction.\n   */\n  public setContext(key: string, context: Context | null): void {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts[key] = context;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   *\n   * @deprecated Use top-level `setMeasurement()` instead.\n   */\n  public setMeasurement(name: string, value: number, unit: MeasurementUnit = ''): void {\n    this._measurements[name] = { value, unit };\n  }\n\n  /**\n   * Store metadata on this transaction.\n   * @deprecated Use attributes or store data on the scope instead.\n   */\n  public setMetadata(newMetadata: Partial<TransactionMetadata>): void {\n    this._metadata = { ...this._metadata, ...newMetadata };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public end(endTimestamp?: SpanTimeInput): string | undefined {\n    const timestampInS = spanTimeInputToSeconds(endTimestamp);\n    const transaction = this._finishTransaction(timestampInS);\n    if (!transaction) {\n      return undefined;\n    }\n    // eslint-disable-next-line deprecation/deprecation\n    return this._hub.captureEvent(transaction);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toContext(): TransactionContext {\n    // eslint-disable-next-line deprecation/deprecation\n    const spanContext = super.toContext();\n\n    return dropUndefinedKeys({\n      ...spanContext,\n      name: this._name,\n      trimEnd: this._trimEnd,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public updateWithContext(transactionContext: TransactionContext): this {\n    // eslint-disable-next-line deprecation/deprecation\n    super.updateWithContext(transactionContext);\n\n    this._name = transactionContext.name || '';\n    this._trimEnd = transactionContext.trimEnd;\n\n    return this;\n  }\n\n  /**\n   * @inheritdoc\n   *\n   * @experimental\n   *\n   * @deprecated Use top-level `getDynamicSamplingContextFromSpan` instead.\n   */\n  public getDynamicSamplingContext(): Readonly<Partial<DynamicSamplingContext>> {\n    return getDynamicSamplingContextFromSpan(this);\n  }\n\n  /**\n   * Override the current hub with a new one.\n   * Used if you want another hub to finish the transaction.\n   *\n   * @internal\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  public setHub(hub: Hub): void {\n    this._hub = hub;\n  }\n\n  /**\n   * Get the profile id of the transaction.\n   */\n  public getProfileId(): string | undefined {\n    if (this._contexts !== undefined && this._contexts['profile'] !== undefined) {\n      return this._contexts['profile'].profile_id as string;\n    }\n    return undefined;\n  }\n\n  /**\n   * Finish the transaction & prepare the event to send to Sentry.\n   */\n  protected _finishTransaction(endTimestamp?: number): TransactionEvent | undefined {\n    // This transaction is already finished, so we should not flush it again.\n    if (this._endTime !== undefined) {\n      return undefined;\n    }\n\n    if (!this._name) {\n      DEBUG_BUILD && logger.warn('Transaction has no name, falling back to `<unlabeled transaction>`.');\n      this._name = '<unlabeled transaction>';\n    }\n\n    // just sets the end timestamp\n    super.end(endTimestamp);\n\n    // eslint-disable-next-line deprecation/deprecation\n    const client = this._hub.getClient();\n    if (client && client.emit) {\n      client.emit('finishTransaction', this);\n    }\n\n    if (this._sampled !== true) {\n      // At this point if `sampled !== true` we want to discard the transaction.\n      DEBUG_BUILD && logger.log('[Tracing] Discarding transaction because its trace was not chosen to be sampled.');\n\n      if (client) {\n        client.recordDroppedEvent('sample_rate', 'transaction');\n      }\n\n      return undefined;\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    const finishedSpans = this.spanRecorder\n      ? // eslint-disable-next-line deprecation/deprecation\n        this.spanRecorder.spans.filter(span => span !== this && spanToJSON(span).timestamp)\n      : [];\n\n    if (this._trimEnd && finishedSpans.length > 0) {\n      const endTimes = finishedSpans.map(span => spanToJSON(span).timestamp).filter(Boolean) as number[];\n      this._endTime = endTimes.reduce((prev, current) => {\n        return prev > current ? prev : current;\n      });\n    }\n\n    const { scope: capturedSpanScope, isolationScope: capturedSpanIsolationScope } = getCapturedScopesOnSpan(this);\n\n    // eslint-disable-next-line deprecation/deprecation\n    const { metadata } = this;\n    // eslint-disable-next-line deprecation/deprecation\n    const { source } = metadata;\n\n    const transaction: TransactionEvent = {\n      contexts: {\n        ...this._contexts,\n        // We don't want to override trace context\n        trace: spanToTraceContext(this),\n      },\n      // TODO: Pass spans serialized via `spanToJSON()` here instead in v8.\n      spans: finishedSpans,\n      start_timestamp: this._startTime,\n      // eslint-disable-next-line deprecation/deprecation\n      tags: this.tags,\n      timestamp: this._endTime,\n      transaction: this._name,\n      type: 'transaction',\n      sdkProcessingMetadata: {\n        ...metadata,\n        capturedSpanScope,\n        capturedSpanIsolationScope,\n        ...dropUndefinedKeys({\n          dynamicSamplingContext: getDynamicSamplingContextFromSpan(this),\n        }),\n      },\n      _metrics_summary: getMetricSummaryJsonForSpan(this),\n      ...(source && {\n        transaction_info: {\n          source,\n        },\n      }),\n    };\n\n    const hasMeasurements = Object.keys(this._measurements).length > 0;\n\n    if (hasMeasurements) {\n      DEBUG_BUILD &&\n        logger.log(\n          '[Measurements] Adding measurements to transaction',\n          JSON.stringify(this._measurements, undefined, 2),\n        );\n      transaction.measurements = this._measurements;\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    DEBUG_BUILD && logger.log(`[Tracing] Finishing ${this.op} transaction: ${this._name}.`);\n\n    return transaction;\n  }\n}\n","/* eslint-disable max-lines */\nimport type { SpanTimeInput, TransactionContext } from '@sentry/types';\nimport { logger, timestampInSeconds } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { Hub } from '../hub';\nimport { spanTimeInputToSeconds, spanToJSON } from '../utils/spanUtils';\nimport type { Span } from './span';\nimport { SpanRecorder } from './span';\nimport { Transaction } from './transaction';\n\nexport const TRACING_DEFAULTS = {\n  idleTimeout: 1000,\n  finalTimeout: 30000,\n  heartbeatInterval: 5000,\n};\n\nconst FINISH_REASON_TAG = 'finishReason';\n\nconst IDLE_TRANSACTION_FINISH_REASONS = [\n  'heartbeatFailed',\n  'idleTimeout',\n  'documentHidden',\n  'finalTimeout',\n  'externalFinish',\n  'cancelled',\n];\n\n/**\n * @inheritDoc\n */\nexport class IdleTransactionSpanRecorder extends SpanRecorder {\n  public constructor(\n    private readonly _pushActivity: (id: string) => void,\n    private readonly _popActivity: (id: string) => void,\n    public transactionSpanId: string,\n    maxlen?: number,\n  ) {\n    super(maxlen);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public add(span: Span): void {\n    // We should make sure we do not push and pop activities for\n    // the transaction that this span recorder belongs to.\n    if (span.spanContext().spanId !== this.transactionSpanId) {\n      // We patch span.end() to pop an activity after setting an endTimestamp.\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      const originalEnd = span.end;\n      span.end = (...rest: unknown[]) => {\n        this._popActivity(span.spanContext().spanId);\n        return originalEnd.apply(span, rest);\n      };\n\n      // We should only push new activities if the span does not have an end timestamp.\n      if (spanToJSON(span).timestamp === undefined) {\n        this._pushActivity(span.spanContext().spanId);\n      }\n    }\n\n    super.add(span);\n  }\n}\n\nexport type BeforeFinishCallback = (transactionSpan: IdleTransaction, endTimestamp: number) => void;\n\n/**\n * An IdleTransaction is a transaction that automatically finishes. It does this by tracking child spans as activities.\n * You can have multiple IdleTransactions active, but if the `onScope` option is specified, the idle transaction will\n * put itself on the scope on creation.\n */\nexport class IdleTransaction extends Transaction {\n  // Activities store a list of active spans\n  public activities: Record<string, boolean>;\n  // Track state of activities in previous heartbeat\n  private _prevHeartbeatString: string | undefined;\n\n  // Amount of times heartbeat has counted. Will cause transaction to finish after 3 beats.\n  private _heartbeatCounter: number;\n\n  // We should not use heartbeat if we finished a transaction\n  private _finished: boolean;\n\n  // Idle timeout was canceled and we should finish the transaction with the last span end.\n  private _idleTimeoutCanceledPermanently: boolean;\n\n  private readonly _beforeFinishCallbacks: BeforeFinishCallback[];\n\n  /**\n   * Timer that tracks Transaction idleTimeout\n   */\n  private _idleTimeoutID: ReturnType<typeof setTimeout> | undefined;\n\n  private _finishReason: (typeof IDLE_TRANSACTION_FINISH_REASONS)[number];\n\n  private _autoFinishAllowed: boolean;\n\n  /**\n   * @deprecated Transactions will be removed in v8. Use spans instead.\n   */\n  public constructor(\n    transactionContext: TransactionContext,\n    // eslint-disable-next-line deprecation/deprecation\n    private readonly _idleHub: Hub,\n    /**\n     * The time to wait in ms until the idle transaction will be finished. This timer is started each time\n     * there are no active spans on this transaction.\n     */\n    private readonly _idleTimeout: number = TRACING_DEFAULTS.idleTimeout,\n    /**\n     * The final value in ms that a transaction cannot exceed\n     */\n    private readonly _finalTimeout: number = TRACING_DEFAULTS.finalTimeout,\n    private readonly _heartbeatInterval: number = TRACING_DEFAULTS.heartbeatInterval,\n    // Whether or not the transaction should put itself on the scope when it starts and pop itself off when it ends\n    private readonly _onScope: boolean = false,\n    /**\n     * When set to `true`, will disable the idle timeout (`_idleTimeout` option) and heartbeat mechanisms (`_heartbeatInterval`\n     * option) until the `sendAutoFinishSignal()` method is called. The final timeout mechanism (`_finalTimeout` option)\n     * will not be affected by this option, meaning the transaction will definitely be finished when the final timeout is\n     * reached, no matter what this option is configured to.\n     *\n     * Defaults to `false`.\n     */\n    delayAutoFinishUntilSignal: boolean = false,\n  ) {\n    super(transactionContext, _idleHub);\n\n    this.activities = {};\n    this._heartbeatCounter = 0;\n    this._finished = false;\n    this._idleTimeoutCanceledPermanently = false;\n    this._beforeFinishCallbacks = [];\n    this._finishReason = IDLE_TRANSACTION_FINISH_REASONS[4];\n    this._autoFinishAllowed = !delayAutoFinishUntilSignal;\n\n    if (_onScope) {\n      // We set the transaction here on the scope so error events pick up the trace\n      // context and attach it to the error.\n      DEBUG_BUILD && logger.log(`Setting idle transaction on scope. Span ID: ${this.spanContext().spanId}`);\n      // eslint-disable-next-line deprecation/deprecation\n      _idleHub.getScope().setSpan(this);\n    }\n\n    if (!delayAutoFinishUntilSignal) {\n      this._restartIdleTimeout();\n    }\n\n    setTimeout(() => {\n      if (!this._finished) {\n        this.setStatus('deadline_exceeded');\n        this._finishReason = IDLE_TRANSACTION_FINISH_REASONS[3];\n        this.end();\n      }\n    }, this._finalTimeout);\n  }\n\n  /** {@inheritDoc} */\n  public end(endTimestamp?: SpanTimeInput): string | undefined {\n    const endTimestampInS = spanTimeInputToSeconds(endTimestamp);\n\n    this._finished = true;\n    this.activities = {};\n\n    // eslint-disable-next-line deprecation/deprecation\n    if (this.op === 'ui.action.click') {\n      this.setAttribute(FINISH_REASON_TAG, this._finishReason);\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    if (this.spanRecorder) {\n      DEBUG_BUILD &&\n        // eslint-disable-next-line deprecation/deprecation\n        logger.log('[Tracing] finishing IdleTransaction', new Date(endTimestampInS * 1000).toISOString(), this.op);\n\n      for (const callback of this._beforeFinishCallbacks) {\n        callback(this, endTimestampInS);\n      }\n\n      // eslint-disable-next-line deprecation/deprecation\n      this.spanRecorder.spans = this.spanRecorder.spans.filter((span: Span) => {\n        // If we are dealing with the transaction itself, we just return it\n        if (span.spanContext().spanId === this.spanContext().spanId) {\n          return true;\n        }\n\n        // We cancel all pending spans with status \"cancelled\" to indicate the idle transaction was finished early\n        if (!spanToJSON(span).timestamp) {\n          span.setStatus('cancelled');\n          span.end(endTimestampInS);\n          DEBUG_BUILD &&\n            logger.log('[Tracing] cancelling span since transaction ended early', JSON.stringify(span, undefined, 2));\n        }\n\n        const { start_timestamp: startTime, timestamp: endTime } = spanToJSON(span);\n        const spanStartedBeforeTransactionFinish = startTime && startTime < endTimestampInS;\n\n        // Add a delta with idle timeout so that we prevent false positives\n        const timeoutWithMarginOfError = (this._finalTimeout + this._idleTimeout) / 1000;\n        const spanEndedBeforeFinalTimeout = endTime && startTime && endTime - startTime < timeoutWithMarginOfError;\n\n        if (DEBUG_BUILD) {\n          const stringifiedSpan = JSON.stringify(span, undefined, 2);\n          if (!spanStartedBeforeTransactionFinish) {\n            logger.log('[Tracing] discarding Span since it happened after Transaction was finished', stringifiedSpan);\n          } else if (!spanEndedBeforeFinalTimeout) {\n            logger.log('[Tracing] discarding Span since it finished after Transaction final timeout', stringifiedSpan);\n          }\n        }\n\n        return spanStartedBeforeTransactionFinish && spanEndedBeforeFinalTimeout;\n      });\n\n      DEBUG_BUILD && logger.log('[Tracing] flushing IdleTransaction');\n    } else {\n      DEBUG_BUILD && logger.log('[Tracing] No active IdleTransaction');\n    }\n\n    // if `this._onScope` is `true`, the transaction put itself on the scope when it started\n    if (this._onScope) {\n      // eslint-disable-next-line deprecation/deprecation\n      const scope = this._idleHub.getScope();\n      // eslint-disable-next-line deprecation/deprecation\n      if (scope.getTransaction() === this) {\n        // eslint-disable-next-line deprecation/deprecation\n        scope.setSpan(undefined);\n      }\n    }\n\n    return super.end(endTimestamp);\n  }\n\n  /**\n   * Register a callback function that gets executed before the transaction finishes.\n   * Useful for cleanup or if you want to add any additional spans based on current context.\n   *\n   * This is exposed because users have no other way of running something before an idle transaction\n   * finishes.\n   */\n  public registerBeforeFinishCallback(callback: BeforeFinishCallback): void {\n    this._beforeFinishCallbacks.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public initSpanRecorder(maxlen?: number): void {\n    // eslint-disable-next-line deprecation/deprecation\n    if (!this.spanRecorder) {\n      const pushActivity = (id: string): void => {\n        if (this._finished) {\n          return;\n        }\n        this._pushActivity(id);\n      };\n      const popActivity = (id: string): void => {\n        if (this._finished) {\n          return;\n        }\n        this._popActivity(id);\n      };\n\n      // eslint-disable-next-line deprecation/deprecation\n      this.spanRecorder = new IdleTransactionSpanRecorder(pushActivity, popActivity, this.spanContext().spanId, maxlen);\n\n      // Start heartbeat so that transactions do not run forever.\n      DEBUG_BUILD && logger.log('Starting heartbeat');\n      this._pingHeartbeat();\n    }\n    // eslint-disable-next-line deprecation/deprecation\n    this.spanRecorder.add(this);\n  }\n\n  /**\n   * Cancels the existing idle timeout, if there is one.\n   * @param restartOnChildSpanChange Default is `true`.\n   *                                 If set to false the transaction will end\n   *                                 with the last child span.\n   */\n  public cancelIdleTimeout(\n    endTimestamp?: Parameters<IdleTransaction['end']>[0],\n    {\n      restartOnChildSpanChange,\n    }: {\n      restartOnChildSpanChange?: boolean;\n    } = {\n      restartOnChildSpanChange: true,\n    },\n  ): void {\n    this._idleTimeoutCanceledPermanently = restartOnChildSpanChange === false;\n    if (this._idleTimeoutID) {\n      clearTimeout(this._idleTimeoutID);\n      this._idleTimeoutID = undefined;\n\n      if (Object.keys(this.activities).length === 0 && this._idleTimeoutCanceledPermanently) {\n        this._finishReason = IDLE_TRANSACTION_FINISH_REASONS[5];\n        this.end(endTimestamp);\n      }\n    }\n  }\n\n  /**\n   * Temporary method used to externally set the transaction's `finishReason`\n   *\n   * ** WARNING**\n   * This is for the purpose of experimentation only and will be removed in the near future, do not use!\n   *\n   * @internal\n   *\n   */\n  public setFinishReason(reason: string): void {\n    this._finishReason = reason;\n  }\n\n  /**\n   * Permits the IdleTransaction to automatically end itself via the idle timeout and heartbeat mechanisms when the `delayAutoFinishUntilSignal` option was set to `true`.\n   */\n  public sendAutoFinishSignal(): void {\n    if (!this._autoFinishAllowed) {\n      DEBUG_BUILD && logger.log('[Tracing] Received finish signal for idle transaction.');\n      this._restartIdleTimeout();\n      this._autoFinishAllowed = true;\n    }\n  }\n\n  /**\n   * Restarts idle timeout, if there is no running idle timeout it will start one.\n   */\n  private _restartIdleTimeout(endTimestamp?: Parameters<IdleTransaction['end']>[0]): void {\n    this.cancelIdleTimeout();\n    this._idleTimeoutID = setTimeout(() => {\n      if (!this._finished && Object.keys(this.activities).length === 0) {\n        this._finishReason = IDLE_TRANSACTION_FINISH_REASONS[1];\n        this.end(endTimestamp);\n      }\n    }, this._idleTimeout);\n  }\n\n  /**\n   * Start tracking a specific activity.\n   * @param spanId The span id that represents the activity\n   */\n  private _pushActivity(spanId: string): void {\n    this.cancelIdleTimeout(undefined, { restartOnChildSpanChange: !this._idleTimeoutCanceledPermanently });\n    DEBUG_BUILD && logger.log(`[Tracing] pushActivity: ${spanId}`);\n    this.activities[spanId] = true;\n    DEBUG_BUILD && logger.log('[Tracing] new activities count', Object.keys(this.activities).length);\n  }\n\n  /**\n   * Remove an activity from usage\n   * @param spanId The span id that represents the activity\n   */\n  private _popActivity(spanId: string): void {\n    if (this.activities[spanId]) {\n      DEBUG_BUILD && logger.log(`[Tracing] popActivity ${spanId}`);\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this.activities[spanId];\n      DEBUG_BUILD && logger.log('[Tracing] new activities count', Object.keys(this.activities).length);\n    }\n\n    if (Object.keys(this.activities).length === 0) {\n      const endTimestamp = timestampInSeconds();\n      if (this._idleTimeoutCanceledPermanently) {\n        if (this._autoFinishAllowed) {\n          this._finishReason = IDLE_TRANSACTION_FINISH_REASONS[5];\n          this.end(endTimestamp);\n        }\n      } else {\n        // We need to add the timeout here to have the real endtimestamp of the transaction\n        // Remember timestampInSeconds is in seconds, timeout is in ms\n        this._restartIdleTimeout(endTimestamp + this._idleTimeout / 1000);\n      }\n    }\n  }\n\n  /**\n   * Checks when entries of this.activities are not changing for 3 beats.\n   * If this occurs we finish the transaction.\n   */\n  private _beat(): void {\n    // We should not be running heartbeat if the idle transaction is finished.\n    if (this._finished) {\n      return;\n    }\n\n    const heartbeatString = Object.keys(this.activities).join('');\n\n    if (heartbeatString === this._prevHeartbeatString) {\n      this._heartbeatCounter++;\n    } else {\n      this._heartbeatCounter = 1;\n    }\n\n    this._prevHeartbeatString = heartbeatString;\n\n    if (this._heartbeatCounter >= 3) {\n      if (this._autoFinishAllowed) {\n        DEBUG_BUILD && logger.log('[Tracing] Transaction finished because of no change for 3 heart beats');\n        this.setStatus('deadline_exceeded');\n        this._finishReason = IDLE_TRANSACTION_FINISH_REASONS[0];\n        this.end();\n      }\n    } else {\n      this._pingHeartbeat();\n    }\n  }\n\n  /**\n   * Pings the heartbeat\n   */\n  private _pingHeartbeat(): void {\n    DEBUG_BUILD && logger.log(`pinging Heartbeat -> current counter: ${this._heartbeatCounter}`);\n    setTimeout(() => {\n      this._beat();\n    }, this._heartbeatInterval);\n  }\n}\n","import type { Transaction } from '@sentry/types';\nimport { extractTraceparentData as _extractTraceparentData } from '@sentry/utils';\n\nimport type { Hub } from '../hub';\nimport { getCurrentHub } from '../hub';\n\n/**\n * Grabs active transaction off scope.\n *\n * @deprecated You should not rely on the transaction, but just use `startSpan()` APIs instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport function getActiveTransaction<T extends Transaction>(maybeHub?: Hub): T | undefined {\n  // eslint-disable-next-line deprecation/deprecation\n  const hub = maybeHub || getCurrentHub();\n  // eslint-disable-next-line deprecation/deprecation\n  const scope = hub.getScope();\n  // eslint-disable-next-line deprecation/deprecation\n  return scope.getTransaction() as T | undefined;\n}\n\n// so it can be used in manual instrumentation without necessitating a hard dependency on @sentry/utils\nexport { stripUrlQueryAndFragment } from '@sentry/utils';\n\n/**\n * The `extractTraceparentData` function and `TRACEPARENT_REGEXP` constant used\n * to be declared in this file. It was later moved into `@sentry/utils` as part of a\n * move to remove `@sentry/tracing` dependencies from `@sentry/node` (`extractTraceparentData`\n * is the only tracing function used by `@sentry/node`).\n *\n * These exports are kept here for backwards compatability's sake.\n *\n * See https://github.com/getsentry/sentry-javascript/issues/4642 for more details.\n *\n * @deprecated Import this function from `@sentry/utils` instead\n */\nexport const extractTraceparentData = _extractTraceparentData;\n","import {\n  addGlobalErrorInstrumentationHandler,\n  addGlobalUnhandledRejectionInstrumentationHandler,\n  logger,\n} from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { SpanStatusType } from './spanstatus';\nimport { getActiveTransaction } from './utils';\n\nlet errorsInstrumented = false;\n\n/**\n * Configures global error listeners\n */\nexport function registerErrorInstrumentation(): void {\n  if (errorsInstrumented) {\n    return;\n  }\n\n  errorsInstrumented = true;\n  addGlobalErrorInstrumentationHandler(errorCallback);\n  addGlobalUnhandledRejectionInstrumentationHandler(errorCallback);\n}\n\n/**\n * If an error or unhandled promise occurs, we mark the active transaction as failed\n */\nfunction errorCallback(): void {\n  // eslint-disable-next-line deprecation/deprecation\n  const activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    const status: SpanStatusType = 'internal_error';\n    DEBUG_BUILD && logger.log(`[Tracing] Transaction: ${status} -> Global error occured`);\n    activeTransaction.setStatus(status);\n  }\n}\n\n// The function name will be lost when bundling but we need to be able to identify this listener later to maintain the\n// node.js default exit behaviour\nerrorCallback.tag = 'sentry_tracingErrorCallback';\n","import type { Options, SamplingContext } from '@sentry/types';\nimport { isNaN, logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../debug-build';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE } from '../semanticAttributes';\nimport { hasTracingEnabled } from '../utils/hasTracingEnabled';\nimport { spanToJSON } from '../utils/spanUtils';\nimport type { Transaction } from './transaction';\n\n/**\n * Makes a sampling decision for the given transaction and stores it on the transaction.\n *\n * Called every time a transaction is created. Only transactions which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n *\n * This method muttes the given `transaction` and will set the `sampled` value on it.\n * It returns the same transaction, for convenience.\n */\nexport function sampleTransaction<T extends Transaction>(\n  transaction: T,\n  options: Pick<Options, 'tracesSampleRate' | 'tracesSampler' | 'enableTracing'>,\n  samplingContext: SamplingContext,\n): T {\n  // nothing to do if tracing is not enabled\n  if (!hasTracingEnabled(options)) {\n    // eslint-disable-next-line deprecation/deprecation\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the user has forced a sampling decision by passing a `sampled` value in their transaction context, go with that\n  // eslint-disable-next-line deprecation/deprecation\n  if (transaction.sampled !== undefined) {\n    // eslint-disable-next-line deprecation/deprecation\n    transaction.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE, Number(transaction.sampled));\n    return transaction;\n  }\n\n  // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` nor `enableTracing` were defined, so one of these should\n  // work; prefer the hook if so\n  let sampleRate;\n  if (typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler(samplingContext);\n    transaction.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE, Number(sampleRate));\n  } else if (samplingContext.parentSampled !== undefined) {\n    sampleRate = samplingContext.parentSampled;\n  } else if (typeof options.tracesSampleRate !== 'undefined') {\n    sampleRate = options.tracesSampleRate;\n    transaction.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE, Number(sampleRate));\n  } else {\n    // When `enableTracing === true`, we use a sample rate of 100%\n    sampleRate = 1;\n    transaction.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE, sampleRate);\n  }\n\n  // Since this is coming from the user (or from a function provided by the user), who knows what we might get. (The\n  // only valid values are booleans or numbers between 0 and 1.)\n  if (!isValidSampleRate(sampleRate)) {\n    DEBUG_BUILD && logger.warn('[Tracing] Discarding transaction because of invalid sample rate.');\n    // eslint-disable-next-line deprecation/deprecation\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n  if (!sampleRate) {\n    DEBUG_BUILD &&\n      logger.log(\n        `[Tracing] Discarding transaction because ${\n          typeof options.tracesSampler === 'function'\n            ? 'tracesSampler returned 0 or false'\n            : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'\n        }`,\n      );\n    // eslint-disable-next-line deprecation/deprecation\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is\n  // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.\n  // eslint-disable-next-line deprecation/deprecation\n  transaction.sampled = Math.random() < (sampleRate as number | boolean);\n\n  // if we're not going to keep it, we're done\n  // eslint-disable-next-line deprecation/deprecation\n  if (!transaction.sampled) {\n    DEBUG_BUILD &&\n      logger.log(\n        `[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(\n          sampleRate,\n        )})`,\n      );\n    return transaction;\n  }\n\n  DEBUG_BUILD &&\n    // eslint-disable-next-line deprecation/deprecation\n    logger.log(`[Tracing] starting ${transaction.op} transaction - ${spanToJSON(transaction).description}`);\n  return transaction;\n}\n\n/**\n * Checks the given sample rate to make sure it is valid type and value (a boolean, or a number between 0 and 1).\n */\nexport function isValidSampleRate(rate: unknown): boolean {\n  // we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (isNaN(rate) || !(typeof rate === 'number' || typeof rate === 'boolean')) {\n    DEBUG_BUILD &&\n      logger.warn(\n        `[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(\n          rate,\n        )} of type ${JSON.stringify(typeof rate)}.`,\n      );\n    return false;\n  }\n\n  // in case sampleRate is a boolean, it will get automatically cast to 1 if it's true and 0 if it's false\n  if (rate < 0 || rate > 1) {\n    DEBUG_BUILD &&\n      logger.warn(`[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got ${rate}.`);\n    return false;\n  }\n  return true;\n}\n","import type { ClientOptions, CustomSamplingContext, TransactionContext } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { Hub } from '../hub';\nimport { getMainCarrier } from '../hub';\nimport { spanToTraceHeader } from '../utils/spanUtils';\nimport { registerErrorInstrumentation } from './errors';\nimport { IdleTransaction } from './idletransaction';\nimport { sampleTransaction } from './sampling';\nimport { Transaction } from './transaction';\n\n/** Returns all trace headers that are currently on the top scope. */\n// eslint-disable-next-line deprecation/deprecation\nfunction traceHeaders(this: Hub): { [key: string]: string } {\n  // eslint-disable-next-line deprecation/deprecation\n  const scope = this.getScope();\n  // eslint-disable-next-line deprecation/deprecation\n  const span = scope.getSpan();\n\n  return span\n    ? {\n        'sentry-trace': spanToTraceHeader(span),\n      }\n    : {};\n}\n\n/**\n * Creates a new transaction and adds a sampling decision if it doesn't yet have one.\n *\n * The Hub.startTransaction method delegates to this method to do its work, passing the Hub instance in as `this`, as if\n * it had been called on the hub directly. Exists as a separate function so that it can be injected into the class as an\n * \"extension method.\"\n *\n * @param this: The Hub starting the transaction\n * @param transactionContext: Data used to configure the transaction\n * @param CustomSamplingContext: Optional data to be provided to the `tracesSampler` function (if any)\n *\n * @returns The new transaction\n *\n * @see {@link Hub.startTransaction}\n */\nfunction _startTransaction(\n  // eslint-disable-next-line deprecation/deprecation\n  this: Hub,\n  transactionContext: TransactionContext,\n  customSamplingContext?: CustomSamplingContext,\n): Transaction {\n  // eslint-disable-next-line deprecation/deprecation\n  const client = this.getClient();\n  const options: Partial<ClientOptions> = (client && client.getOptions()) || {};\n\n  const configInstrumenter = options.instrumenter || 'sentry';\n  const transactionInstrumenter = transactionContext.instrumenter || 'sentry';\n\n  if (configInstrumenter !== transactionInstrumenter) {\n    DEBUG_BUILD &&\n      logger.error(\n        `A transaction was started with instrumenter=\\`${transactionInstrumenter}\\`, but the SDK is configured with the \\`${configInstrumenter}\\` instrumenter.\nThe transaction will not be sampled. Please use the ${configInstrumenter} instrumentation to start transactions.`,\n      );\n\n    // eslint-disable-next-line deprecation/deprecation\n    transactionContext.sampled = false;\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  let transaction = new Transaction(transactionContext, this);\n  transaction = sampleTransaction(transaction, options, {\n    name: transactionContext.name,\n    parentSampled: transactionContext.parentSampled,\n    transactionContext,\n    attributes: {\n      // eslint-disable-next-line deprecation/deprecation\n      ...transactionContext.data,\n      ...transactionContext.attributes,\n    },\n    ...customSamplingContext,\n  });\n  if (transaction.isRecording()) {\n    transaction.initSpanRecorder(options._experiments && (options._experiments.maxSpans as number));\n  }\n  if (client && client.emit) {\n    client.emit('startTransaction', transaction);\n  }\n  return transaction;\n}\n\n/**\n * Create new idle transaction.\n */\nexport function startIdleTransaction(\n  // eslint-disable-next-line deprecation/deprecation\n  hub: Hub,\n  transactionContext: TransactionContext,\n  idleTimeout: number,\n  finalTimeout: number,\n  onScope?: boolean,\n  customSamplingContext?: CustomSamplingContext,\n  heartbeatInterval?: number,\n  delayAutoFinishUntilSignal: boolean = false,\n): IdleTransaction {\n  // eslint-disable-next-line deprecation/deprecation\n  const client = hub.getClient();\n  const options: Partial<ClientOptions> = (client && client.getOptions()) || {};\n\n  // eslint-disable-next-line deprecation/deprecation\n  let transaction = new IdleTransaction(\n    transactionContext,\n    hub,\n    idleTimeout,\n    finalTimeout,\n    heartbeatInterval,\n    onScope,\n    delayAutoFinishUntilSignal,\n  );\n  transaction = sampleTransaction(transaction, options, {\n    name: transactionContext.name,\n    parentSampled: transactionContext.parentSampled,\n    transactionContext,\n    attributes: {\n      // eslint-disable-next-line deprecation/deprecation\n      ...transactionContext.data,\n      ...transactionContext.attributes,\n    },\n    ...customSamplingContext,\n  });\n  if (transaction.isRecording()) {\n    transaction.initSpanRecorder(options._experiments && (options._experiments.maxSpans as number));\n  }\n  if (client && client.emit) {\n    client.emit('startTransaction', transaction);\n  }\n  return transaction;\n}\n\n/**\n * Adds tracing extensions to the global hub.\n */\nexport function addTracingExtensions(): void {\n  const carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n  carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n  if (!carrier.__SENTRY__.extensions.startTransaction) {\n    carrier.__SENTRY__.extensions.startTransaction = _startTransaction;\n  }\n  if (!carrier.__SENTRY__.extensions.traceHeaders) {\n    carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;\n  }\n\n  registerErrorInstrumentation();\n}\n","declare const __DEBUG_BUILD__: boolean;\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nexport const DEBUG_BUILD = __DEBUG_BUILD__;\n","/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Metric } from '../../types';\nimport { observe } from '../observe';\n\ndeclare global {\n  interface Performance {\n    interactionCount: number;\n  }\n}\n\nlet interactionCountEstimate = 0;\nlet minKnownInteractionId = Infinity;\nlet maxKnownInteractionId = 0;\n\nconst updateEstimate = (entries: Metric['entries']): void => {\n  (entries as PerformanceEventTiming[]).forEach(e => {\n    if (e.interactionId) {\n      minKnownInteractionId = Math.min(minKnownInteractionId, e.interactionId);\n      maxKnownInteractionId = Math.max(maxKnownInteractionId, e.interactionId);\n\n      interactionCountEstimate = maxKnownInteractionId ? (maxKnownInteractionId - minKnownInteractionId) / 7 + 1 : 0;\n    }\n  });\n};\n\nlet po: PerformanceObserver | undefined;\n\n/**\n * Returns the `interactionCount` value using the native API (if available)\n * or the polyfill estimate in this module.\n */\nexport const getInteractionCount = (): number => {\n  return po ? interactionCountEstimate : performance.interactionCount || 0;\n};\n\n/**\n * Feature detects native support or initializes the polyfill if needed.\n */\nexport const initInteractionCountPolyfill = (): void => {\n  if ('interactionCount' in performance || po) return;\n\n  po = observe('event', updateEstimate, {\n    type: 'event',\n    buffered: true,\n    durationThreshold: 0,\n  } as PerformanceObserverInit);\n};\n","import { GLOBAL_OBJ } from '@sentry/utils';\n\nexport const WINDOW = GLOBAL_OBJ as typeof GLOBAL_OBJ &\n  // document is not available in all browser environments (webworkers). We make it optional so you have to explicitly check for it\n  Omit<Window, 'document'> &\n  Partial<Pick<Window, 'document'>>;\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Metric, ReportCallback } from '../types';\n\nexport const bindReporter = (\n  callback: ReportCallback,\n  metric: Metric,\n  reportAllChanges?: boolean,\n): ((forceReport?: boolean) => void) => {\n  let prevValue: number;\n  let delta: number;\n  return (forceReport?: boolean) => {\n    if (metric.value >= 0) {\n      if (forceReport || reportAllChanges) {\n        delta = metric.value - (prevValue || 0);\n\n        // Report the metric if there's a non-zero delta or if no previous\n        // value exists (which can happen in the case of the document becoming\n        // hidden when the metric value is 0).\n        // See: https://github.com/GoogleChrome/web-vitals/issues/14\n        if (delta || prevValue === undefined) {\n          prevValue = metric.value;\n          metric.delta = delta;\n          callback(metric);\n        }\n      }\n    }\n  };\n};\n","/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WINDOW } from '../../types';\nimport type { NavigationTimingPolyfillEntry } from '../types';\n\nconst getNavigationEntryFromPerformanceTiming = (): NavigationTimingPolyfillEntry => {\n  // eslint-disable-next-line deprecation/deprecation\n  const timing = WINDOW.performance.timing;\n  // eslint-disable-next-line deprecation/deprecation\n  const type = WINDOW.performance.navigation.type;\n\n  const navigationEntry: { [key: string]: number | string } = {\n    entryType: 'navigation',\n    startTime: 0,\n    type: type == 2 ? 'back_forward' : type === 1 ? 'reload' : 'navigate',\n  };\n\n  for (const key in timing) {\n    if (key !== 'navigationStart' && key !== 'toJSON') {\n      // eslint-disable-next-line deprecation/deprecation\n      navigationEntry[key] = Math.max((timing[key as keyof PerformanceTiming] as number) - timing.navigationStart, 0);\n    }\n  }\n  return navigationEntry as unknown as NavigationTimingPolyfillEntry;\n};\n\nexport const getNavigationEntry = (): PerformanceNavigationTiming | NavigationTimingPolyfillEntry | undefined => {\n  if (WINDOW.__WEB_VITALS_POLYFILL__) {\n    return (\n      WINDOW.performance &&\n      ((performance.getEntriesByType && performance.getEntriesByType('navigation')[0]) ||\n        getNavigationEntryFromPerformanceTiming())\n    );\n  } else {\n    return WINDOW.performance && performance.getEntriesByType && performance.getEntriesByType('navigation')[0];\n  }\n};\n","/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getNavigationEntry } from './getNavigationEntry';\n\nexport const getActivationStart = (): number => {\n  const navEntry = getNavigationEntry();\n  return (navEntry && navEntry.activationStart) || 0;\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WINDOW } from '../../types';\nimport type { Metric } from '../types';\nimport { generateUniqueID } from './generateUniqueID';\nimport { getActivationStart } from './getActivationStart';\nimport { getNavigationEntry } from './getNavigationEntry';\n\nexport const initMetric = (name: Metric['name'], value?: number): Metric => {\n  const navEntry = getNavigationEntry();\n  let navigationType: Metric['navigationType'] = 'navigate';\n\n  if (navEntry) {\n    if ((WINDOW.document && WINDOW.document.prerendering) || getActivationStart() > 0) {\n      navigationType = 'prerender';\n    } else {\n      navigationType = navEntry.type.replace(/_/g, '-') as Metric['navigationType'];\n    }\n  }\n\n  return {\n    name,\n    value: typeof value === 'undefined' ? -1 : value,\n    rating: 'good', // Will be updated if the value changes.\n    delta: 0,\n    entries: [],\n    id: generateUniqueID(),\n    navigationType,\n  };\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Performantly generate a unique, 30-char string by combining a version\n * number, the current timestamp with a 13-digit number integer.\n * @return {string}\n */\nexport const generateUniqueID = (): string => {\n  return `v3-${Date.now()}-${Math.floor(Math.random() * (9e12 - 1)) + 1e12}`;\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { FirstInputPolyfillEntry, NavigationTimingPolyfillEntry, PerformancePaintTiming } from '../types';\n\nexport interface PerformanceEntryHandler {\n  (entry: PerformanceEntry): void;\n}\n\ninterface PerformanceEntryMap {\n  event: PerformanceEventTiming[];\n  paint: PerformancePaintTiming[];\n  'layout-shift': LayoutShift[];\n  'largest-contentful-paint': LargestContentfulPaint[];\n  'first-input': PerformanceEventTiming[] | FirstInputPolyfillEntry[];\n  navigation: PerformanceNavigationTiming[] | NavigationTimingPolyfillEntry[];\n  resource: PerformanceResourceTiming[];\n  longtask: PerformanceEntry[];\n}\n\n/**\n * Takes a performance entry type and a callback function, and creates a\n * `PerformanceObserver` instance that will observe the specified entry type\n * with buffering enabled and call the callback _for each entry_.\n *\n * This function also feature-detects entry support and wraps the logic in a\n * try/catch to avoid errors in unsupporting browsers.\n */\nexport const observe = <K extends keyof PerformanceEntryMap>(\n  type: K,\n  callback: (entries: PerformanceEntryMap[K]) => void,\n  opts?: PerformanceObserverInit,\n): PerformanceObserver | undefined => {\n  try {\n    if (PerformanceObserver.supportedEntryTypes.includes(type)) {\n      const po = new PerformanceObserver(list => {\n        callback(list.getEntries() as PerformanceEntryMap[K]);\n      });\n      po.observe(\n        Object.assign(\n          {\n            type,\n            buffered: true,\n          },\n          opts || {},\n        ) as PerformanceObserverInit,\n      );\n      return po;\n    }\n  } catch (e) {\n    // Do nothing.\n  }\n  return;\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WINDOW } from '../../types';\n\nexport interface OnHiddenCallback {\n  (event: Event): void;\n}\n\nexport const onHidden = (cb: OnHiddenCallback, once?: boolean): void => {\n  const onHiddenOrPageHide = (event: Event): void => {\n    if (event.type === 'pagehide' || WINDOW.document!.visibilityState === 'hidden') {\n      cb(event);\n      if (once) {\n        removeEventListener('visibilitychange', onHiddenOrPageHide, true);\n        removeEventListener('pagehide', onHiddenOrPageHide, true);\n      }\n    }\n  };\n\n  if (WINDOW.document) {\n    addEventListener('visibilitychange', onHiddenOrPageHide, true);\n    // Some browsers have buggy implementations of visibilitychange,\n    // so we use pagehide in addition, just to be safe.\n    addEventListener('pagehide', onHiddenOrPageHide, true);\n  }\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WINDOW } from '../../types';\nimport { onHidden } from './onHidden';\n\nlet firstHiddenTime = -1;\n\nconst initHiddenTime = (): void => {\n  // If the document is hidden and not prerendering, assume it was always\n  // hidden and the page was loaded in the background.\n  if (WINDOW.document && WINDOW.document.visibilityState) {\n    firstHiddenTime = WINDOW.document.visibilityState === 'hidden' && !WINDOW.document.prerendering ? 0 : Infinity;\n  }\n};\n\nconst trackChanges = (): void => {\n  // Update the time if/when the document becomes hidden.\n  onHidden(({ timeStamp }) => {\n    firstHiddenTime = timeStamp;\n  }, true);\n};\n\nexport const getVisibilityWatcher = (): {\n  readonly firstHiddenTime: number;\n} => {\n  if (firstHiddenTime < 0) {\n    // If the document is hidden when this code runs, assume it was hidden\n    // since navigation start. This isn't a perfect heuristic, but it's the\n    // best we can do until an API is available to support querying past\n    // visibilityState.\n    initHiddenTime();\n    trackChanges();\n  }\n  return {\n    get firstHiddenTime() {\n      return firstHiddenTime;\n    },\n  };\n};\n","/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { initMetric } from './lib/initMetric';\nimport { observe } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { getInteractionCount, initInteractionCountPolyfill } from './lib/polyfills/interactionCountPolyfill';\nimport type { ReportCallback, ReportOpts } from './types';\nimport type { INPMetric } from './types/inp';\n\ninterface Interaction {\n  id: number;\n  latency: number;\n  entries: PerformanceEventTiming[];\n}\n\n/**\n * Returns the interaction count since the last bfcache restore (or for the\n * full page lifecycle if there were no bfcache restores).\n */\nconst getInteractionCountForNavigation = (): number => {\n  return getInteractionCount();\n};\n\n// To prevent unnecessary memory usage on pages with lots of interactions,\n// store at most 10 of the longest interactions to consider as INP candidates.\nconst MAX_INTERACTIONS_TO_CONSIDER = 10;\n\n// A list of longest interactions on the page (by latency) sorted so the\n// longest one is first. The list is as most MAX_INTERACTIONS_TO_CONSIDER long.\nconst longestInteractionList: Interaction[] = [];\n\n// A mapping of longest interactions by their interaction ID.\n// This is used for faster lookup.\nconst longestInteractionMap: { [interactionId: string]: Interaction } = {};\n\n/**\n * Takes a performance entry and adds it to the list of worst interactions\n * if its duration is long enough to make it among the worst. If the\n * entry is part of an existing interaction, it is merged and the latency\n * and entries list is updated as needed.\n */\nconst processEntry = (entry: PerformanceEventTiming): void => {\n  // The least-long of the 10 longest interactions.\n  const minLongestInteraction = longestInteractionList[longestInteractionList.length - 1];\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const existingInteraction = longestInteractionMap[entry.interactionId!];\n\n  // Only process the entry if it's possibly one of the ten longest,\n  // or if it's part of an existing interaction.\n  if (\n    existingInteraction ||\n    longestInteractionList.length < MAX_INTERACTIONS_TO_CONSIDER ||\n    entry.duration > minLongestInteraction.latency\n  ) {\n    // If the interaction already exists, update it. Otherwise create one.\n    if (existingInteraction) {\n      existingInteraction.entries.push(entry);\n      existingInteraction.latency = Math.max(existingInteraction.latency, entry.duration);\n    } else {\n      const interaction = {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        id: entry.interactionId!,\n        latency: entry.duration,\n        entries: [entry],\n      };\n      longestInteractionMap[interaction.id] = interaction;\n      longestInteractionList.push(interaction);\n    }\n\n    // Sort the entries by latency (descending) and keep only the top ten.\n    longestInteractionList.sort((a, b) => b.latency - a.latency);\n    longestInteractionList.splice(MAX_INTERACTIONS_TO_CONSIDER).forEach(i => {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete longestInteractionMap[i.id];\n    });\n  }\n};\n\n/**\n * Returns the estimated p98 longest interaction based on the stored\n * interaction candidates and the interaction count for the current page.\n */\nconst estimateP98LongestInteraction = (): Interaction => {\n  const candidateInteractionIndex = Math.min(\n    longestInteractionList.length - 1,\n    Math.floor(getInteractionCountForNavigation() / 50),\n  );\n\n  return longestInteractionList[candidateInteractionIndex];\n};\n\n/**\n * Calculates the [INP](https://web.dev/responsiveness/) value for the current\n * page and calls the `callback` function once the value is ready, along with\n * the `event` performance entries reported for that interaction. The reported\n * value is a `DOMHighResTimeStamp`.\n *\n * A custom `durationThreshold` configuration option can optionally be passed to\n * control what `event-timing` entries are considered for INP reporting. The\n * default threshold is `40`, which means INP scores of less than 40 are\n * reported as 0. Note that this will not affect your 75th percentile INP value\n * unless that value is also less than 40 (well below the recommended\n * [good](https://web.dev/inp/#what-is-a-good-inp-score) threshold).\n *\n * If the `reportAllChanges` configuration option is set to `true`, the\n * `callback` function will be called as soon as the value is initially\n * determined as well as any time the value changes throughout the page\n * lifespan.\n *\n * _**Important:** INP should be continually monitored for changes throughout\n * the entire lifespan of a page—including if the user returns to the page after\n * it's been hidden/backgrounded. However, since browsers often [will not fire\n * additional callbacks once the user has backgrounded a\n * page](https://developer.chrome.com/blog/page-lifecycle-api/#advice-hidden),\n * `callback` is always called when the page's visibility state changes to\n * hidden. As a result, the `callback` function might be called multiple times\n * during the same page load._\n */\nexport const onINP = (onReport: ReportCallback, opts?: ReportOpts): void => {\n  // Set defaults\n  // eslint-disable-next-line no-param-reassign\n  opts = opts || {};\n\n  // https://web.dev/inp/#what's-a-%22good%22-inp-value\n  // const thresholds = [200, 500];\n\n  // TODO(philipwalton): remove once the polyfill is no longer needed.\n  initInteractionCountPolyfill();\n\n  const metric = initMetric('INP');\n  // eslint-disable-next-line prefer-const\n  let report: ReturnType<typeof bindReporter>;\n\n  const handleEntries = (entries: INPMetric['entries']): void => {\n    entries.forEach(entry => {\n      if (entry.interactionId) {\n        processEntry(entry);\n      }\n\n      // Entries of type `first-input` don't currently have an `interactionId`,\n      // so to consider them in INP we have to first check that an existing\n      // entry doesn't match the `duration` and `startTime`.\n      // Note that this logic assumes that `event` entries are dispatched\n      // before `first-input` entries. This is true in Chrome but it is not\n      // true in Firefox; however, Firefox doesn't support interactionId, so\n      // it's not an issue at the moment.\n      // TODO(philipwalton): remove once crbug.com/1325826 is fixed.\n      if (entry.entryType === 'first-input') {\n        const noMatchingEntry = !longestInteractionList.some(interaction => {\n          return interaction.entries.some(prevEntry => {\n            return entry.duration === prevEntry.duration && entry.startTime === prevEntry.startTime;\n          });\n        });\n        if (noMatchingEntry) {\n          processEntry(entry);\n        }\n      }\n    });\n\n    const inp = estimateP98LongestInteraction();\n\n    if (inp && inp.latency !== metric.value) {\n      metric.value = inp.latency;\n      metric.entries = inp.entries;\n      report();\n    }\n  };\n\n  const po = observe('event', handleEntries, {\n    // Event Timing entries have their durations rounded to the nearest 8ms,\n    // so a duration of 40ms would be any event that spans 2.5 or more frames\n    // at 60Hz. This threshold is chosen to strike a balance between usefulness\n    // and performance. Running this callback for any interaction that spans\n    // just one or two frames is likely not worth the insight that could be\n    // gained.\n    durationThreshold: opts.durationThreshold || 40,\n  } as PerformanceObserverInit);\n\n  report = bindReporter(onReport, metric, opts.reportAllChanges);\n\n  if (po) {\n    // Also observe entries of type `first-input`. This is useful in cases\n    // where the first interaction is less than the `durationThreshold`.\n    po.observe({ type: 'first-input', buffered: true });\n\n    onHidden(() => {\n      handleEntries(po.takeRecords() as INPMetric['entries']);\n\n      // If the interaction count shows that there were interactions but\n      // none were captured by the PerformanceObserver, report a latency of 0.\n      if (metric.value < 0 && getInteractionCountForNavigation() > 0) {\n        metric.value = 0;\n        metric.entries = [];\n      }\n\n      report(true);\n    });\n  }\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WINDOW } from '../types';\nimport { bindReporter } from './lib/bindReporter';\nimport { getActivationStart } from './lib/getActivationStart';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher';\nimport { initMetric } from './lib/initMetric';\nimport { observe } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport type { LCPMetric, ReportCallback, StopListening } from './types';\n\nconst reportedMetricIDs: Record<string, boolean> = {};\n\n/**\n * Calculates the [LCP](https://web.dev/lcp/) value for the current page and\n * calls the `callback` function once the value is ready (along with the\n * relevant `largest-contentful-paint` performance entry used to determine the\n * value). The reported value is a `DOMHighResTimeStamp`.\n */\nexport const onLCP = (onReport: ReportCallback): StopListening | undefined => {\n  const visibilityWatcher = getVisibilityWatcher();\n  const metric = initMetric('LCP');\n  let report: ReturnType<typeof bindReporter>;\n\n  const handleEntries = (entries: LCPMetric['entries']): void => {\n    const lastEntry = entries[entries.length - 1] as LargestContentfulPaint;\n    if (lastEntry) {\n      // The startTime attribute returns the value of the renderTime if it is\n      // not 0, and the value of the loadTime otherwise. The activationStart\n      // reference is used because LCP should be relative to page activation\n      // rather than navigation start if the page was prerendered.\n      const value = Math.max(lastEntry.startTime - getActivationStart(), 0);\n\n      // Only report if the page wasn't hidden prior to LCP.\n      if (value < visibilityWatcher.firstHiddenTime) {\n        metric.value = value;\n        metric.entries = [lastEntry];\n        report();\n      }\n    }\n  };\n\n  const po = observe('largest-contentful-paint', handleEntries);\n\n  if (po) {\n    report = bindReporter(onReport, metric);\n\n    const stopListening = (): void => {\n      if (!reportedMetricIDs[metric.id]) {\n        handleEntries(po.takeRecords() as LCPMetric['entries']);\n        po.disconnect();\n        reportedMetricIDs[metric.id] = true;\n        report(true);\n      }\n    };\n\n    // Stop listening after input. Note: while scrolling is an input that\n    // stop LCP observation, it's unreliable since it can be programmatically\n    // generated. See: https://github.com/GoogleChrome/web-vitals/issues/75\n    ['keydown', 'click'].forEach(type => {\n      if (WINDOW.document) {\n        addEventListener(type, stopListening, { once: true, capture: true });\n      }\n    });\n\n    onHidden(stopListening, true);\n\n    return stopListening;\n  }\n\n  return;\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WINDOW } from '../types';\nimport { bindReporter } from './lib/bindReporter';\nimport { getActivationStart } from './lib/getActivationStart';\nimport { getNavigationEntry } from './lib/getNavigationEntry';\nimport { initMetric } from './lib/initMetric';\nimport type { ReportCallback, ReportOpts } from './types';\nimport type { TTFBMetric } from './types/ttfb';\n\n/**\n * Runs in the next task after the page is done loading and/or prerendering.\n * @param callback\n */\nconst whenReady = (callback: () => void): void => {\n  if (!WINDOW.document) {\n    return;\n  }\n\n  if (WINDOW.document.prerendering) {\n    addEventListener('prerenderingchange', () => whenReady(callback), true);\n  } else if (WINDOW.document.readyState !== 'complete') {\n    addEventListener('load', () => whenReady(callback), true);\n  } else {\n    // Queue a task so the callback runs after `loadEventEnd`.\n    setTimeout(callback, 0);\n  }\n};\n\n/**\n * Calculates the [TTFB](https://web.dev/time-to-first-byte/) value for the\n * current page and calls the `callback` function once the page has loaded,\n * along with the relevant `navigation` performance entry used to determine the\n * value. The reported value is a `DOMHighResTimeStamp`.\n *\n * Note, this function waits until after the page is loaded to call `callback`\n * in order to ensure all properties of the `navigation` entry are populated.\n * This is useful if you want to report on other metrics exposed by the\n * [Navigation Timing API](https://w3c.github.io/navigation-timing/). For\n * example, the TTFB metric starts from the page's [time\n * origin](https://www.w3.org/TR/hr-time-2/#sec-time-origin), which means it\n * includes time spent on DNS lookup, connection negotiation, network latency,\n * and server processing time.\n */\nexport const onTTFB = (onReport: ReportCallback, opts?: ReportOpts): void => {\n  // Set defaults\n  // eslint-disable-next-line no-param-reassign\n  opts = opts || {};\n\n  // https://web.dev/ttfb/#what-is-a-good-ttfb-score\n  // const thresholds = [800, 1800];\n\n  const metric = initMetric('TTFB');\n  const report = bindReporter(onReport, metric, opts.reportAllChanges);\n\n  whenReady(() => {\n    const navEntry = getNavigationEntry() as TTFBMetric['entries'][number];\n\n    if (navEntry) {\n      // The activationStart reference is used because TTFB should be\n      // relative to page activation rather than navigation start if the\n      // page was prerendered. But in cases where `activationStart` occurs\n      // after the first byte is received, this time should be clamped at 0.\n      metric.value = Math.max(navEntry.responseStart - getActivationStart(), 0);\n\n      // In some cases the value reported is negative or is larger\n      // than the current page time. Ignore these cases:\n      // https://github.com/GoogleChrome/web-vitals/issues/137\n      // https://github.com/GoogleChrome/web-vitals/issues/162\n      if (metric.value < 0 || metric.value > performance.now()) return;\n\n      metric.entries = [navEntry];\n\n      report(true);\n    }\n  });\n};\n","import { getFunctionName, logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../common/debug-build';\nimport { onCLS } from './web-vitals/getCLS';\nimport { onFID } from './web-vitals/getFID';\nimport { onINP } from './web-vitals/getINP';\nimport { onLCP } from './web-vitals/getLCP';\nimport { observe } from './web-vitals/lib/observe';\nimport { onTTFB } from './web-vitals/onTTFB';\n\ntype InstrumentHandlerTypePerformanceObserver =\n  | 'longtask'\n  | 'event'\n  | 'navigation'\n  | 'paint'\n  | 'resource'\n  | 'first-input';\n\ntype InstrumentHandlerTypeMetric = 'cls' | 'lcp' | 'fid' | 'ttfb' | 'inp';\n\n// We provide this here manually instead of relying on a global, as this is not available in non-browser environements\n// And we do not want to expose such types\ninterface PerformanceEntry {\n  readonly duration: number;\n  readonly entryType: string;\n  readonly name: string;\n  readonly startTime: number;\n  toJSON(): Record<string, unknown>;\n}\ninterface PerformanceEventTiming extends PerformanceEntry {\n  processingStart: number;\n  processingEnd: number;\n  duration: number;\n  cancelable?: boolean;\n  target?: unknown | null;\n  interactionId?: number;\n}\n\ninterface Metric {\n  /**\n   * The name of the metric (in acronym form).\n   */\n  name: 'CLS' | 'FCP' | 'FID' | 'INP' | 'LCP' | 'TTFB';\n\n  /**\n   * The current value of the metric.\n   */\n  value: number;\n\n  /**\n   * The rating as to whether the metric value is within the \"good\",\n   * \"needs improvement\", or \"poor\" thresholds of the metric.\n   */\n  rating: 'good' | 'needs-improvement' | 'poor';\n\n  /**\n   * The delta between the current value and the last-reported value.\n   * On the first report, `delta` and `value` will always be the same.\n   */\n  delta: number;\n\n  /**\n   * A unique ID representing this particular metric instance. This ID can\n   * be used by an analytics tool to dedupe multiple values sent for the same\n   * metric instance, or to group multiple deltas together and calculate a\n   * total. It can also be used to differentiate multiple different metric\n   * instances sent from the same page, which can happen if the page is\n   * restored from the back/forward cache (in that case new metrics object\n   * get created).\n   */\n  id: string;\n\n  /**\n   * Any performance entries relevant to the metric value calculation.\n   * The array may also be empty if the metric value was not based on any\n   * entries (e.g. a CLS value of 0 given no layout shifts).\n   */\n  entries: PerformanceEntry[];\n\n  /**\n   * The type of navigation\n   *\n   * Navigation Timing API (or `undefined` if the browser doesn't\n   * support that API). For pages that are restored from the bfcache, this\n   * value will be 'back-forward-cache'.\n   */\n  navigationType: 'navigate' | 'reload' | 'back-forward' | 'back-forward-cache' | 'prerender';\n}\n\ntype InstrumentHandlerType = InstrumentHandlerTypeMetric | InstrumentHandlerTypePerformanceObserver;\n\ntype StopListening = undefined | void | (() => void);\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype InstrumentHandlerCallback = (data: any) => void;\n\ntype CleanupHandlerCallback = () => void;\n\nconst handlers: { [key in InstrumentHandlerType]?: InstrumentHandlerCallback[] } = {};\nconst instrumented: { [key in InstrumentHandlerType]?: boolean } = {};\n\nlet _previousCls: Metric | undefined;\nlet _previousFid: Metric | undefined;\nlet _previousLcp: Metric | undefined;\nlet _previousTtfb: Metric | undefined;\nlet _previousInp: Metric | undefined;\n\n/**\n * Add a callback that will be triggered when a CLS metric is available.\n * Returns a cleanup callback which can be called to remove the instrumentation handler.\n *\n * Pass `stopOnCallback = true` to stop listening for CLS when the cleanup callback is called.\n * This will lead to the CLS being finalized and frozen.\n */\nexport function addClsInstrumentationHandler(\n  callback: (data: { metric: Metric }) => void,\n  stopOnCallback = false,\n): CleanupHandlerCallback {\n  return addMetricObserver('cls', callback, instrumentCls, _previousCls, stopOnCallback);\n}\n\n/**\n * Add a callback that will be triggered when a LCP metric is available.\n * Returns a cleanup callback which can be called to remove the instrumentation handler.\n *\n * Pass `stopOnCallback = true` to stop listening for LCP when the cleanup callback is called.\n * This will lead to the LCP being finalized and frozen.\n */\nexport function addLcpInstrumentationHandler(\n  callback: (data: { metric: Metric }) => void,\n  stopOnCallback = false,\n): CleanupHandlerCallback {\n  return addMetricObserver('lcp', callback, instrumentLcp, _previousLcp, stopOnCallback);\n}\n\n/**\n * Add a callback that will be triggered when a FID metric is available.\n */\nexport function addTtfbInstrumentationHandler(callback: (data: { metric: Metric }) => void): CleanupHandlerCallback {\n  return addMetricObserver('ttfb', callback, instrumentTtfb, _previousTtfb);\n}\n\n/**\n * Add a callback that will be triggered when a FID metric is available.\n * Returns a cleanup callback which can be called to remove the instrumentation handler.\n */\nexport function addFidInstrumentationHandler(callback: (data: { metric: Metric }) => void): CleanupHandlerCallback {\n  return addMetricObserver('fid', callback, instrumentFid, _previousFid);\n}\n\n/**\n * Add a callback that will be triggered when a INP metric is available.\n * Returns a cleanup callback which can be called to remove the instrumentation handler.\n */\nexport function addInpInstrumentationHandler(\n  callback: (data: { metric: Omit<Metric, 'entries'> & { entries: PerformanceEventTiming[] } }) => void,\n): CleanupHandlerCallback {\n  return addMetricObserver('inp', callback, instrumentInp, _previousInp);\n}\n\nexport function addPerformanceInstrumentationHandler(\n  type: 'event' | 'first-input',\n  callback: (data: { entries: ((PerformanceEntry & { target?: unknown | null }) | PerformanceEventTiming)[] }) => void,\n): CleanupHandlerCallback;\nexport function addPerformanceInstrumentationHandler(\n  type: InstrumentHandlerTypePerformanceObserver,\n  callback: (data: { entries: PerformanceEntry[] }) => void,\n): CleanupHandlerCallback;\n\n/**\n * Add a callback that will be triggered when a performance observer is triggered,\n * and receives the entries of the observer.\n * Returns a cleanup callback which can be called to remove the instrumentation handler.\n */\nexport function addPerformanceInstrumentationHandler(\n  type: InstrumentHandlerTypePerformanceObserver,\n  callback: (data: { entries: PerformanceEntry[] }) => void,\n): CleanupHandlerCallback {\n  addHandler(type, callback);\n\n  if (!instrumented[type]) {\n    instrumentPerformanceObserver(type);\n    instrumented[type] = true;\n  }\n\n  return getCleanupCallback(type, callback);\n}\n\n/** Trigger all handlers of a given type. */\nfunction triggerHandlers(type: InstrumentHandlerType, data: unknown): void {\n  const typeHandlers = handlers[type];\n\n  if (!typeHandlers || !typeHandlers.length) {\n    return;\n  }\n\n  for (const handler of typeHandlers) {\n    try {\n      handler(data);\n    } catch (e) {\n      DEBUG_BUILD &&\n        logger.error(\n          `Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${getFunctionName(handler)}\\nError:`,\n          e,\n        );\n    }\n  }\n}\n\nfunction instrumentCls(): StopListening {\n  return onCLS(\n    metric => {\n      triggerHandlers('cls', {\n        metric,\n      });\n      _previousCls = metric;\n    },\n    { reportAllChanges: true },\n  );\n}\n\nfunction instrumentFid(): void {\n  return onFID(metric => {\n    triggerHandlers('fid', {\n      metric,\n    });\n    _previousFid = metric;\n  });\n}\n\nfunction instrumentLcp(): StopListening {\n  return onLCP(metric => {\n    triggerHandlers('lcp', {\n      metric,\n    });\n    _previousLcp = metric;\n  });\n}\n\nfunction instrumentTtfb(): StopListening {\n  return onTTFB(metric => {\n    triggerHandlers('ttfb', {\n      metric,\n    });\n    _previousTtfb = metric;\n  });\n}\n\nfunction instrumentInp(): void {\n  return onINP(metric => {\n    triggerHandlers('inp', {\n      metric,\n    });\n    _previousInp = metric;\n  });\n}\n\nfunction addMetricObserver(\n  type: InstrumentHandlerTypeMetric,\n  callback: InstrumentHandlerCallback,\n  instrumentFn: () => StopListening,\n  previousValue: Metric | undefined,\n  stopOnCallback = false,\n): CleanupHandlerCallback {\n  addHandler(type, callback);\n\n  let stopListening: StopListening | undefined;\n\n  if (!instrumented[type]) {\n    stopListening = instrumentFn();\n    instrumented[type] = true;\n  }\n\n  if (previousValue) {\n    callback({ metric: previousValue });\n  }\n\n  return getCleanupCallback(type, callback, stopOnCallback ? stopListening : undefined);\n}\n\nfunction instrumentPerformanceObserver(type: InstrumentHandlerTypePerformanceObserver): void {\n  const options: PerformanceObserverInit = {};\n\n  // Special per-type options we want to use\n  if (type === 'event') {\n    options.durationThreshold = 0;\n  }\n\n  observe(\n    type,\n    entries => {\n      triggerHandlers(type, { entries });\n    },\n    options,\n  );\n}\n\nfunction addHandler(type: InstrumentHandlerType, handler: InstrumentHandlerCallback): void {\n  handlers[type] = handlers[type] || [];\n  (handlers[type] as InstrumentHandlerCallback[]).push(handler);\n}\n\n// Get a callback which can be called to remove the instrumentation handler\nfunction getCleanupCallback(\n  type: InstrumentHandlerType,\n  callback: InstrumentHandlerCallback,\n  stopListening: StopListening,\n): CleanupHandlerCallback {\n  return () => {\n    if (stopListening) {\n      stopListening();\n    }\n\n    const typeHandlers = handlers[type];\n\n    if (!typeHandlers) {\n      return;\n    }\n\n    const index = typeHandlers.indexOf(callback);\n    if (index !== -1) {\n      typeHandlers.splice(index, 1);\n    }\n  };\n}\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { initMetric } from './lib/initMetric';\nimport { observe } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport type { CLSMetric, ReportCallback, StopListening } from './types';\n\n/**\n * Calculates the [CLS](https://web.dev/cls/) value for the current page and\n * calls the `callback` function once the value is ready to be reported, along\n * with all `layout-shift` performance entries that were used in the metric\n * value calculation. The reported value is a `double` (corresponding to a\n * [layout shift score](https://web.dev/cls/#layout-shift-score)).\n *\n * If the `reportAllChanges` configuration option is set to `true`, the\n * `callback` function will be called as soon as the value is initially\n * determined as well as any time the value changes throughout the page\n * lifespan.\n *\n * _**Important:** CLS should be continually monitored for changes throughout\n * the entire lifespan of a page—including if the user returns to the page after\n * it's been hidden/backgrounded. However, since browsers often [will not fire\n * additional callbacks once the user has backgrounded a\n * page](https://developer.chrome.com/blog/page-lifecycle-api/#advice-hidden),\n * `callback` is always called when the page's visibility state changes to\n * hidden. As a result, the `callback` function might be called multiple times\n * during the same page load._\n */\nexport const onCLS = (\n  onReport: ReportCallback,\n  options: { reportAllChanges?: boolean } = {},\n): StopListening | undefined => {\n  const metric = initMetric('CLS', 0);\n  let report: ReturnType<typeof bindReporter>;\n\n  let sessionValue = 0;\n  let sessionEntries: PerformanceEntry[] = [];\n\n  // const handleEntries = (entries: Metric['entries']) => {\n  const handleEntries = (entries: LayoutShift[]): void => {\n    entries.forEach(entry => {\n      // Only count layout shifts without recent user input.\n      if (!entry.hadRecentInput) {\n        const firstSessionEntry = sessionEntries[0];\n        const lastSessionEntry = sessionEntries[sessionEntries.length - 1];\n\n        // If the entry occurred less than 1 second after the previous entry and\n        // less than 5 seconds after the first entry in the session, include the\n        // entry in the current session. Otherwise, start a new session.\n        if (\n          sessionValue &&\n          sessionEntries.length !== 0 &&\n          entry.startTime - lastSessionEntry.startTime < 1000 &&\n          entry.startTime - firstSessionEntry.startTime < 5000\n        ) {\n          sessionValue += entry.value;\n          sessionEntries.push(entry);\n        } else {\n          sessionValue = entry.value;\n          sessionEntries = [entry];\n        }\n\n        // If the current session value is larger than the current CLS value,\n        // update CLS and the entries contributing to it.\n        if (sessionValue > metric.value) {\n          metric.value = sessionValue;\n          metric.entries = sessionEntries;\n          if (report) {\n            report();\n          }\n        }\n      }\n    });\n  };\n\n  const po = observe('layout-shift', handleEntries);\n  if (po) {\n    report = bindReporter(onReport, metric, options.reportAllChanges);\n\n    const stopListening = (): void => {\n      handleEntries(po.takeRecords() as CLSMetric['entries']);\n      report(true);\n    };\n\n    onHidden(stopListening);\n\n    return stopListening;\n  }\n\n  return;\n};\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher';\nimport { initMetric } from './lib/initMetric';\nimport { observe } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport type { FIDMetric, PerformanceEventTiming, ReportCallback } from './types';\n\n/**\n * Calculates the [FID](https://web.dev/fid/) value for the current page and\n * calls the `callback` function once the value is ready, along with the\n * relevant `first-input` performance entry used to determine the value. The\n * reported value is a `DOMHighResTimeStamp`.\n *\n * _**Important:** since FID is only reported after the user interacts with the\n * page, it's possible that it will not be reported for some page loads._\n */\nexport const onFID = (onReport: ReportCallback): void => {\n  const visibilityWatcher = getVisibilityWatcher();\n  const metric = initMetric('FID');\n  // eslint-disable-next-line prefer-const\n  let report: ReturnType<typeof bindReporter>;\n\n  const handleEntry = (entry: PerformanceEventTiming): void => {\n    // Only report if the page wasn't hidden prior to the first input.\n    if (entry.startTime < visibilityWatcher.firstHiddenTime) {\n      metric.value = entry.processingStart - entry.startTime;\n      metric.entries.push(entry);\n      report(true);\n    }\n  };\n\n  const handleEntries = (entries: FIDMetric['entries']): void => {\n    (entries as PerformanceEventTiming[]).forEach(handleEntry);\n  };\n\n  const po = observe('first-input', handleEntries);\n  report = bindReporter(onReport, metric);\n\n  if (po) {\n    onHidden(() => {\n      handleEntries(po.takeRecords() as FIDMetric['entries']);\n      po.disconnect();\n    }, true);\n  }\n};\n","import type { DsnComponents, DsnLike, DsnProtocol } from '@sentry/types';\n\nimport { DEBUG_BUILD } from './debug-build';\nimport { consoleSandbox, logger } from './logger';\n\n/** Regular expression used to parse a Dsn. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+)?)?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n\nfunction isValidProtocol(protocol?: string): protocol is DsnProtocol {\n  return protocol === 'http' || protocol === 'https';\n}\n\n/**\n * Renders the string representation of this Dsn.\n *\n * By default, this will render the public representation without the password\n * component. To get the deprecated private representation, set `withPassword`\n * to true.\n *\n * @param withPassword When set to true, the password will be included.\n */\nexport function dsnToString(dsn: DsnComponents, withPassword: boolean = false): string {\n  const { host, path, pass, port, projectId, protocol, publicKey } = dsn;\n  return (\n    `${protocol}://${publicKey}${withPassword && pass ? `:${pass}` : ''}` +\n    `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`\n  );\n}\n\n/**\n * Parses a Dsn from a given string.\n *\n * @param str A Dsn as string\n * @returns Dsn as DsnComponents or undefined if @param str is not a valid DSN string\n */\nexport function dsnFromString(str: string): DsnComponents | undefined {\n  const match = DSN_REGEX.exec(str);\n\n  if (!match) {\n    // This should be logged to the console\n    consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.error(`Invalid Sentry Dsn: ${str}`);\n    });\n    return undefined;\n  }\n\n  const [protocol, publicKey, pass = '', host, port = '', lastPath] = match.slice(1);\n  let path = '';\n  let projectId = lastPath;\n\n  const split = projectId.split('/');\n  if (split.length > 1) {\n    path = split.slice(0, -1).join('/');\n    projectId = split.pop() as string;\n  }\n\n  if (projectId) {\n    const projectMatch = projectId.match(/^\\d+/);\n    if (projectMatch) {\n      projectId = projectMatch[0];\n    }\n  }\n\n  return dsnFromComponents({ host, pass, path, projectId, port, protocol: protocol as DsnProtocol, publicKey });\n}\n\nfunction dsnFromComponents(components: DsnComponents): DsnComponents {\n  return {\n    protocol: components.protocol,\n    publicKey: components.publicKey || '',\n    pass: components.pass || '',\n    host: components.host,\n    port: components.port || '',\n    path: components.path || '',\n    projectId: components.projectId,\n  };\n}\n\nfunction validateDsn(dsn: DsnComponents): boolean {\n  if (!DEBUG_BUILD) {\n    return true;\n  }\n\n  const { port, projectId, protocol } = dsn;\n\n  const requiredComponents: ReadonlyArray<keyof DsnComponents> = ['protocol', 'publicKey', 'host', 'projectId'];\n  const hasMissingRequiredComponent = requiredComponents.find(component => {\n    if (!dsn[component]) {\n      logger.error(`Invalid Sentry Dsn: ${component} missing`);\n      return true;\n    }\n    return false;\n  });\n\n  if (hasMissingRequiredComponent) {\n    return false;\n  }\n\n  if (!projectId.match(/^\\d+$/)) {\n    logger.error(`Invalid Sentry Dsn: Invalid projectId ${projectId}`);\n    return false;\n  }\n\n  if (!isValidProtocol(protocol)) {\n    logger.error(`Invalid Sentry Dsn: Invalid protocol ${protocol}`);\n    return false;\n  }\n\n  if (port && isNaN(parseInt(port, 10))) {\n    logger.error(`Invalid Sentry Dsn: Invalid port ${port}`);\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Creates a valid Sentry Dsn object, identifying a Sentry instance and project.\n * @returns a valid DsnComponents object or `undefined` if @param from is an invalid DSN source\n */\nexport function makeDsn(from: DsnLike): DsnComponents | undefined {\n  const components = typeof from === 'string' ? dsnFromString(from) : dsnFromComponents(from);\n  if (!components || !validateDsn(components)) {\n    return undefined;\n  }\n  return components;\n}\n","import type {\n  Attachment,\n  AttachmentItem,\n  BaseEnvelopeHeaders,\n  BaseEnvelopeItemHeaders,\n  DataCategory,\n  DsnComponents,\n  Envelope,\n  EnvelopeItemType,\n  Event,\n  EventEnvelopeHeaders,\n  SdkInfo,\n  SdkMetadata,\n  TextEncoderInternal,\n} from '@sentry/types';\n\nimport { dsnToString } from './dsn';\nimport { normalize } from './normalize';\nimport { dropUndefinedKeys } from './object';\n\n/**\n * Creates an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nexport function createEnvelope<E extends Envelope>(headers: E[0], items: E[1] = []): E {\n  return [headers, items] as E;\n}\n\n/**\n * Add an item to an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nexport function addItemToEnvelope<E extends Envelope>(envelope: E, newItem: E[1][number]): E {\n  const [headers, items] = envelope;\n  return [headers, [...items, newItem]] as unknown as E;\n}\n\n/**\n * Convenience function to loop through the items and item types of an envelope.\n * (This function was mostly created because working with envelope types is painful at the moment)\n *\n * If the callback returns true, the rest of the items will be skipped.\n */\nexport function forEachEnvelopeItem<E extends Envelope>(\n  envelope: Envelope,\n  callback: (envelopeItem: E[1][number], envelopeItemType: E[1][number][0]['type']) => boolean | void,\n): boolean {\n  const envelopeItems = envelope[1];\n\n  for (const envelopeItem of envelopeItems) {\n    const envelopeItemType = envelopeItem[0].type;\n    const result = callback(envelopeItem, envelopeItemType);\n\n    if (result) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Returns true if the envelope contains any of the given envelope item types\n */\nexport function envelopeContainsItemType(envelope: Envelope, types: EnvelopeItemType[]): boolean {\n  return forEachEnvelopeItem(envelope, (_, type) => types.includes(type));\n}\n\n/**\n * Encode a string to UTF8.\n */\nfunction encodeUTF8(input: string, textEncoder?: TextEncoderInternal): Uint8Array {\n  const utf8 = textEncoder || new TextEncoder();\n  return utf8.encode(input);\n}\n\n/**\n * Serializes an envelope.\n */\nexport function serializeEnvelope(envelope: Envelope, textEncoder?: TextEncoderInternal): string | Uint8Array {\n  const [envHeaders, items] = envelope;\n\n  // Initially we construct our envelope as a string and only convert to binary chunks if we encounter binary data\n  let parts: string | Uint8Array[] = JSON.stringify(envHeaders);\n\n  function append(next: string | Uint8Array): void {\n    if (typeof parts === 'string') {\n      parts = typeof next === 'string' ? parts + next : [encodeUTF8(parts, textEncoder), next];\n    } else {\n      parts.push(typeof next === 'string' ? encodeUTF8(next, textEncoder) : next);\n    }\n  }\n\n  for (const item of items) {\n    const [itemHeaders, payload] = item;\n\n    append(`\\n${JSON.stringify(itemHeaders)}\\n`);\n\n    if (typeof payload === 'string' || payload instanceof Uint8Array) {\n      append(payload);\n    } else {\n      let stringifiedPayload: string;\n      try {\n        stringifiedPayload = JSON.stringify(payload);\n      } catch (e) {\n        // In case, despite all our efforts to keep `payload` circular-dependency-free, `JSON.strinify()` still\n        // fails, we try again after normalizing it again with infinite normalization depth. This of course has a\n        // performance impact but in this case a performance hit is better than throwing.\n        stringifiedPayload = JSON.stringify(normalize(payload));\n      }\n      append(stringifiedPayload);\n    }\n  }\n\n  return typeof parts === 'string' ? parts : concatBuffers(parts);\n}\n\nfunction concatBuffers(buffers: Uint8Array[]): Uint8Array {\n  const totalLength = buffers.reduce((acc, buf) => acc + buf.length, 0);\n\n  const merged = new Uint8Array(totalLength);\n  let offset = 0;\n  for (const buffer of buffers) {\n    merged.set(buffer, offset);\n    offset += buffer.length;\n  }\n\n  return merged;\n}\n\nexport interface TextDecoderInternal {\n  decode(input?: Uint8Array): string;\n}\n\n/**\n * Parses an envelope\n */\nexport function parseEnvelope(\n  env: string | Uint8Array,\n  textEncoder: TextEncoderInternal,\n  textDecoder: TextDecoderInternal,\n): Envelope {\n  let buffer = typeof env === 'string' ? textEncoder.encode(env) : env;\n\n  function readBinary(length: number): Uint8Array {\n    const bin = buffer.subarray(0, length);\n    // Replace the buffer with the remaining data excluding trailing newline\n    buffer = buffer.subarray(length + 1);\n    return bin;\n  }\n\n  function readJson<T>(): T {\n    let i = buffer.indexOf(0xa);\n    // If we couldn't find a newline, we must have found the end of the buffer\n    if (i < 0) {\n      i = buffer.length;\n    }\n\n    return JSON.parse(textDecoder.decode(readBinary(i))) as T;\n  }\n\n  const envelopeHeader = readJson<BaseEnvelopeHeaders>();\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const items: [any, any][] = [];\n\n  while (buffer.length) {\n    const itemHeader = readJson<BaseEnvelopeItemHeaders>();\n    const binaryLength = typeof itemHeader.length === 'number' ? itemHeader.length : undefined;\n\n    items.push([itemHeader, binaryLength ? readBinary(binaryLength) : readJson()]);\n  }\n\n  return [envelopeHeader, items];\n}\n\n/**\n * Creates attachment envelope items\n */\nexport function createAttachmentEnvelopeItem(\n  attachment: Attachment,\n  textEncoder?: TextEncoderInternal,\n): AttachmentItem {\n  const buffer = typeof attachment.data === 'string' ? encodeUTF8(attachment.data, textEncoder) : attachment.data;\n\n  return [\n    dropUndefinedKeys({\n      type: 'attachment',\n      length: buffer.length,\n      filename: attachment.filename,\n      content_type: attachment.contentType,\n      attachment_type: attachment.attachmentType,\n    }),\n    buffer,\n  ];\n}\n\nconst ITEM_TYPE_TO_DATA_CATEGORY_MAP: Record<EnvelopeItemType, DataCategory> = {\n  session: 'session',\n  sessions: 'session',\n  attachment: 'attachment',\n  transaction: 'transaction',\n  event: 'error',\n  client_report: 'internal',\n  user_report: 'default',\n  profile: 'profile',\n  replay_event: 'replay',\n  replay_recording: 'replay',\n  check_in: 'monitor',\n  feedback: 'feedback',\n  span: 'span',\n  statsd: 'metric_bucket',\n};\n\n/**\n * Maps the type of an envelope item to a data category.\n */\nexport function envelopeItemTypeToDataCategory(type: EnvelopeItemType): DataCategory {\n  return ITEM_TYPE_TO_DATA_CATEGORY_MAP[type];\n}\n\n/** Extracts the minimal SDK info from the metadata or an events */\nexport function getSdkMetadataForEnvelopeHeader(metadataOrEvent?: SdkMetadata | Event): SdkInfo | undefined {\n  if (!metadataOrEvent || !metadataOrEvent.sdk) {\n    return;\n  }\n  const { name, version } = metadataOrEvent.sdk;\n  return { name, version };\n}\n\n/**\n * Creates event envelope headers, based on event, sdk info and tunnel\n * Note: This function was extracted from the core package to make it available in Replay\n */\nexport function createEventEnvelopeHeaders(\n  event: Event,\n  sdkInfo: SdkInfo | undefined,\n  tunnel: string | undefined,\n  dsn?: DsnComponents,\n): EventEnvelopeHeaders {\n  const dynamicSamplingContext = event.sdkProcessingMetadata && event.sdkProcessingMetadata.dynamicSamplingContext;\n  return {\n    event_id: event.event_id as string,\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(!!tunnel && dsn && { dsn: dsnToString(dsn) }),\n    ...(dynamicSamplingContext && {\n      trace: dropUndefinedKeys({ ...dynamicSamplingContext }),\n    }),\n  };\n}\n","import type { DsnComponents, SpanEnvelope, SpanItem } from '@sentry/types';\nimport type { Span } from '@sentry/types';\nimport { createEnvelope, dsnToString } from '@sentry/utils';\n\n/**\n * Create envelope from Span item.\n */\nexport function createSpanEnvelope(spans: Span[], dsn?: DsnComponents): SpanEnvelope {\n  const headers: SpanEnvelope[0] = {\n    sent_at: new Date().toISOString(),\n  };\n\n  if (dsn) {\n    headers.dsn = dsnToString(dsn);\n  }\n\n  const items = spans.map(createSpanItem);\n  return createEnvelope<SpanEnvelope>(headers, items);\n}\n\nfunction createSpanItem(span: Span): SpanItem {\n  const spanHeaders: SpanItem[0] = {\n    type: 'span',\n  };\n  return [spanHeaders, span];\n}\n","import type { Transaction } from '@sentry/core';\nimport type { Span, SpanContext } from '@sentry/types';\n\n/**\n * Checks if a given value is a valid measurement value.\n */\nexport function isMeasurementValue(value: unknown): value is number {\n  return typeof value === 'number' && isFinite(value);\n}\n\n/**\n * Helper function to start child on transactions. This function will make sure that the transaction will\n * use the start timestamp of the created child span if it is earlier than the transactions actual\n * start timestamp.\n *\n * Note: this will not be possible anymore in v8,\n * unless we do some special handling for browser here...\n */\nexport function _startChild(transaction: Transaction, { startTimestamp, ...ctx }: SpanContext): Span {\n  // eslint-disable-next-line deprecation/deprecation\n  if (startTimestamp && transaction.startTimestamp > startTimestamp) {\n    // eslint-disable-next-line deprecation/deprecation\n    transaction.startTimestamp = startTimestamp;\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  return transaction.startChild({\n    startTimestamp,\n    ...ctx,\n  });\n}\n","function _objectWithoutPropertiesLoose(r, e) {\n  if (null == r) return {};\n  var t = {};\n  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {\n    if (-1 !== e.indexOf(n)) continue;\n    t[n] = r[n];\n  }\n  return t;\n}\nexport { _objectWithoutPropertiesLoose as default };","/* eslint-disable max-lines */\nimport type { IdleTransaction, Transaction } from '@sentry/core';\nimport {\n  Span,\n  getActiveTransaction,\n  getClient,\n  hasTracingEnabled,\n  isValidSampleRate,\n  setMeasurement,\n} from '@sentry/core';\nimport type { ClientOptions, Measurements, SpanContext, TransactionContext } from '@sentry/types';\nimport { browserPerformanceTimeOrigin, getComponentName, htmlTreeAsString, logger, parseUrl } from '@sentry/utils';\n\nimport { spanToJSON } from '@sentry/core';\nimport { DEBUG_BUILD } from '../../common/debug-build';\nimport {\n  addClsInstrumentationHandler,\n  addFidInstrumentationHandler,\n  addInpInstrumentationHandler,\n  addLcpInstrumentationHandler,\n  addPerformanceInstrumentationHandler,\n  addTtfbInstrumentationHandler,\n} from '../instrument';\nimport { WINDOW } from '../types';\nimport { getVisibilityWatcher } from '../web-vitals/lib/getVisibilityWatcher';\nimport type {\n  InteractionRouteNameMapping,\n  NavigatorDeviceMemory,\n  NavigatorNetworkInformation,\n} from '../web-vitals/types';\nimport { _startChild, isMeasurementValue } from './utils';\n\nimport { createSpanEnvelope } from '@sentry/core';\nimport { getNavigationEntry } from '../web-vitals/lib/getNavigationEntry';\n\nconst MAX_INT_AS_BYTES = 2147483647;\n\n/**\n * Converts from milliseconds to seconds\n * @param time time in ms\n */\nfunction msToSec(time: number): number {\n  return time / 1000;\n}\n\nfunction getBrowserPerformanceAPI(): Performance | undefined {\n  // @ts-expect-error we want to make sure all of these are available, even if TS is sure they are\n  return WINDOW && WINDOW.addEventListener && WINDOW.performance;\n}\n\nlet _performanceCursor: number = 0;\n\nlet _measurements: Measurements = {};\nlet _lcpEntry: LargestContentfulPaint | undefined;\nlet _clsEntry: LayoutShift | undefined;\n\n/**\n * Start tracking web vitals.\n * The callback returned by this function can be used to stop tracking & ensure all measurements are final & captured.\n *\n * @returns A function that forces web vitals collection\n */\nexport function startTrackingWebVitals(): () => void {\n  const performance = getBrowserPerformanceAPI();\n  if (performance && browserPerformanceTimeOrigin) {\n    // @ts-expect-error we want to make sure all of these are available, even if TS is sure they are\n    if (performance.mark) {\n      WINDOW.performance.mark('sentry-tracing-init');\n    }\n    const fidCallback = _trackFID();\n    const clsCallback = _trackCLS();\n    const lcpCallback = _trackLCP();\n    const ttfbCallback = _trackTtfb();\n\n    return (): void => {\n      fidCallback();\n      clsCallback();\n      lcpCallback();\n      ttfbCallback();\n    };\n  }\n\n  return () => undefined;\n}\n\n/**\n * Start tracking long tasks.\n */\nexport function startTrackingLongTasks(): void {\n  addPerformanceInstrumentationHandler('longtask', ({ entries }) => {\n    for (const entry of entries) {\n      // eslint-disable-next-line deprecation/deprecation\n      const transaction = getActiveTransaction() as IdleTransaction | undefined;\n      if (!transaction) {\n        return;\n      }\n      const startTime = msToSec((browserPerformanceTimeOrigin as number) + entry.startTime);\n      const duration = msToSec(entry.duration);\n\n      // eslint-disable-next-line deprecation/deprecation\n      transaction.startChild({\n        description: 'Main UI thread blocked',\n        op: 'ui.long-task',\n        origin: 'auto.ui.browser.metrics',\n        startTimestamp: startTime,\n        endTimestamp: startTime + duration,\n      });\n    }\n  });\n}\n\n/**\n * Start tracking interaction events.\n */\nexport function startTrackingInteractions(): void {\n  addPerformanceInstrumentationHandler('event', ({ entries }) => {\n    for (const entry of entries) {\n      // eslint-disable-next-line deprecation/deprecation\n      const transaction = getActiveTransaction() as IdleTransaction | undefined;\n      if (!transaction) {\n        return;\n      }\n\n      if (entry.name === 'click') {\n        const startTime = msToSec((browserPerformanceTimeOrigin as number) + entry.startTime);\n        const duration = msToSec(entry.duration);\n\n        const span: SpanContext = {\n          description: htmlTreeAsString(entry.target),\n          op: `ui.interaction.${entry.name}`,\n          origin: 'auto.ui.browser.metrics',\n          startTimestamp: startTime,\n          endTimestamp: startTime + duration,\n        };\n\n        const componentName = getComponentName(entry.target);\n        if (componentName) {\n          span.attributes = { 'ui.component_name': componentName };\n        }\n\n        // eslint-disable-next-line deprecation/deprecation\n        transaction.startChild(span);\n      }\n    }\n  });\n}\n\n/**\n * Start tracking INP webvital events.\n */\nexport function startTrackingINP(\n  interactionIdtoRouteNameMapping: InteractionRouteNameMapping,\n  interactionsSampleRate: number,\n): () => void {\n  const performance = getBrowserPerformanceAPI();\n  if (performance && browserPerformanceTimeOrigin) {\n    const inpCallback = _trackINP(interactionIdtoRouteNameMapping, interactionsSampleRate);\n\n    return (): void => {\n      inpCallback();\n    };\n  }\n\n  return () => undefined;\n}\n\n/** Starts tracking the Cumulative Layout Shift on the current page. */\nfunction _trackCLS(): () => void {\n  return addClsInstrumentationHandler(({ metric }) => {\n    const entry = metric.entries[metric.entries.length - 1];\n    if (!entry) {\n      return;\n    }\n\n    DEBUG_BUILD && logger.log('[Measurements] Adding CLS');\n    _measurements['cls'] = { value: metric.value, unit: '' };\n    _clsEntry = entry as LayoutShift;\n  }, true);\n}\n\n/** Starts tracking the Largest Contentful Paint on the current page. */\nfunction _trackLCP(): () => void {\n  return addLcpInstrumentationHandler(({ metric }) => {\n    const entry = metric.entries[metric.entries.length - 1];\n    if (!entry) {\n      return;\n    }\n\n    DEBUG_BUILD && logger.log('[Measurements] Adding LCP');\n    _measurements['lcp'] = { value: metric.value, unit: 'millisecond' };\n    _lcpEntry = entry as LargestContentfulPaint;\n  }, true);\n}\n\n/** Starts tracking the First Input Delay on the current page. */\nfunction _trackFID(): () => void {\n  return addFidInstrumentationHandler(({ metric }) => {\n    const entry = metric.entries[metric.entries.length - 1];\n    if (!entry) {\n      return;\n    }\n\n    const timeOrigin = msToSec(browserPerformanceTimeOrigin as number);\n    const startTime = msToSec(entry.startTime);\n    DEBUG_BUILD && logger.log('[Measurements] Adding FID');\n    _measurements['fid'] = { value: metric.value, unit: 'millisecond' };\n    _measurements['mark.fid'] = { value: timeOrigin + startTime, unit: 'second' };\n  });\n}\n\nfunction _trackTtfb(): () => void {\n  return addTtfbInstrumentationHandler(({ metric }) => {\n    const entry = metric.entries[metric.entries.length - 1];\n    if (!entry) {\n      return;\n    }\n\n    DEBUG_BUILD && logger.log('[Measurements] Adding TTFB');\n    _measurements['ttfb'] = { value: metric.value, unit: 'millisecond' };\n  });\n}\n\nconst INP_ENTRY_MAP: Record<string, 'click' | 'hover' | 'drag' | 'press'> = {\n  click: 'click',\n  pointerdown: 'click',\n  pointerup: 'click',\n  mousedown: 'click',\n  mouseup: 'click',\n  touchstart: 'click',\n  touchend: 'click',\n  mouseover: 'hover',\n  mouseout: 'hover',\n  mouseenter: 'hover',\n  mouseleave: 'hover',\n  pointerover: 'hover',\n  pointerout: 'hover',\n  pointerenter: 'hover',\n  pointerleave: 'hover',\n  dragstart: 'drag',\n  dragend: 'drag',\n  drag: 'drag',\n  dragenter: 'drag',\n  dragleave: 'drag',\n  dragover: 'drag',\n  drop: 'drag',\n  keydown: 'press',\n  keyup: 'press',\n  keypress: 'press',\n  input: 'press',\n};\n\n/** Starts tracking the Interaction to Next Paint on the current page. */\nfunction _trackINP(\n  interactionIdToRouteNameMapping: InteractionRouteNameMapping,\n  interactionsSampleRate: number,\n): () => void {\n  return addInpInstrumentationHandler(({ metric }) => {\n    if (metric.value === undefined) {\n      return;\n    }\n    const entry = metric.entries.find(\n      entry => entry.duration === metric.value && INP_ENTRY_MAP[entry.name] !== undefined,\n    );\n    const client = getClient();\n    if (!entry || !client) {\n      return;\n    }\n    const interactionType = INP_ENTRY_MAP[entry.name];\n    const options = client.getOptions();\n    /** Build the INP span, create an envelope from the span, and then send the envelope */\n    const startTime = msToSec((browserPerformanceTimeOrigin as number) + entry.startTime);\n    const duration = msToSec(metric.value);\n    const interaction =\n      entry.interactionId !== undefined ? interactionIdToRouteNameMapping[entry.interactionId] : undefined;\n    if (interaction === undefined) {\n      return;\n    }\n    const { routeName, parentContext, activeTransaction, user, replayId } = interaction;\n    const userDisplay = user !== undefined ? user.email || user.id || user.ip_address : undefined;\n    // eslint-disable-next-line deprecation/deprecation\n    const profileId = activeTransaction !== undefined ? activeTransaction.getProfileId() : undefined;\n    const span = new Span({\n      startTimestamp: startTime,\n      endTimestamp: startTime + duration,\n      op: `ui.interaction.${interactionType}`,\n      name: htmlTreeAsString(entry.target),\n      attributes: {\n        release: options.release,\n        environment: options.environment,\n        transaction: routeName,\n        ...(userDisplay !== undefined && userDisplay !== '' ? { user: userDisplay } : {}),\n        ...(profileId !== undefined ? { profile_id: profileId } : {}),\n        ...(replayId !== undefined ? { replay_id: replayId } : {}),\n      },\n      exclusiveTime: metric.value,\n      measurements: {\n        inp: { value: metric.value, unit: 'millisecond' },\n      },\n    });\n\n    /** Check to see if the span should be sampled */\n    const sampleRate = getSampleRate(parentContext, options, interactionsSampleRate);\n\n    if (!sampleRate) {\n      return;\n    }\n\n    if (Math.random() < (sampleRate as number | boolean)) {\n      const envelope = span ? createSpanEnvelope([span], client.getDsn()) : undefined;\n      const transport = client && client.getTransport();\n      if (transport && envelope) {\n        transport.send(envelope).then(null, reason => {\n          DEBUG_BUILD && logger.error('Error while sending interaction:', reason);\n        });\n      }\n      return;\n    }\n  });\n}\n\n/** Add performance related spans to a transaction */\nexport function addPerformanceEntries(transaction: Transaction): void {\n  const performance = getBrowserPerformanceAPI();\n  if (!performance || !WINDOW.performance.getEntries || !browserPerformanceTimeOrigin) {\n    // Gatekeeper if performance API not available\n    return;\n  }\n\n  DEBUG_BUILD && logger.log('[Tracing] Adding & adjusting spans using Performance API');\n  const timeOrigin = msToSec(browserPerformanceTimeOrigin);\n\n  const performanceEntries = performance.getEntries();\n\n  const { op, start_timestamp: transactionStartTime } = spanToJSON(transaction);\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  performanceEntries.slice(_performanceCursor).forEach((entry: Record<string, any>) => {\n    const startTime = msToSec(entry.startTime);\n    const duration = msToSec(entry.duration);\n\n    // eslint-disable-next-line deprecation/deprecation\n    if (transaction.op === 'navigation' && transactionStartTime && timeOrigin + startTime < transactionStartTime) {\n      return;\n    }\n\n    switch (entry.entryType) {\n      case 'navigation': {\n        _addNavigationSpans(transaction, entry, timeOrigin);\n        break;\n      }\n      case 'mark':\n      case 'paint':\n      case 'measure': {\n        _addMeasureSpans(transaction, entry, startTime, duration, timeOrigin);\n\n        // capture web vitals\n        const firstHidden = getVisibilityWatcher();\n        // Only report if the page wasn't hidden prior to the web vital.\n        const shouldRecord = entry.startTime < firstHidden.firstHiddenTime;\n\n        if (entry.name === 'first-paint' && shouldRecord) {\n          DEBUG_BUILD && logger.log('[Measurements] Adding FP');\n          _measurements['fp'] = { value: entry.startTime, unit: 'millisecond' };\n        }\n        if (entry.name === 'first-contentful-paint' && shouldRecord) {\n          DEBUG_BUILD && logger.log('[Measurements] Adding FCP');\n          _measurements['fcp'] = { value: entry.startTime, unit: 'millisecond' };\n        }\n        break;\n      }\n      case 'resource': {\n        _addResourceSpans(transaction, entry, entry.name as string, startTime, duration, timeOrigin);\n        break;\n      }\n      default:\n      // Ignore other entry types.\n    }\n  });\n\n  _performanceCursor = Math.max(performanceEntries.length - 1, 0);\n\n  _trackNavigator(transaction);\n\n  // Measurements are only available for pageload transactions\n  if (op === 'pageload') {\n    _addTtfbRequestTimeToMeasurements(_measurements);\n\n    ['fcp', 'fp', 'lcp'].forEach(name => {\n      if (!_measurements[name] || !transactionStartTime || timeOrigin >= transactionStartTime) {\n        return;\n      }\n      // The web vitals, fcp, fp, lcp, and ttfb, all measure relative to timeOrigin.\n      // Unfortunately, timeOrigin is not captured within the transaction span data, so these web vitals will need\n      // to be adjusted to be relative to transaction.startTimestamp.\n      const oldValue = _measurements[name].value;\n      const measurementTimestamp = timeOrigin + msToSec(oldValue);\n\n      // normalizedValue should be in milliseconds\n      const normalizedValue = Math.abs((measurementTimestamp - transactionStartTime) * 1000);\n      const delta = normalizedValue - oldValue;\n\n      DEBUG_BUILD && logger.log(`[Measurements] Normalized ${name} from ${oldValue} to ${normalizedValue} (${delta})`);\n      _measurements[name].value = normalizedValue;\n    });\n\n    const fidMark = _measurements['mark.fid'];\n    if (fidMark && _measurements['fid']) {\n      // create span for FID\n      _startChild(transaction, {\n        description: 'first input delay',\n        endTimestamp: fidMark.value + msToSec(_measurements['fid'].value),\n        op: 'ui.action',\n        origin: 'auto.ui.browser.metrics',\n        startTimestamp: fidMark.value,\n      });\n\n      // Delete mark.fid as we don't want it to be part of final payload\n      delete _measurements['mark.fid'];\n    }\n\n    // If FCP is not recorded we should not record the cls value\n    // according to the new definition of CLS.\n    if (!('fcp' in _measurements)) {\n      delete _measurements.cls;\n    }\n\n    Object.keys(_measurements).forEach(measurementName => {\n      setMeasurement(measurementName, _measurements[measurementName].value, _measurements[measurementName].unit);\n    });\n\n    _tagMetricInfo(transaction);\n  }\n\n  _lcpEntry = undefined;\n  _clsEntry = undefined;\n  _measurements = {};\n}\n\n/** Create measure related spans */\nexport function _addMeasureSpans(\n  transaction: Transaction,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  entry: Record<string, any>,\n  startTime: number,\n  duration: number,\n  timeOrigin: number,\n): number {\n  const measureStartTimestamp = timeOrigin + startTime;\n  const measureEndTimestamp = measureStartTimestamp + duration;\n\n  _startChild(transaction, {\n    description: entry.name as string,\n    endTimestamp: measureEndTimestamp,\n    op: entry.entryType as string,\n    origin: 'auto.resource.browser.metrics',\n    startTimestamp: measureStartTimestamp,\n  });\n\n  return measureStartTimestamp;\n}\n\n/** Instrument navigation entries */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _addNavigationSpans(transaction: Transaction, entry: Record<string, any>, timeOrigin: number): void {\n  ['unloadEvent', 'redirect', 'domContentLoadedEvent', 'loadEvent', 'connect'].forEach(event => {\n    _addPerformanceNavigationTiming(transaction, entry, event, timeOrigin);\n  });\n  _addPerformanceNavigationTiming(transaction, entry, 'secureConnection', timeOrigin, 'TLS/SSL', 'connectEnd');\n  _addPerformanceNavigationTiming(transaction, entry, 'fetch', timeOrigin, 'cache', 'domainLookupStart');\n  _addPerformanceNavigationTiming(transaction, entry, 'domainLookup', timeOrigin, 'DNS');\n  _addRequest(transaction, entry, timeOrigin);\n}\n\n/** Create performance navigation related spans */\nfunction _addPerformanceNavigationTiming(\n  transaction: Transaction,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  entry: Record<string, any>,\n  event: string,\n  timeOrigin: number,\n  description?: string,\n  eventEnd?: string,\n): void {\n  const end = eventEnd ? (entry[eventEnd] as number | undefined) : (entry[`${event}End`] as number | undefined);\n  const start = entry[`${event}Start`] as number | undefined;\n  if (!start || !end) {\n    return;\n  }\n  _startChild(transaction, {\n    op: 'browser',\n    origin: 'auto.browser.browser.metrics',\n    description: description || event,\n    startTimestamp: timeOrigin + msToSec(start),\n    endTimestamp: timeOrigin + msToSec(end),\n  });\n}\n\n/** Create request and response related spans */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _addRequest(transaction: Transaction, entry: Record<string, any>, timeOrigin: number): void {\n  if (entry.responseEnd) {\n    // It is possible that we are collecting these metrics when the page hasn't finished loading yet, for example when the HTML slowly streams in.\n    // In this case, ie. when the document request hasn't finished yet, `entry.responseEnd` will be 0.\n    // In order not to produce faulty spans, where the end timestamp is before the start timestamp, we will only collect\n    // these spans when the responseEnd value is available. The backend (Relay) would drop the entire transaction if it contained faulty spans.\n    _startChild(transaction, {\n      op: 'browser',\n      origin: 'auto.browser.browser.metrics',\n      description: 'request',\n      startTimestamp: timeOrigin + msToSec(entry.requestStart as number),\n      endTimestamp: timeOrigin + msToSec(entry.responseEnd as number),\n    });\n\n    _startChild(transaction, {\n      op: 'browser',\n      origin: 'auto.browser.browser.metrics',\n      description: 'response',\n      startTimestamp: timeOrigin + msToSec(entry.responseStart as number),\n      endTimestamp: timeOrigin + msToSec(entry.responseEnd as number),\n    });\n  }\n}\n\nexport interface ResourceEntry extends Record<string, unknown> {\n  initiatorType?: string;\n  transferSize?: number;\n  encodedBodySize?: number;\n  decodedBodySize?: number;\n  renderBlockingStatus?: string;\n}\n\n/** Create resource-related spans */\nexport function _addResourceSpans(\n  transaction: Transaction,\n  entry: ResourceEntry,\n  resourceUrl: string,\n  startTime: number,\n  duration: number,\n  timeOrigin: number,\n): void {\n  // we already instrument based on fetch and xhr, so we don't need to\n  // duplicate spans here.\n  if (entry.initiatorType === 'xmlhttprequest' || entry.initiatorType === 'fetch') {\n    return;\n  }\n\n  const parsedUrl = parseUrl(resourceUrl);\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const data: Record<string, any> = {};\n  setResourceEntrySizeData(data, entry, 'transferSize', 'http.response_transfer_size');\n  setResourceEntrySizeData(data, entry, 'encodedBodySize', 'http.response_content_length');\n  setResourceEntrySizeData(data, entry, 'decodedBodySize', 'http.decoded_response_content_length');\n\n  if ('renderBlockingStatus' in entry) {\n    data['resource.render_blocking_status'] = entry.renderBlockingStatus;\n  }\n  if (parsedUrl.protocol) {\n    data['url.scheme'] = parsedUrl.protocol.split(':').pop(); // the protocol returned by parseUrl includes a :, but OTEL spec does not, so we remove it.\n  }\n\n  if (parsedUrl.host) {\n    data['server.address'] = parsedUrl.host;\n  }\n\n  data['url.same_origin'] = resourceUrl.includes(WINDOW.location.origin);\n\n  const startTimestamp = timeOrigin + startTime;\n  const endTimestamp = startTimestamp + duration;\n\n  _startChild(transaction, {\n    description: resourceUrl.replace(WINDOW.location.origin, ''),\n    endTimestamp,\n    op: entry.initiatorType ? `resource.${entry.initiatorType}` : 'resource.other',\n    origin: 'auto.resource.browser.metrics',\n    startTimestamp,\n    data,\n  });\n}\n\n/**\n * Capture the information of the user agent.\n */\nfunction _trackNavigator(transaction: Transaction): void {\n  const navigator = WINDOW.navigator as null | (Navigator & NavigatorNetworkInformation & NavigatorDeviceMemory);\n  if (!navigator) {\n    return;\n  }\n\n  // track network connectivity\n  const connection = navigator.connection;\n  if (connection) {\n    if (connection.effectiveType) {\n      // TODO: Can we rewrite this to an attribute?\n      // eslint-disable-next-line deprecation/deprecation\n      transaction.setTag('effectiveConnectionType', connection.effectiveType);\n    }\n\n    if (connection.type) {\n      // TODO: Can we rewrite this to an attribute?\n      // eslint-disable-next-line deprecation/deprecation\n      transaction.setTag('connectionType', connection.type);\n    }\n\n    if (isMeasurementValue(connection.rtt)) {\n      _measurements['connection.rtt'] = { value: connection.rtt, unit: 'millisecond' };\n    }\n  }\n\n  if (isMeasurementValue(navigator.deviceMemory)) {\n    // TODO: Can we rewrite this to an attribute?\n    // eslint-disable-next-line deprecation/deprecation\n    transaction.setTag('deviceMemory', `${navigator.deviceMemory} GB`);\n  }\n\n  if (isMeasurementValue(navigator.hardwareConcurrency)) {\n    // TODO: Can we rewrite this to an attribute?\n    // eslint-disable-next-line deprecation/deprecation\n    transaction.setTag('hardwareConcurrency', String(navigator.hardwareConcurrency));\n  }\n}\n\n/** Add LCP / CLS data to transaction to allow debugging */\nfunction _tagMetricInfo(transaction: Transaction): void {\n  if (_lcpEntry) {\n    DEBUG_BUILD && logger.log('[Measurements] Adding LCP Data');\n\n    // Capture Properties of the LCP element that contributes to the LCP.\n\n    if (_lcpEntry.element) {\n      // TODO: Can we rewrite this to an attribute?\n      // eslint-disable-next-line deprecation/deprecation\n      transaction.setTag('lcp.element', htmlTreeAsString(_lcpEntry.element));\n    }\n\n    if (_lcpEntry.id) {\n      // TODO: Can we rewrite this to an attribute?\n      // eslint-disable-next-line deprecation/deprecation\n      transaction.setTag('lcp.id', _lcpEntry.id);\n    }\n\n    if (_lcpEntry.url) {\n      // Trim URL to the first 200 characters.\n      // TODO: Can we rewrite this to an attribute?\n      // eslint-disable-next-line deprecation/deprecation\n      transaction.setTag('lcp.url', _lcpEntry.url.trim().slice(0, 200));\n    }\n\n    // TODO: Can we rewrite this to an attribute?\n    // eslint-disable-next-line deprecation/deprecation\n    transaction.setTag('lcp.size', _lcpEntry.size);\n  }\n\n  // See: https://developer.mozilla.org/en-US/docs/Web/API/LayoutShift\n  if (_clsEntry && _clsEntry.sources) {\n    DEBUG_BUILD && logger.log('[Measurements] Adding CLS Data');\n    _clsEntry.sources.forEach((source, index) =>\n      // TODO: Can we rewrite this to an attribute?\n      // eslint-disable-next-line deprecation/deprecation\n      transaction.setTag(`cls.source.${index + 1}`, htmlTreeAsString(source.node)),\n    );\n  }\n}\n\nfunction setResourceEntrySizeData(\n  data: Record<string, unknown>,\n  entry: ResourceEntry,\n  key: keyof Pick<ResourceEntry, 'transferSize' | 'encodedBodySize' | 'decodedBodySize'>,\n  dataKey: 'http.response_transfer_size' | 'http.response_content_length' | 'http.decoded_response_content_length',\n): void {\n  const entryVal = entry[key];\n  if (entryVal != null && entryVal < MAX_INT_AS_BYTES) {\n    data[dataKey] = entryVal;\n  }\n}\n\n/**\n * Add ttfb request time information to measurements.\n *\n * ttfb information is added via vendored web vitals library.\n */\nfunction _addTtfbRequestTimeToMeasurements(_measurements: Measurements): void {\n  const navEntry = getNavigationEntry();\n  if (!navEntry) {\n    return;\n  }\n\n  const { responseStart, requestStart } = navEntry;\n\n  if (requestStart <= responseStart) {\n    DEBUG_BUILD && logger.log('[Measurements] Adding TTFB Request Time');\n    _measurements['ttfb.requestTime'] = {\n      value: responseStart - requestStart,\n      unit: 'millisecond',\n    };\n  }\n}\n\n/** Taken from @sentry/core sampling.ts */\nfunction getSampleRate(\n  transactionContext: TransactionContext | undefined,\n  options: ClientOptions,\n  interactionsSampleRate: number,\n): number | boolean {\n  if (!hasTracingEnabled(options)) {\n    return false;\n  }\n  let sampleRate;\n  if (transactionContext !== undefined && typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler({\n      transactionContext,\n      name: transactionContext.name,\n      parentSampled: transactionContext.parentSampled,\n      attributes: {\n        // eslint-disable-next-line deprecation/deprecation\n        ...transactionContext.data,\n        ...transactionContext.attributes,\n      },\n      location: WINDOW.location,\n    });\n  } else if (transactionContext !== undefined && transactionContext.sampled !== undefined) {\n    sampleRate = transactionContext.sampled;\n  } else if (typeof options.tracesSampleRate !== 'undefined') {\n    sampleRate = options.tracesSampleRate;\n  } else {\n    sampleRate = 1;\n  }\n  if (!isValidSampleRate(sampleRate)) {\n    DEBUG_BUILD && logger.warn('[Tracing] Discarding interaction span because of invalid sample rate.');\n    return false;\n  }\n  if (sampleRate === true) {\n    return interactionsSampleRate;\n  } else if (sampleRate === false) {\n    return 0;\n  }\n  return sampleRate * interactionsSampleRate;\n}\n","/* eslint-disable max-lines */\nimport {\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  getClient,\n  getCurrentScope,\n  getDynamicSamplingContextFromClient,\n  getDynamicSamplingContextFromSpan,\n  getIsolationScope,\n  hasTracingEnabled,\n  setHttpStatus,\n  spanToJSON,\n  spanToTraceHeader,\n  startInactiveSpan,\n} from '@sentry/core';\nimport type { HandlerDataXhr, SentryWrappedXMLHttpRequest, Span } from '@sentry/types';\nimport {\n  BAGGAGE_HEADER_NAME,\n  SENTRY_XHR_DATA_KEY,\n  addFetchInstrumentationHandler,\n  addXhrInstrumentationHandler,\n  browserPerformanceTimeOrigin,\n  dynamicSamplingContextToSentryBaggageHeader,\n  generateSentryTraceHeader,\n  parseUrl,\n  stringMatchesSomePattern,\n} from '@sentry/utils';\n\nimport { instrumentFetchRequest } from '../common/fetch';\nimport { addPerformanceInstrumentationHandler } from './instrument';\nimport { WINDOW } from './types';\n\nexport const DEFAULT_TRACE_PROPAGATION_TARGETS = ['localhost', /^\\/(?!\\/)/];\n\n/** Options for Request Instrumentation */\nexport interface RequestInstrumentationOptions {\n  /**\n   * @deprecated Will be removed in v8.\n   * Use `shouldCreateSpanForRequest` to control span creation and `tracePropagationTargets` to control\n   * trace header attachment.\n   */\n  tracingOrigins: Array<string | RegExp>;\n\n  /**\n   * List of strings and/or regexes used to determine which outgoing requests will have `sentry-trace` and `baggage`\n   * headers attached.\n   *\n   * @deprecated Use the top-level `tracePropagationTargets` option in `Sentry.init` instead.\n   * This option will be removed in v8.\n   *\n   * Default: ['localhost', /^\\//] @see {DEFAULT_TRACE_PROPAGATION_TARGETS}\n   */\n  tracePropagationTargets: Array<string | RegExp>;\n\n  /**\n   * Flag to disable patching all together for fetch requests.\n   *\n   * Default: true\n   */\n  traceFetch: boolean;\n\n  /**\n   * Flag to disable patching all together for xhr requests.\n   *\n   * Default: true\n   */\n  traceXHR: boolean;\n\n  /**\n   * If true, Sentry will capture http timings and add them to the corresponding http spans.\n   *\n   * Default: true\n   */\n  enableHTTPTimings: boolean;\n\n  /**\n   * This function will be called before creating a span for a request with the given url.\n   * Return false if you don't want a span for the given url.\n   *\n   * Default: (url: string) => true\n   */\n  shouldCreateSpanForRequest?(this: void, url: string): boolean;\n}\n\nexport const defaultRequestInstrumentationOptions: RequestInstrumentationOptions = {\n  traceFetch: true,\n  traceXHR: true,\n  enableHTTPTimings: true,\n  // TODO (v8): Remove this property\n  tracingOrigins: DEFAULT_TRACE_PROPAGATION_TARGETS,\n  tracePropagationTargets: DEFAULT_TRACE_PROPAGATION_TARGETS,\n};\n\n/** Registers span creators for xhr and fetch requests  */\nexport function instrumentOutgoingRequests(_options?: Partial<RequestInstrumentationOptions>): void {\n  const {\n    traceFetch,\n    traceXHR,\n    // eslint-disable-next-line deprecation/deprecation\n    tracePropagationTargets,\n    // eslint-disable-next-line deprecation/deprecation\n    tracingOrigins,\n    shouldCreateSpanForRequest,\n    enableHTTPTimings,\n  } = {\n    traceFetch: defaultRequestInstrumentationOptions.traceFetch,\n    traceXHR: defaultRequestInstrumentationOptions.traceXHR,\n    ..._options,\n  };\n\n  const shouldCreateSpan =\n    typeof shouldCreateSpanForRequest === 'function' ? shouldCreateSpanForRequest : (_: string) => true;\n\n  // TODO(v8) Remove tracingOrigins here\n  // The only reason we're passing it in here is because this instrumentOutgoingRequests function is publicly exported\n  // and we don't want to break the API. We can remove it in v8.\n  const shouldAttachHeadersWithTargets = (url: string): boolean =>\n    shouldAttachHeaders(url, tracePropagationTargets || tracingOrigins);\n\n  const spans: Record<string, Span> = {};\n\n  if (traceFetch) {\n    addFetchInstrumentationHandler(handlerData => {\n      const createdSpan = instrumentFetchRequest(handlerData, shouldCreateSpan, shouldAttachHeadersWithTargets, spans);\n      // We cannot use `window.location` in the generic fetch instrumentation,\n      // but we need it for reliable `server.address` attribute.\n      // so we extend this in here\n      if (createdSpan) {\n        const fullUrl = getFullURL(handlerData.fetchData.url);\n        const host = fullUrl ? parseUrl(fullUrl).host : undefined;\n        createdSpan.setAttributes({\n          'http.url': fullUrl,\n          'server.address': host,\n        });\n      }\n\n      if (enableHTTPTimings && createdSpan) {\n        addHTTPTimings(createdSpan);\n      }\n    });\n  }\n\n  if (traceXHR) {\n    addXhrInstrumentationHandler(handlerData => {\n      const createdSpan = xhrCallback(handlerData, shouldCreateSpan, shouldAttachHeadersWithTargets, spans);\n      if (enableHTTPTimings && createdSpan) {\n        addHTTPTimings(createdSpan);\n      }\n    });\n  }\n}\n\nfunction isPerformanceResourceTiming(entry: PerformanceEntry): entry is PerformanceResourceTiming {\n  return (\n    entry.entryType === 'resource' &&\n    'initiatorType' in entry &&\n    typeof (entry as PerformanceResourceTiming).nextHopProtocol === 'string' &&\n    (entry.initiatorType === 'fetch' || entry.initiatorType === 'xmlhttprequest')\n  );\n}\n\n/**\n * Creates a temporary observer to listen to the next fetch/xhr resourcing timings,\n * so that when timings hit their per-browser limit they don't need to be removed.\n *\n * @param span A span that has yet to be finished, must contain `url` on data.\n */\nfunction addHTTPTimings(span: Span): void {\n  const { url } = spanToJSON(span).data || {};\n\n  if (!url || typeof url !== 'string') {\n    return;\n  }\n\n  const cleanup = addPerformanceInstrumentationHandler('resource', ({ entries }) => {\n    entries.forEach(entry => {\n      if (isPerformanceResourceTiming(entry) && entry.name.endsWith(url)) {\n        const spanData = resourceTimingEntryToSpanData(entry);\n        spanData.forEach(data => span.setAttribute(...data));\n        // In the next tick, clean this handler up\n        // We have to wait here because otherwise this cleans itself up before it is fully done\n        setTimeout(cleanup);\n      }\n    });\n  });\n}\n\n/**\n * Converts ALPN protocol ids to name and version.\n *\n * (https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids)\n * @param nextHopProtocol PerformanceResourceTiming.nextHopProtocol\n */\nexport function extractNetworkProtocol(nextHopProtocol: string): { name: string; version: string } {\n  let name = 'unknown';\n  let version = 'unknown';\n  let _name = '';\n  for (const char of nextHopProtocol) {\n    // http/1.1 etc.\n    if (char === '/') {\n      [name, version] = nextHopProtocol.split('/');\n      break;\n    }\n    // h2, h3 etc.\n    if (!isNaN(Number(char))) {\n      name = _name === 'h' ? 'http' : _name;\n      version = nextHopProtocol.split(_name)[1];\n      break;\n    }\n    _name += char;\n  }\n  if (_name === nextHopProtocol) {\n    // webrtc, ftp, etc.\n    name = _name;\n  }\n  return { name, version };\n}\n\nfunction getAbsoluteTime(time: number = 0): number {\n  return ((browserPerformanceTimeOrigin || performance.timeOrigin) + time) / 1000;\n}\n\nfunction resourceTimingEntryToSpanData(resourceTiming: PerformanceResourceTiming): [string, string | number][] {\n  const { name, version } = extractNetworkProtocol(resourceTiming.nextHopProtocol);\n\n  const timingSpanData: [string, string | number][] = [];\n\n  timingSpanData.push(['network.protocol.version', version], ['network.protocol.name', name]);\n\n  if (!browserPerformanceTimeOrigin) {\n    return timingSpanData;\n  }\n  return [\n    ...timingSpanData,\n    ['http.request.redirect_start', getAbsoluteTime(resourceTiming.redirectStart)],\n    ['http.request.fetch_start', getAbsoluteTime(resourceTiming.fetchStart)],\n    ['http.request.domain_lookup_start', getAbsoluteTime(resourceTiming.domainLookupStart)],\n    ['http.request.domain_lookup_end', getAbsoluteTime(resourceTiming.domainLookupEnd)],\n    ['http.request.connect_start', getAbsoluteTime(resourceTiming.connectStart)],\n    ['http.request.secure_connection_start', getAbsoluteTime(resourceTiming.secureConnectionStart)],\n    ['http.request.connection_end', getAbsoluteTime(resourceTiming.connectEnd)],\n    ['http.request.request_start', getAbsoluteTime(resourceTiming.requestStart)],\n    ['http.request.response_start', getAbsoluteTime(resourceTiming.responseStart)],\n    ['http.request.response_end', getAbsoluteTime(resourceTiming.responseEnd)],\n  ];\n}\n\n/**\n * A function that determines whether to attach tracing headers to a request.\n * This was extracted from `instrumentOutgoingRequests` to make it easier to test shouldAttachHeaders.\n * We only export this fuction for testing purposes.\n */\nexport function shouldAttachHeaders(url: string, tracePropagationTargets: (string | RegExp)[] | undefined): boolean {\n  return stringMatchesSomePattern(url, tracePropagationTargets || DEFAULT_TRACE_PROPAGATION_TARGETS);\n}\n\n/**\n * Create and track xhr request spans\n *\n * @returns Span if a span was created, otherwise void.\n */\n// eslint-disable-next-line complexity\nexport function xhrCallback(\n  handlerData: HandlerDataXhr,\n  shouldCreateSpan: (url: string) => boolean,\n  shouldAttachHeaders: (url: string) => boolean,\n  spans: Record<string, Span>,\n): Span | undefined {\n  const xhr = handlerData.xhr;\n  const sentryXhrData = xhr && xhr[SENTRY_XHR_DATA_KEY];\n\n  if (!hasTracingEnabled() || !xhr || xhr.__sentry_own_request__ || !sentryXhrData) {\n    return undefined;\n  }\n\n  const shouldCreateSpanResult = shouldCreateSpan(sentryXhrData.url);\n\n  // check first if the request has finished and is tracked by an existing span which should now end\n  if (handlerData.endTimestamp && shouldCreateSpanResult) {\n    const spanId = xhr.__sentry_xhr_span_id__;\n    if (!spanId) return;\n\n    const span = spans[spanId];\n    if (span && sentryXhrData.status_code !== undefined) {\n      setHttpStatus(span, sentryXhrData.status_code);\n      span.end();\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return undefined;\n  }\n\n  const scope = getCurrentScope();\n  const isolationScope = getIsolationScope();\n\n  const fullUrl = getFullURL(sentryXhrData.url);\n  const host = fullUrl ? parseUrl(fullUrl).host : undefined;\n\n  const span = shouldCreateSpanResult\n    ? startInactiveSpan({\n        name: `${sentryXhrData.method} ${sentryXhrData.url}`,\n        onlyIfParent: true,\n        attributes: {\n          type: 'xhr',\n          'http.method': sentryXhrData.method,\n          'http.url': fullUrl,\n          url: sentryXhrData.url,\n          'server.address': host,\n          [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.browser',\n        },\n        op: 'http.client',\n      })\n    : undefined;\n\n  if (span) {\n    xhr.__sentry_xhr_span_id__ = span.spanContext().spanId;\n    spans[xhr.__sentry_xhr_span_id__] = span;\n  }\n\n  const client = getClient();\n\n  if (xhr.setRequestHeader && shouldAttachHeaders(sentryXhrData.url) && client) {\n    const { traceId, spanId, sampled, dsc } = {\n      ...isolationScope.getPropagationContext(),\n      ...scope.getPropagationContext(),\n    };\n\n    const sentryTraceHeader = span ? spanToTraceHeader(span) : generateSentryTraceHeader(traceId, spanId, sampled);\n\n    const sentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader(\n      dsc ||\n        (span ? getDynamicSamplingContextFromSpan(span) : getDynamicSamplingContextFromClient(traceId, client, scope)),\n    );\n\n    setHeaderOnXhr(xhr, sentryTraceHeader, sentryBaggageHeader);\n  }\n\n  return span;\n}\n\nfunction setHeaderOnXhr(\n  xhr: SentryWrappedXMLHttpRequest,\n  sentryTraceHeader: string,\n  sentryBaggageHeader: string | undefined,\n): void {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    xhr.setRequestHeader!('sentry-trace', sentryTraceHeader);\n    if (sentryBaggageHeader) {\n      // From MDN: \"If this method is called several times with the same header, the values are merged into one single request header.\"\n      // We can therefore simply set a baggage header without checking what was there before\n      // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/setRequestHeader\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      xhr.setRequestHeader!(BAGGAGE_HEADER_NAME, sentryBaggageHeader);\n    }\n  } catch (_) {\n    // Error: InvalidStateError: Failed to execute 'setRequestHeader' on 'XMLHttpRequest': The object's state must be OPENED.\n  }\n}\n\nfunction getFullURL(url: string): string | undefined {\n  try {\n    // By adding a base URL to new URL(), this will also work for relative urls\n    // If `url` is a full URL, the base URL is ignored anyhow\n    const parsed = new URL(url, WINDOW.location.origin);\n    return parsed.href;\n  } catch {\n    return undefined;\n  }\n}\n","import {\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  getClient,\n  getCurrentScope,\n  getDynamicSamplingContextFromClient,\n  getDynamicSamplingContextFromSpan,\n  getIsolationScope,\n  hasTracingEnabled,\n  setHttpStatus,\n  spanToTraceHeader,\n  startInactiveSpan,\n} from '@sentry/core';\nimport type { Client, HandlerDataFetch, Scope, Span, SpanOrigin } from '@sentry/types';\nimport {\n  BAGGAGE_HEADER_NAME,\n  dynamicSamplingContextToSentryBaggageHeader,\n  generateSentryTraceHeader,\n  isInstanceOf,\n  parseUrl,\n} from '@sentry/utils';\n\ntype PolymorphicRequestHeaders =\n  | Record<string, string | undefined>\n  | Array<[string, string]>\n  // the below is not preicsely the Header type used in Request, but it'll pass duck-typing\n  | {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      [key: string]: any;\n      append: (key: string, value: string) => void;\n      get: (key: string) => string | null | undefined;\n    };\n\n/**\n * Create and track fetch request spans for usage in combination with `addInstrumentationHandler`.\n *\n * @returns Span if a span was created, otherwise void.\n */\nexport function instrumentFetchRequest(\n  handlerData: HandlerDataFetch,\n  shouldCreateSpan: (url: string) => boolean,\n  shouldAttachHeaders: (url: string) => boolean,\n  spans: Record<string, Span>,\n  spanOrigin: SpanOrigin = 'auto.http.browser',\n): Span | undefined {\n  if (!hasTracingEnabled() || !handlerData.fetchData) {\n    return undefined;\n  }\n\n  const shouldCreateSpanResult = shouldCreateSpan(handlerData.fetchData.url);\n\n  if (handlerData.endTimestamp && shouldCreateSpanResult) {\n    const spanId = handlerData.fetchData.__span;\n    if (!spanId) return;\n\n    const span = spans[spanId];\n    if (span) {\n      endSpan(span, handlerData);\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return undefined;\n  }\n\n  const scope = getCurrentScope();\n  const client = getClient();\n\n  const { method, url } = handlerData.fetchData;\n\n  const fullUrl = getFullURL(url);\n  const host = fullUrl ? parseUrl(fullUrl).host : undefined;\n\n  const span = shouldCreateSpanResult\n    ? startInactiveSpan({\n        name: `${method} ${url}`,\n        onlyIfParent: true,\n        attributes: {\n          url,\n          type: 'fetch',\n          'http.method': method,\n          'http.url': fullUrl,\n          'server.address': host,\n          [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: spanOrigin,\n        },\n        op: 'http.client',\n      })\n    : undefined;\n\n  if (span) {\n    handlerData.fetchData.__span = span.spanContext().spanId;\n    spans[span.spanContext().spanId] = span;\n  }\n\n  if (shouldAttachHeaders(handlerData.fetchData.url) && client) {\n    const request: string | Request = handlerData.args[0];\n\n    // In case the user hasn't set the second argument of a fetch call we default it to `{}`.\n    handlerData.args[1] = handlerData.args[1] || {};\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const options: { [key: string]: any } = handlerData.args[1];\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n    options.headers = addTracingHeadersToFetchRequest(request, client, scope, options, span);\n  }\n\n  return span;\n}\n\n/**\n * Adds sentry-trace and baggage headers to the various forms of fetch headers\n */\nexport function addTracingHeadersToFetchRequest(\n  request: string | unknown, // unknown is actually type Request but we can't export DOM types from this package,\n  client: Client,\n  scope: Scope,\n  options: {\n    headers?:\n      | {\n          [key: string]: string[] | string | undefined;\n        }\n      | PolymorphicRequestHeaders;\n  },\n  requestSpan?: Span,\n): PolymorphicRequestHeaders | undefined {\n  // eslint-disable-next-line deprecation/deprecation\n  const span = requestSpan || scope.getSpan();\n\n  const isolationScope = getIsolationScope();\n\n  const { traceId, spanId, sampled, dsc } = {\n    ...isolationScope.getPropagationContext(),\n    ...scope.getPropagationContext(),\n  };\n\n  const sentryTraceHeader = span ? spanToTraceHeader(span) : generateSentryTraceHeader(traceId, spanId, sampled);\n\n  const sentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader(\n    dsc ||\n      (span ? getDynamicSamplingContextFromSpan(span) : getDynamicSamplingContextFromClient(traceId, client, scope)),\n  );\n\n  const headers =\n    options.headers ||\n    (typeof Request !== 'undefined' && isInstanceOf(request, Request) ? (request as Request).headers : undefined);\n\n  if (!headers) {\n    return { 'sentry-trace': sentryTraceHeader, baggage: sentryBaggageHeader };\n  } else if (typeof Headers !== 'undefined' && isInstanceOf(headers, Headers)) {\n    const newHeaders = new Headers(headers as Headers);\n\n    newHeaders.append('sentry-trace', sentryTraceHeader);\n\n    if (sentryBaggageHeader) {\n      // If the same header is appended multiple times the browser will merge the values into a single request header.\n      // Its therefore safe to simply push a \"baggage\" entry, even though there might already be another baggage header.\n      newHeaders.append(BAGGAGE_HEADER_NAME, sentryBaggageHeader);\n    }\n\n    return newHeaders as PolymorphicRequestHeaders;\n  } else if (Array.isArray(headers)) {\n    const newHeaders = [...headers, ['sentry-trace', sentryTraceHeader]];\n\n    if (sentryBaggageHeader) {\n      // If there are multiple entries with the same key, the browser will merge the values into a single request header.\n      // Its therefore safe to simply push a \"baggage\" entry, even though there might already be another baggage header.\n      newHeaders.push([BAGGAGE_HEADER_NAME, sentryBaggageHeader]);\n    }\n\n    return newHeaders as PolymorphicRequestHeaders;\n  } else {\n    const existingBaggageHeader = 'baggage' in headers ? headers.baggage : undefined;\n    const newBaggageHeaders: string[] = [];\n\n    if (Array.isArray(existingBaggageHeader)) {\n      newBaggageHeaders.push(...existingBaggageHeader);\n    } else if (existingBaggageHeader) {\n      newBaggageHeaders.push(existingBaggageHeader);\n    }\n\n    if (sentryBaggageHeader) {\n      newBaggageHeaders.push(sentryBaggageHeader);\n    }\n\n    return {\n      ...(headers as Exclude<typeof headers, Headers>),\n      'sentry-trace': sentryTraceHeader,\n      baggage: newBaggageHeaders.length > 0 ? newBaggageHeaders.join(',') : undefined,\n    };\n  }\n}\n\nfunction getFullURL(url: string): string | undefined {\n  try {\n    const parsed = new URL(url);\n    return parsed.href;\n  } catch {\n    return undefined;\n  }\n}\n\nfunction endSpan(span: Span, handlerData: HandlerDataFetch): void {\n  if (handlerData.response) {\n    setHttpStatus(span, handlerData.response.status);\n\n    const contentLength =\n      handlerData.response && handlerData.response.headers && handlerData.response.headers.get('content-length');\n\n    if (contentLength) {\n      const contentLengthNum = parseInt(contentLength);\n      if (contentLengthNum > 0) {\n        span.setAttribute('http.response_content_length', contentLengthNum);\n      }\n    }\n  } else if (handlerData.error) {\n    span.setStatus('internal_error');\n  }\n  span.end();\n}\n","/* eslint-disable max-lines */\nimport type { Hub, IdleTransaction } from '@sentry/core';\nimport { getClient, getCurrentScope } from '@sentry/core';\nimport {\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n  TRACING_DEFAULTS,\n  addTracingExtensions,\n  getActiveTransaction,\n  startIdleTransaction,\n} from '@sentry/core';\nimport type { EventProcessor, Integration, Transaction, TransactionContext, TransactionSource } from '@sentry/types';\nimport { getDomElement, logger, propagationContextFromHeaders } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../common/debug-build';\nimport { registerBackgroundTabDetection } from './backgroundtab';\nimport { addPerformanceInstrumentationHandler } from './instrument';\nimport {\n  addPerformanceEntries,\n  startTrackingINP,\n  startTrackingInteractions,\n  startTrackingLongTasks,\n  startTrackingWebVitals,\n} from './metrics';\nimport type { RequestInstrumentationOptions } from './request';\nimport { defaultRequestInstrumentationOptions, instrumentOutgoingRequests } from './request';\nimport { instrumentRoutingWithDefaults } from './router';\nimport { WINDOW } from './types';\nimport type { InteractionRouteNameMapping } from './web-vitals/types';\n\nexport const BROWSER_TRACING_INTEGRATION_ID = 'BrowserTracing';\n\n/** Options for Browser Tracing integration */\nexport interface BrowserTracingOptions extends RequestInstrumentationOptions {\n  /**\n   * The time to wait in ms until the transaction will be finished during an idle state. An idle state is defined\n   * by a moment where there are no in-progress spans.\n   *\n   * The transaction will use the end timestamp of the last finished span as the endtime for the transaction.\n   * If there are still active spans when this the `idleTimeout` is set, the `idleTimeout` will get reset.\n   * Time is in ms.\n   *\n   * Default: 1000\n   */\n  idleTimeout: number;\n\n  /**\n   * The max duration for a transaction. If a transaction duration hits the `finalTimeout` value, it\n   * will be finished.\n   * Time is in ms.\n   *\n   * Default: 30000\n   */\n  finalTimeout: number;\n\n  /**\n   * The heartbeat interval. If no new spans are started or open spans are finished within 3 heartbeats,\n   * the transaction will be finished.\n   * Time is in ms.\n   *\n   * Default: 5000\n   */\n  heartbeatInterval: number;\n\n  /**\n   * Flag to enable/disable creation of `navigation` transaction on history changes.\n   *\n   * Default: true\n   */\n  startTransactionOnLocationChange: boolean;\n\n  /**\n   * Flag to enable/disable creation of `pageload` transaction on first pageload.\n   *\n   * Default: true\n   */\n  startTransactionOnPageLoad: boolean;\n\n  /**\n   * Flag Transactions where tabs moved to background with \"cancelled\". Browser background tab timing is\n   * not suited towards doing precise measurements of operations. By default, we recommend that this option\n   * be enabled as background transactions can mess up your statistics in nondeterministic ways.\n   *\n   * Default: true\n   */\n  markBackgroundTransactions: boolean;\n\n  /**\n   * If true, Sentry will capture long tasks and add them to the corresponding transaction.\n   *\n   * Default: true\n   */\n  enableLongTask: boolean;\n\n  /**\n   * If true, Sentry will capture INP web vitals as standalone spans .\n   *\n   * Default: false\n   */\n  enableInp: boolean;\n\n  /**\n   * Sample rate to determine interaction span sampling.\n   * interactionsSampleRate is applied on top of the global tracesSampleRate.\n   * ie a tracesSampleRate of 0.1 and interactionsSampleRate of 0.5 will result in a 0.05 sample rate for interactions.\n   *\n   * Default: 1\n   */\n  interactionsSampleRate: number;\n\n  /**\n   * _metricOptions allows the user to send options to change how metrics are collected.\n   *\n   * _metricOptions is currently experimental.\n   *\n   * Default: undefined\n   */\n  _metricOptions?: Partial<{\n    /**\n     * @deprecated This property no longer has any effect and will be removed in v8.\n     */\n    _reportAllChanges: boolean;\n  }>;\n\n  /**\n   * _experiments allows the user to send options to define how this integration works.\n   * Note that the `enableLongTask` options is deprecated in favor of the option at the top level, and will be removed in v8.\n   *\n   * TODO (v8): Remove enableLongTask\n   *\n   * Default: undefined\n   */\n  _experiments: Partial<{\n    enableLongTask: boolean;\n    enableInteractions: boolean;\n    // eslint-disable-next-line deprecation/deprecation\n    onStartRouteTransaction: (t: Transaction | undefined, ctx: TransactionContext, getCurrentHub: () => Hub) => void;\n  }>;\n\n  /**\n   * beforeNavigate is called before a pageload/navigation transaction is created and allows users to modify transaction\n   * context data, or drop the transaction entirely (by setting `sampled = false` in the context).\n   *\n   * Note: For legacy reasons, transactions can also be dropped by returning `undefined`.\n   *\n   * @param context: The context data which will be passed to `startTransaction` by default\n   *\n   * @returns A (potentially) modified context object, with `sampled = false` if the transaction should be dropped.\n   */\n  beforeNavigate?(this: void, context: TransactionContext): TransactionContext | undefined;\n\n  /**\n   * Instrumentation that creates routing change transactions. By default creates\n   * pageload and navigation transactions.\n   */\n  routingInstrumentation<T extends Transaction>(\n    this: void,\n    customStartTransaction: (context: TransactionContext) => T | undefined,\n    startTransactionOnPageLoad?: boolean,\n    startTransactionOnLocationChange?: boolean,\n  ): void;\n}\n\nconst DEFAULT_BROWSER_TRACING_OPTIONS: BrowserTracingOptions = {\n  ...TRACING_DEFAULTS,\n  markBackgroundTransactions: true,\n  routingInstrumentation: instrumentRoutingWithDefaults,\n  startTransactionOnLocationChange: true,\n  startTransactionOnPageLoad: true,\n  enableLongTask: true,\n  enableInp: false,\n  interactionsSampleRate: 1,\n  _experiments: {},\n  ...defaultRequestInstrumentationOptions,\n};\n\n/** We store up to 10 interaction candidates max to cap memory usage. This is the same cap as getINP from web-vitals */\nconst MAX_INTERACTIONS = 10;\n\n/**\n * The Browser Tracing integration automatically instruments browser pageload/navigation\n * actions as transactions, and captures requests, metrics and errors as spans.\n *\n * The integration can be configured with a variety of options, and can be extended to use\n * any routing library. This integration uses {@see IdleTransaction} to create transactions.\n *\n * @deprecated Use `browserTracingIntegration()` instead.\n */\nexport class BrowserTracing implements Integration {\n  // This class currently doesn't have a static `id` field like the other integration classes, because it prevented\n  // @sentry/tracing from being treeshaken. Tree shakers do not like static fields, because they behave like side effects.\n  // TODO: Come up with a better plan, than using static fields on integration classes, and use that plan on all\n  // integrations.\n\n  /** Browser Tracing integration options */\n  public options: BrowserTracingOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public name: string;\n\n  // eslint-disable-next-line deprecation/deprecation\n  private _getCurrentHub?: () => Hub;\n\n  private _collectWebVitals: () => void;\n\n  private _hasSetTracePropagationTargets: boolean;\n  private _interactionIdToRouteNameMapping: InteractionRouteNameMapping;\n  private _latestRoute: {\n    name: string | undefined;\n    context: TransactionContext | undefined;\n  };\n\n  public constructor(_options?: Partial<BrowserTracingOptions>) {\n    this.name = BROWSER_TRACING_INTEGRATION_ID;\n    this._hasSetTracePropagationTargets = false;\n\n    addTracingExtensions();\n\n    if (DEBUG_BUILD) {\n      this._hasSetTracePropagationTargets = !!(\n        _options &&\n        // eslint-disable-next-line deprecation/deprecation\n        (_options.tracePropagationTargets || _options.tracingOrigins)\n      );\n    }\n\n    this.options = {\n      ...DEFAULT_BROWSER_TRACING_OPTIONS,\n      ..._options,\n    };\n\n    // Special case: enableLongTask can be set in _experiments\n    // TODO (v8): Remove this in v8\n    if (this.options._experiments.enableLongTask !== undefined) {\n      this.options.enableLongTask = this.options._experiments.enableLongTask;\n    }\n\n    // TODO (v8): remove this block after tracingOrigins is removed\n    // Set tracePropagationTargets to tracingOrigins if specified by the user\n    // In case both are specified, tracePropagationTargets takes precedence\n    // eslint-disable-next-line deprecation/deprecation\n    if (_options && !_options.tracePropagationTargets && _options.tracingOrigins) {\n      // eslint-disable-next-line deprecation/deprecation\n      this.options.tracePropagationTargets = _options.tracingOrigins;\n    }\n\n    this._collectWebVitals = startTrackingWebVitals();\n    /** Stores a mapping of interactionIds from PerformanceEventTimings to the origin interaction path */\n    this._interactionIdToRouteNameMapping = {};\n\n    if (this.options.enableInp) {\n      startTrackingINP(this._interactionIdToRouteNameMapping, this.options.interactionsSampleRate);\n    }\n    if (this.options.enableLongTask) {\n      startTrackingLongTasks();\n    }\n    if (this.options._experiments.enableInteractions) {\n      startTrackingInteractions();\n    }\n\n    this._latestRoute = {\n      name: undefined,\n      context: undefined,\n    };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    this._getCurrentHub = getCurrentHub;\n    const hub = getCurrentHub();\n    // eslint-disable-next-line deprecation/deprecation\n    const client = hub.getClient();\n    const clientOptions = client && client.getOptions();\n\n    const {\n      routingInstrumentation: instrumentRouting,\n      startTransactionOnLocationChange,\n      startTransactionOnPageLoad,\n      markBackgroundTransactions,\n      traceFetch,\n      traceXHR,\n      shouldCreateSpanForRequest,\n      enableHTTPTimings,\n      _experiments,\n    } = this.options;\n\n    const clientOptionsTracePropagationTargets = clientOptions && clientOptions.tracePropagationTargets;\n    // There are three ways to configure tracePropagationTargets:\n    // 1. via top level client option `tracePropagationTargets`\n    // 2. via BrowserTracing option `tracePropagationTargets`\n    // 3. via BrowserTracing option `tracingOrigins` (deprecated)\n    //\n    // To avoid confusion, favour top level client option `tracePropagationTargets`, and fallback to\n    // BrowserTracing option `tracePropagationTargets` and then `tracingOrigins` (deprecated).\n    // This is done as it minimizes bundle size (we don't have to have undefined checks).\n    //\n    // If both 1 and either one of 2 or 3 are set (from above), we log out a warning.\n    // eslint-disable-next-line deprecation/deprecation\n    const tracePropagationTargets = clientOptionsTracePropagationTargets || this.options.tracePropagationTargets;\n    if (DEBUG_BUILD && this._hasSetTracePropagationTargets && clientOptionsTracePropagationTargets) {\n      logger.warn(\n        '[Tracing] The `tracePropagationTargets` option was set in the BrowserTracing integration and top level `Sentry.init`. The top level `Sentry.init` value is being used.',\n      );\n    }\n\n    instrumentRouting(\n      (context: TransactionContext) => {\n        const transaction = this._createRouteTransaction(context);\n\n        this.options._experiments.onStartRouteTransaction &&\n          this.options._experiments.onStartRouteTransaction(transaction, context, getCurrentHub);\n\n        return transaction;\n      },\n      startTransactionOnPageLoad,\n      startTransactionOnLocationChange,\n    );\n\n    if (markBackgroundTransactions) {\n      registerBackgroundTabDetection();\n    }\n\n    if (_experiments.enableInteractions) {\n      this._registerInteractionListener();\n    }\n\n    if (this.options.enableInp) {\n      this._registerInpInteractionListener();\n    }\n\n    instrumentOutgoingRequests({\n      traceFetch,\n      traceXHR,\n      tracePropagationTargets,\n      shouldCreateSpanForRequest,\n      enableHTTPTimings,\n    });\n  }\n\n  /** Create routing idle transaction. */\n  private _createRouteTransaction(context: TransactionContext): Transaction | undefined {\n    if (!this._getCurrentHub) {\n      DEBUG_BUILD &&\n        logger.warn(`[Tracing] Did not create ${context.op} transaction because _getCurrentHub is invalid.`);\n      return undefined;\n    }\n\n    const hub = this._getCurrentHub();\n\n    const { beforeNavigate, idleTimeout, finalTimeout, heartbeatInterval } = this.options;\n\n    const isPageloadTransaction = context.op === 'pageload';\n\n    let expandedContext: TransactionContext;\n    if (isPageloadTransaction) {\n      const sentryTrace = isPageloadTransaction ? getMetaContent('sentry-trace') : '';\n      const baggage = isPageloadTransaction ? getMetaContent('baggage') : undefined;\n      const { traceId, dsc, parentSpanId, sampled } = propagationContextFromHeaders(sentryTrace, baggage);\n      expandedContext = {\n        traceId,\n        parentSpanId,\n        parentSampled: sampled,\n        ...context,\n        metadata: {\n          // eslint-disable-next-line deprecation/deprecation\n          ...context.metadata,\n          dynamicSamplingContext: dsc,\n        },\n        trimEnd: true,\n      };\n    } else {\n      expandedContext = {\n        trimEnd: true,\n        ...context,\n      };\n    }\n\n    const modifiedContext = typeof beforeNavigate === 'function' ? beforeNavigate(expandedContext) : expandedContext;\n\n    // For backwards compatibility reasons, beforeNavigate can return undefined to \"drop\" the transaction (prevent it\n    // from being sent to Sentry).\n    const finalContext = modifiedContext === undefined ? { ...expandedContext, sampled: false } : modifiedContext;\n\n    // If `beforeNavigate` set a custom name, record that fact\n    // eslint-disable-next-line deprecation/deprecation\n    finalContext.metadata =\n      finalContext.name !== expandedContext.name\n        ? // eslint-disable-next-line deprecation/deprecation\n          { ...finalContext.metadata, source: 'custom' }\n        : // eslint-disable-next-line deprecation/deprecation\n          finalContext.metadata;\n\n    this._latestRoute.name = finalContext.name;\n    this._latestRoute.context = finalContext;\n\n    // eslint-disable-next-line deprecation/deprecation\n    if (finalContext.sampled === false) {\n      DEBUG_BUILD && logger.log(`[Tracing] Will not send ${finalContext.op} transaction because of beforeNavigate.`);\n    }\n\n    DEBUG_BUILD && logger.log(`[Tracing] Starting ${finalContext.op} transaction on scope`);\n\n    const { location } = WINDOW;\n\n    const idleTransaction = startIdleTransaction(\n      hub,\n      finalContext,\n      idleTimeout,\n      finalTimeout,\n      true,\n      { location }, // for use in the tracesSampler\n      heartbeatInterval,\n      isPageloadTransaction, // should wait for finish signal if it's a pageload transaction\n    );\n\n    if (isPageloadTransaction) {\n      if (WINDOW.document) {\n        WINDOW.document.addEventListener('readystatechange', () => {\n          if (['interactive', 'complete'].includes(WINDOW.document!.readyState)) {\n            idleTransaction.sendAutoFinishSignal();\n          }\n        });\n\n        if (['interactive', 'complete'].includes(WINDOW.document.readyState)) {\n          idleTransaction.sendAutoFinishSignal();\n        }\n      }\n    }\n\n    idleTransaction.registerBeforeFinishCallback(transaction => {\n      this._collectWebVitals();\n      addPerformanceEntries(transaction);\n    });\n\n    return idleTransaction as Transaction;\n  }\n\n  /** Start listener for interaction transactions */\n  private _registerInteractionListener(): void {\n    let inflightInteractionTransaction: IdleTransaction | undefined;\n    const registerInteractionTransaction = (): void => {\n      const { idleTimeout, finalTimeout, heartbeatInterval } = this.options;\n      const op = 'ui.action.click';\n\n      // eslint-disable-next-line deprecation/deprecation\n      const currentTransaction = getActiveTransaction();\n      if (currentTransaction && currentTransaction.op && ['navigation', 'pageload'].includes(currentTransaction.op)) {\n        DEBUG_BUILD &&\n          logger.warn(\n            `[Tracing] Did not create ${op} transaction because a pageload or navigation transaction is in progress.`,\n          );\n        return undefined;\n      }\n\n      if (inflightInteractionTransaction) {\n        inflightInteractionTransaction.setFinishReason('interactionInterrupted');\n        inflightInteractionTransaction.end();\n        inflightInteractionTransaction = undefined;\n      }\n\n      if (!this._getCurrentHub) {\n        DEBUG_BUILD && logger.warn(`[Tracing] Did not create ${op} transaction because _getCurrentHub is invalid.`);\n        return undefined;\n      }\n\n      if (!this._latestRoute.name) {\n        DEBUG_BUILD && logger.warn(`[Tracing] Did not create ${op} transaction because _latestRouteName is missing.`);\n        return undefined;\n      }\n\n      const hub = this._getCurrentHub();\n      const { location } = WINDOW;\n\n      const context: TransactionContext = {\n        name: this._latestRoute.name,\n        op,\n        trimEnd: true,\n        data: {\n          [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: this._latestRoute.context\n            ? getSource(this._latestRoute.context)\n            : undefined || 'url',\n        },\n      };\n\n      inflightInteractionTransaction = startIdleTransaction(\n        hub,\n        context,\n        idleTimeout,\n        finalTimeout,\n        true,\n        { location }, // for use in the tracesSampler\n        heartbeatInterval,\n      );\n    };\n\n    ['click'].forEach(type => {\n      if (WINDOW.document) {\n        addEventListener(type, registerInteractionTransaction, { once: false, capture: true });\n      }\n    });\n  }\n\n  /** Creates a listener on interaction entries, and maps interactionIds to the origin path of the interaction */\n  private _registerInpInteractionListener(): void {\n    const handleEntries = ({ entries }: { entries: PerformanceEntry[] }): void => {\n      const client = getClient();\n      // We need to get the replay, user, and activeTransaction from the current scope\n      // so that we can associate replay id, profile id, and a user display to the span\n      const replay =\n        client !== undefined && client.getIntegrationByName !== undefined\n          ? (client.getIntegrationByName('Replay') as Integration & { getReplayId: () => string })\n          : undefined;\n      const replayId = replay !== undefined ? replay.getReplayId() : undefined;\n      // eslint-disable-next-line deprecation/deprecation\n      const activeTransaction = getActiveTransaction();\n      const currentScope = getCurrentScope();\n      const user = currentScope !== undefined ? currentScope.getUser() : undefined;\n      entries.forEach(entry => {\n        if (isPerformanceEventTiming(entry)) {\n          const interactionId = entry.interactionId;\n          if (interactionId === undefined) {\n            return;\n          }\n          const existingInteraction = this._interactionIdToRouteNameMapping[interactionId];\n          const duration = entry.duration;\n          const startTime = entry.startTime;\n          const keys = Object.keys(this._interactionIdToRouteNameMapping);\n          const minInteractionId =\n            keys.length > 0\n              ? keys.reduce((a, b) => {\n                  return this._interactionIdToRouteNameMapping[a].duration <\n                    this._interactionIdToRouteNameMapping[b].duration\n                    ? a\n                    : b;\n                })\n              : undefined;\n          // For a first input event to be considered, we must check that an interaction event does not already exist with the same duration and start time.\n          // This is also checked in the web-vitals library.\n          if (entry.entryType === 'first-input') {\n            const matchingEntry = keys\n              .map(key => this._interactionIdToRouteNameMapping[key])\n              .some(interaction => {\n                return interaction.duration === duration && interaction.startTime === startTime;\n              });\n            if (matchingEntry) {\n              return;\n            }\n          }\n          // Interactions with an id of 0 and are not first-input are not valid.\n          if (!interactionId) {\n            return;\n          }\n          // If the interaction already exists, we want to use the duration of the longest entry, since that is what the INP metric uses.\n          if (existingInteraction) {\n            existingInteraction.duration = Math.max(existingInteraction.duration, duration);\n          } else if (\n            keys.length < MAX_INTERACTIONS ||\n            minInteractionId === undefined ||\n            duration > this._interactionIdToRouteNameMapping[minInteractionId].duration\n          ) {\n            // If the interaction does not exist, we want to add it to the mapping if there is space, or if the duration is longer than the shortest entry.\n            const routeName = this._latestRoute.name;\n            const parentContext = this._latestRoute.context;\n            if (routeName && parentContext) {\n              if (minInteractionId && Object.keys(this._interactionIdToRouteNameMapping).length >= MAX_INTERACTIONS) {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete this._interactionIdToRouteNameMapping[minInteractionId];\n              }\n              this._interactionIdToRouteNameMapping[interactionId] = {\n                routeName,\n                duration,\n                parentContext,\n                user,\n                activeTransaction,\n                replayId,\n                startTime,\n              };\n            }\n          }\n        }\n      });\n    };\n    addPerformanceInstrumentationHandler('event', handleEntries);\n    addPerformanceInstrumentationHandler('first-input', handleEntries);\n  }\n}\n\n/** Returns the value of a meta tag */\nexport function getMetaContent(metaName: string): string | undefined {\n  // Can't specify generic to `getDomElement` because tracing can be used\n  // in a variety of environments, have to disable `no-unsafe-member-access`\n  // as a result.\n  const metaTag = getDomElement(`meta[name=${metaName}]`);\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return metaTag ? metaTag.getAttribute('content') : undefined;\n}\n\nfunction getSource(context: TransactionContext): TransactionSource | undefined {\n  const sourceFromAttributes = context.attributes && context.attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];\n  // eslint-disable-next-line deprecation/deprecation\n  const sourceFromData = context.data && context.data[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];\n  // eslint-disable-next-line deprecation/deprecation\n  const sourceFromMetadata = context.metadata && context.metadata.source;\n\n  return sourceFromAttributes || sourceFromData || sourceFromMetadata;\n}\n\nfunction isPerformanceEventTiming(entry: PerformanceEntry): entry is PerformanceEventTiming {\n  return 'duration' in entry;\n}\n","import type { Transaction, TransactionContext } from '@sentry/types';\nimport { addHistoryInstrumentationHandler, browserPerformanceTimeOrigin, logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../common/debug-build';\nimport { WINDOW } from './types';\n\n/**\n * Default function implementing pageload and navigation transactions\n */\nexport function instrumentRoutingWithDefaults<T extends Transaction>(\n  customStartTransaction: (context: TransactionContext) => T | undefined,\n  startTransactionOnPageLoad: boolean = true,\n  startTransactionOnLocationChange: boolean = true,\n): void {\n  if (!WINDOW || !WINDOW.location) {\n    DEBUG_BUILD && logger.warn('Could not initialize routing instrumentation due to invalid location');\n    return;\n  }\n\n  let startingUrl: string | undefined = WINDOW.location.href;\n\n  let activeTransaction: T | undefined;\n  if (startTransactionOnPageLoad) {\n    activeTransaction = customStartTransaction({\n      name: WINDOW.location.pathname,\n      // pageload should always start at timeOrigin (and needs to be in s, not ms)\n      startTimestamp: browserPerformanceTimeOrigin ? browserPerformanceTimeOrigin / 1000 : undefined,\n      op: 'pageload',\n      origin: 'auto.pageload.browser',\n      metadata: { source: 'url' },\n    });\n  }\n\n  if (startTransactionOnLocationChange) {\n    addHistoryInstrumentationHandler(({ to, from }) => {\n      /**\n       * This early return is there to account for some cases where a navigation transaction starts right after\n       * long-running pageload. We make sure that if `from` is undefined and a valid `startingURL` exists, we don't\n       * create an uneccessary navigation transaction.\n       *\n       * This was hard to duplicate, but this behavior stopped as soon as this fix was applied. This issue might also\n       * only be caused in certain development environments where the usage of a hot module reloader is causing\n       * errors.\n       */\n      if (from === undefined && startingUrl && startingUrl.indexOf(to) !== -1) {\n        startingUrl = undefined;\n        return;\n      }\n\n      if (from !== to) {\n        startingUrl = undefined;\n        if (activeTransaction) {\n          DEBUG_BUILD && logger.log(`[Tracing] Finishing current transaction with op: ${activeTransaction.op}`);\n          // If there's an open transaction on the scope, we need to finish it before creating an new one.\n          activeTransaction.end();\n        }\n        activeTransaction = customStartTransaction({\n          name: WINDOW.location.pathname,\n          op: 'navigation',\n          origin: 'auto.navigation.browser',\n          metadata: { source: 'url' },\n        });\n      }\n    });\n  }\n}\n","import type { IdleTransaction, SpanStatusType } from '@sentry/core';\nimport { getActiveTransaction, spanToJSON } from '@sentry/core';\nimport { logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../common/debug-build';\nimport { WINDOW } from './types';\n\n/**\n * Add a listener that cancels and finishes a transaction when the global\n * document is hidden.\n */\nexport function registerBackgroundTabDetection(): void {\n  if (WINDOW.document) {\n    WINDOW.document.addEventListener('visibilitychange', () => {\n      // eslint-disable-next-line deprecation/deprecation\n      const activeTransaction = getActiveTransaction() as IdleTransaction;\n      if (WINDOW.document!.hidden && activeTransaction) {\n        const statusType: SpanStatusType = 'cancelled';\n\n        const { op, status } = spanToJSON(activeTransaction);\n\n        DEBUG_BUILD &&\n          logger.log(`[Tracing] Transaction: ${statusType} -> since tab moved to the background, op: ${op}`);\n        // We should not set status if it is already set, this prevent important statuses like\n        // error or data loss from being overwritten on transaction.\n        if (!status) {\n          activeTransaction.setStatus(statusType);\n        }\n        // TODO: Can we rewrite this to an attribute?\n        // eslint-disable-next-line deprecation/deprecation\n        activeTransaction.setTag('visibilitychange', 'document.hidden');\n        activeTransaction.end();\n      }\n    });\n  } else {\n    DEBUG_BUILD && logger.warn('[Tracing] Could not set up background tab detection due to lack of global document');\n  }\n}\n","import type { MeasurementUnit } from '@sentry/types';\n\nimport { getActiveTransaction } from './utils';\n\n/**\n * Adds a measurement to the current active transaction.\n */\nexport function setMeasurement(name: string, value: number, unit: MeasurementUnit): void {\n  // eslint-disable-next-line deprecation/deprecation\n  const transaction = getActiveTransaction();\n  if (transaction) {\n    // eslint-disable-next-line deprecation/deprecation\n    transaction.setMeasurement(name, value, unit);\n  }\n}\n","function _getPrototypeOf(t) {\n  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {\n    return t.__proto__ || Object.getPrototypeOf(t);\n  }, _getPrototypeOf(t);\n}\nexport { _getPrototypeOf as default };","function _isNativeReflectConstruct() {\n  try {\n    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n  } catch (t) {}\n  return (_isNativeReflectConstruct = function _isNativeReflectConstruct() {\n    return !!t;\n  })();\n}\nexport { _isNativeReflectConstruct as default };","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeFunction from \"./isNativeFunction.js\";\nimport construct from \"./construct.js\";\nfunction _wrapNativeSuper(t) {\n  var r = \"function\" == typeof Map ? new Map() : void 0;\n  return _wrapNativeSuper = function _wrapNativeSuper(t) {\n    if (null === t || !isNativeFunction(t)) return t;\n    if (\"function\" != typeof t) throw new TypeError(\"Super expression must either be null or a function\");\n    if (void 0 !== r) {\n      if (r.has(t)) return r.get(t);\n      r.set(t, Wrapper);\n    }\n    function Wrapper() {\n      return construct(t, arguments, getPrototypeOf(this).constructor);\n    }\n    return Wrapper.prototype = Object.create(t.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: !1,\n        writable: !0,\n        configurable: !0\n      }\n    }), setPrototypeOf(Wrapper, t);\n  }, _wrapNativeSuper(t);\n}\nexport { _wrapNativeSuper as default };","function _isNativeFunction(t) {\n  try {\n    return -1 !== Function.toString.call(t).indexOf(\"[native code]\");\n  } catch (n) {\n    return \"function\" == typeof t;\n  }\n}\nexport { _isNativeFunction as default };","import isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nimport setPrototypeOf from \"./setPrototypeOf.js\";\nfunction _construct(t, e, r) {\n  if (isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);\n  var o = [null];\n  o.push.apply(o, e);\n  var p = new (t.bind.apply(t, o))();\n  return r && setPrototypeOf(p, r.prototype), p;\n}\nexport { _construct as default };","import type { ConsoleLevel } from '@sentry/types';\n\n/** An error emitted by Sentry SDKs and related utilities. */\nexport class SentryError extends Error {\n  /** Display name of this error instance. */\n  public name: string;\n\n  public logLevel: ConsoleLevel;\n\n  public constructor(public message: string, logLevel: ConsoleLevel = 'warn') {\n    super(message);\n\n    this.name = new.target.prototype.constructor.name;\n    // This sets the prototype to be `Error`, not `SentryError`. It's unclear why we do this, but commenting this line\n    // out causes various (seemingly totally unrelated) playwright tests consistently time out. FYI, this makes\n    // instances of `SentryError` fail `obj instanceof SentryError` checks.\n    Object.setPrototypeOf(this, new.target.prototype);\n    this.logLevel = logLevel;\n  }\n}\n","import type { ClientOptions, DsnComponents, DsnLike, SdkInfo } from '@sentry/types';\nimport { dsnToString, makeDsn, urlEncode } from '@sentry/utils';\n\nconst SENTRY_API_VERSION = '7';\n\n/** Returns the prefix to construct Sentry ingestion API endpoints. */\nfunction getBaseApiEndpoint(dsn: DsnComponents): string {\n  const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n  const port = dsn.port ? `:${dsn.port}` : '';\n  return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;\n}\n\n/** Returns the ingest API endpoint for target. */\nfunction _getIngestEndpoint(dsn: DsnComponents): string {\n  return `${getBaseApiEndpoint(dsn)}${dsn.projectId}/envelope/`;\n}\n\n/** Returns a URL-encoded string with auth config suitable for a query string. */\nfunction _encodedAuth(dsn: DsnComponents, sdkInfo: SdkInfo | undefined): string {\n  return urlEncode({\n    // We send only the minimum set of required information. See\n    // https://github.com/getsentry/sentry-javascript/issues/2572.\n    sentry_key: dsn.publicKey,\n    sentry_version: SENTRY_API_VERSION,\n    ...(sdkInfo && { sentry_client: `${sdkInfo.name}/${sdkInfo.version}` }),\n  });\n}\n\n/**\n * Returns the envelope endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nexport function getEnvelopeEndpointWithUrlEncodedAuth(\n  dsn: DsnComponents,\n  // TODO (v8): Remove `tunnelOrOptions` in favor of `options`, and use the substitute code below\n  // options: ClientOptions = {} as ClientOptions,\n  tunnelOrOptions: string | ClientOptions = {} as ClientOptions,\n): string {\n  // TODO (v8): Use this code instead\n  // const { tunnel, _metadata = {} } = options;\n  // return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, _metadata.sdk)}`;\n\n  const tunnel = typeof tunnelOrOptions === 'string' ? tunnelOrOptions : tunnelOrOptions.tunnel;\n  const sdkInfo =\n    typeof tunnelOrOptions === 'string' || !tunnelOrOptions._metadata ? undefined : tunnelOrOptions._metadata.sdk;\n\n  return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, sdkInfo)}`;\n}\n\n/** Returns the url to the report dialog endpoint. */\nexport function getReportDialogEndpoint(\n  dsnLike: DsnLike,\n  dialogOptions: {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [key: string]: any;\n    user?: { name?: string; email?: string };\n  },\n): string {\n  const dsn = makeDsn(dsnLike);\n  if (!dsn) {\n    return '';\n  }\n\n  const endpoint = `${getBaseApiEndpoint(dsn)}embed/error-page/`;\n\n  let encodedOptions = `dsn=${dsnToString(dsn)}`;\n  for (const key in dialogOptions) {\n    if (key === 'dsn') {\n      continue;\n    }\n\n    if (key === 'onClose') {\n      continue;\n    }\n\n    if (key === 'user') {\n      const user = dialogOptions.user;\n      if (!user) {\n        continue;\n      }\n      if (user.name) {\n        encodedOptions += `&name=${encodeURIComponent(user.name)}`;\n      }\n      if (user.email) {\n        encodedOptions += `&email=${encodeURIComponent(user.email)}`;\n      }\n    } else {\n      encodedOptions += `&${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key] as string)}`;\n    }\n  }\n\n  return `${endpoint}?${encodedOptions}`;\n}\n","import type { DsnComponents, MetricBucketItem, SdkMetadata, StatsdEnvelope, StatsdItem } from '@sentry/types';\nimport { createEnvelope, dsnToString } from '@sentry/utils';\nimport { serializeMetricBuckets } from './utils';\n\n/**\n * Create envelope from a metric aggregate.\n */\nexport function createMetricEnvelope(\n  metricBucketItems: Array<MetricBucketItem>,\n  dsn?: DsnComponents,\n  metadata?: SdkMetadata,\n  tunnel?: string,\n): StatsdEnvelope {\n  const headers: StatsdEnvelope[0] = {\n    sent_at: new Date().toISOString(),\n  };\n\n  if (metadata && metadata.sdk) {\n    headers.sdk = {\n      name: metadata.sdk.name,\n      version: metadata.sdk.version,\n    };\n  }\n\n  if (!!tunnel && dsn) {\n    headers.dsn = dsnToString(dsn);\n  }\n\n  const item = createMetricEnvelopeItem(metricBucketItems);\n  return createEnvelope<StatsdEnvelope>(headers, [item]);\n}\n\nfunction createMetricEnvelopeItem(metricBucketItems: MetricBucketItem[]): StatsdItem {\n  const payload = serializeMetricBuckets(metricBucketItems);\n  const metricHeaders: StatsdItem[0] = {\n    type: 'statsd',\n    length: payload.length,\n  };\n  return [metricHeaders, payload];\n}\n","import type { MeasurementUnit, MetricBucketItem, Primitive } from '@sentry/types';\nimport { dropUndefinedKeys } from '@sentry/utils';\nimport type { MetricType } from './types';\n\n/**\n * Generate bucket key from metric properties.\n */\nexport function getBucketKey(\n  metricType: MetricType,\n  name: string,\n  unit: MeasurementUnit,\n  tags: Record<string, string>,\n): string {\n  const stringifiedTags = Object.entries(dropUndefinedKeys(tags)).sort((a, b) => a[0].localeCompare(b[0]));\n  return `${metricType}${name}${unit}${stringifiedTags}`;\n}\n\n/* eslint-disable no-bitwise */\n/**\n * Simple hash function for strings.\n */\nexport function simpleHash(s: string): number {\n  let rv = 0;\n  for (let i = 0; i < s.length; i++) {\n    const c = s.charCodeAt(i);\n    rv = (rv << 5) - rv + c;\n    rv &= rv;\n  }\n  return rv >>> 0;\n}\n/* eslint-enable no-bitwise */\n\n/**\n * Serialize metrics buckets into a string based on statsd format.\n *\n * Example of format:\n * metric.name@second:1:1.2|d|#a:value,b:anothervalue|T12345677\n * Segments:\n * name: metric.name\n * unit: second\n * value: [1, 1.2]\n * type of metric: d (distribution)\n * tags: { a: value, b: anothervalue }\n * timestamp: 12345677\n */\nexport function serializeMetricBuckets(metricBucketItems: MetricBucketItem[]): string {\n  let out = '';\n  for (const item of metricBucketItems) {\n    const tagEntries = Object.entries(item.tags);\n    const maybeTags = tagEntries.length > 0 ? `|#${tagEntries.map(([key, value]) => `${key}:${value}`).join(',')}` : '';\n    out += `${item.name}@${item.unit}:${item.metric}|${item.metricType}${maybeTags}|T${item.timestamp}\\n`;\n  }\n  return out;\n}\n\n/** Sanitizes units */\nexport function sanitizeUnit(unit: string): string {\n  return unit.replace(/[^\\w]+/gi, '_');\n}\n\n/** Sanitizes metric keys */\nexport function sanitizeMetricKey(key: string): string {\n  return key.replace(/[^\\w\\-.]+/gi, '_');\n}\n\nfunction sanitizeTagKey(key: string): string {\n  return key.replace(/[^\\w\\-./]+/gi, '');\n}\n\nconst tagValueReplacements: [string, string][] = [\n  ['\\n', '\\\\n'],\n  ['\\r', '\\\\r'],\n  ['\\t', '\\\\t'],\n  ['\\\\', '\\\\\\\\'],\n  ['|', '\\\\u{7c}'],\n  [',', '\\\\u{2c}'],\n];\n\nfunction getCharOrReplacement(input: string): string {\n  for (const [search, replacement] of tagValueReplacements) {\n    if (input === search) {\n      return replacement;\n    }\n  }\n\n  return input;\n}\n\nfunction sanitizeTagValue(value: string): string {\n  return [...value].reduce((acc, char) => acc + getCharOrReplacement(char), '');\n}\n\n/**\n * Sanitizes tags.\n */\nexport function sanitizeTags(unsanitizedTags: Record<string, Primitive>): Record<string, string> {\n  const tags: Record<string, string> = {};\n  for (const key in unsanitizedTags) {\n    if (Object.prototype.hasOwnProperty.call(unsanitizedTags, key)) {\n      const sanitizedKey = sanitizeTagKey(key);\n      tags[sanitizedKey] = sanitizeTagValue(String(unsanitizedTags[key]));\n    }\n  }\n  return tags;\n}\n","/* eslint-disable max-lines */\nimport type {\n  Breadcrumb,\n  BreadcrumbHint,\n  Client,\n  ClientOptions,\n  DataCategory,\n  DsnComponents,\n  DynamicSamplingContext,\n  Envelope,\n  ErrorEvent,\n  Event,\n  EventDropReason,\n  EventHint,\n  EventProcessor,\n  FeedbackEvent,\n  Integration,\n  IntegrationClass,\n  MetricBucketItem,\n  MetricsAggregator,\n  Outcome,\n  ParameterizedString,\n  SdkMetadata,\n  Session,\n  SessionAggregates,\n  Severity,\n  SeverityLevel,\n  StartSpanOptions,\n  Transaction,\n  TransactionEvent,\n  Transport,\n  TransportMakeRequestResponse,\n} from '@sentry/types';\nimport {\n  SentryError,\n  SyncPromise,\n  addItemToEnvelope,\n  checkOrSetAlreadyCaught,\n  createAttachmentEnvelopeItem,\n  isParameterizedString,\n  isPlainObject,\n  isPrimitive,\n  isThenable,\n  logger,\n  makeDsn,\n  rejectedSyncPromise,\n  resolvedSyncPromise,\n} from '@sentry/utils';\n\nimport { getEnvelopeEndpointWithUrlEncodedAuth } from './api';\nimport { DEBUG_BUILD } from './debug-build';\nimport { createEventEnvelope, createSessionEnvelope } from './envelope';\nimport { getClient } from './exports';\nimport { getIsolationScope } from './hub';\nimport type { IntegrationIndex } from './integration';\nimport { afterSetupIntegrations } from './integration';\nimport { setupIntegration, setupIntegrations } from './integration';\nimport { createMetricEnvelope } from './metrics/envelope';\nimport type { Scope } from './scope';\nimport { updateSession } from './session';\nimport { getDynamicSamplingContextFromClient } from './tracing/dynamicSamplingContext';\nimport { prepareEvent } from './utils/prepareEvent';\n\nconst ALREADY_SEEN_ERROR = \"Not capturing exception because it's already been captured.\";\n\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event, it is passed through\n * {@link BaseClient._prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(options);\n *   }\n *\n *   // ...\n * }\n */\nexport abstract class BaseClient<O extends ClientOptions> implements Client<O> {\n  /**\n   * A reference to a metrics aggregator\n   *\n   * @experimental Note this is alpha API. It may experience breaking changes in the future.\n   */\n  public metricsAggregator?: MetricsAggregator;\n\n  /** Options passed to the SDK. */\n  protected readonly _options: O;\n\n  /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */\n  protected readonly _dsn?: DsnComponents;\n\n  protected readonly _transport?: Transport;\n\n  /** Array of set up integrations. */\n  protected _integrations: IntegrationIndex;\n\n  /** Indicates whether this client's integrations have been set up. */\n  protected _integrationsInitialized: boolean;\n\n  /** Number of calls being processed */\n  protected _numProcessing: number;\n\n  protected _eventProcessors: EventProcessor[];\n\n  /** Holds flushable  */\n  private _outcomes: { [key: string]: number };\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  private _hooks: Record<string, Function[]>;\n\n  /**\n   * Initializes this client instance.\n   *\n   * @param options Options for the client.\n   */\n  protected constructor(options: O) {\n    this._options = options;\n    this._integrations = {};\n    this._integrationsInitialized = false;\n    this._numProcessing = 0;\n    this._outcomes = {};\n    this._hooks = {};\n    this._eventProcessors = [];\n\n    if (options.dsn) {\n      this._dsn = makeDsn(options.dsn);\n    } else {\n      DEBUG_BUILD && logger.warn('No DSN provided, client will not send events.');\n    }\n\n    if (this._dsn) {\n      const url = getEnvelopeEndpointWithUrlEncodedAuth(this._dsn, options);\n      this._transport = options.transport({\n        tunnel: this._options.tunnel,\n        recordDroppedEvent: this.recordDroppedEvent.bind(this),\n        ...options.transportOptions,\n        url,\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public captureException(exception: any, hint?: EventHint, scope?: Scope): string | undefined {\n    // ensure we haven't captured this very object before\n    if (checkOrSetAlreadyCaught(exception)) {\n      DEBUG_BUILD && logger.log(ALREADY_SEEN_ERROR);\n      return;\n    }\n\n    let eventId: string | undefined = hint && hint.event_id;\n\n    this._process(\n      this.eventFromException(exception, hint)\n        .then(event => this._captureEvent(event, hint, scope))\n        .then(result => {\n          eventId = result;\n        }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(\n    message: ParameterizedString,\n    // eslint-disable-next-line deprecation/deprecation\n    level?: Severity | SeverityLevel,\n    hint?: EventHint,\n    scope?: Scope,\n  ): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n\n    const eventMessage = isParameterizedString(message) ? message : String(message);\n\n    const promisedEvent = isPrimitive(message)\n      ? this.eventFromMessage(eventMessage, level, hint)\n      : this.eventFromException(message, hint);\n\n    this._process(\n      promisedEvent\n        .then(event => this._captureEvent(event, hint, scope))\n        .then(result => {\n          eventId = result;\n        }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint, scope?: Scope): string | undefined {\n    // ensure we haven't captured this very object before\n    if (hint && hint.originalException && checkOrSetAlreadyCaught(hint.originalException)) {\n      DEBUG_BUILD && logger.log(ALREADY_SEEN_ERROR);\n      return;\n    }\n\n    let eventId: string | undefined = hint && hint.event_id;\n\n    const sdkProcessingMetadata = event.sdkProcessingMetadata || {};\n    const capturedSpanScope: Scope | undefined = sdkProcessingMetadata.capturedSpanScope;\n\n    this._process(\n      this._captureEvent(event, hint, capturedSpanScope || scope).then(result => {\n        eventId = result;\n      }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureSession(session: Session): void {\n    if (!(typeof session.release === 'string')) {\n      DEBUG_BUILD && logger.warn('Discarded session because of missing or non-string release');\n    } else {\n      this.sendSession(session);\n      // After sending, we set init false to indicate it's not the first occurrence\n      updateSession(session, { init: false });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getDsn(): DsnComponents | undefined {\n    return this._dsn;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getOptions(): O {\n    return this._options;\n  }\n\n  /**\n   * @see SdkMetadata in @sentry/types\n   *\n   * @return The metadata of the SDK\n   */\n  public getSdkMetadata(): SdkMetadata | undefined {\n    return this._options._metadata;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransport(): Transport | undefined {\n    return this._transport;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public flush(timeout?: number): PromiseLike<boolean> {\n    const transport = this._transport;\n    if (transport) {\n      if (this.metricsAggregator) {\n        this.metricsAggregator.flush();\n      }\n      return this._isClientDoneProcessing(timeout).then(clientFinished => {\n        return transport.flush(timeout).then(transportFlushed => clientFinished && transportFlushed);\n      });\n    } else {\n      return resolvedSyncPromise(true);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this.flush(timeout).then(result => {\n      this.getOptions().enabled = false;\n      if (this.metricsAggregator) {\n        this.metricsAggregator.close();\n      }\n      return result;\n    });\n  }\n\n  /** Get all installed event processors. */\n  public getEventProcessors(): EventProcessor[] {\n    return this._eventProcessors;\n  }\n\n  /** @inheritDoc */\n  public addEventProcessor(eventProcessor: EventProcessor): void {\n    this._eventProcessors.push(eventProcessor);\n  }\n\n  /**\n   * This is an internal function to setup all integrations that should run on the client.\n   * @deprecated Use `client.init()` instead.\n   */\n  public setupIntegrations(forceInitialize?: boolean): void {\n    if ((forceInitialize && !this._integrationsInitialized) || (this._isEnabled() && !this._integrationsInitialized)) {\n      this._setupIntegrations();\n    }\n  }\n\n  /** @inheritdoc */\n  public init(): void {\n    if (this._isEnabled()) {\n      this._setupIntegrations();\n    }\n  }\n\n  /**\n   * Gets an installed integration by its `id`.\n   *\n   * @returns The installed integration or `undefined` if no integration with that `id` was installed.\n   * @deprecated Use `getIntegrationByName()` instead.\n   */\n  public getIntegrationById(integrationId: string): Integration | undefined {\n    return this.getIntegrationByName(integrationId);\n  }\n\n  /**\n   * Gets an installed integration by its name.\n   *\n   * @returns The installed integration or `undefined` if no integration with that `name` was installed.\n   */\n  public getIntegrationByName<T extends Integration = Integration>(integrationName: string): T | undefined {\n    return this._integrations[integrationName] as T | undefined;\n  }\n\n  /**\n   * Returns the client's instance of the given integration class, it any.\n   * @deprecated Use `getIntegrationByName()` instead.\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    try {\n      return (this._integrations[integration.id] as T) || null;\n    } catch (_oO) {\n      DEBUG_BUILD && logger.warn(`Cannot retrieve integration ${integration.id} from the current Client`);\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addIntegration(integration: Integration): void {\n    const isAlreadyInstalled = this._integrations[integration.name];\n\n    // This hook takes care of only installing if not already installed\n    setupIntegration(this, integration, this._integrations);\n    // Here we need to check manually to make sure to not run this multiple times\n    if (!isAlreadyInstalled) {\n      afterSetupIntegrations(this, [integration]);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event, hint: EventHint = {}): void {\n    this.emit('beforeSendEvent', event, hint);\n\n    let env = createEventEnvelope(event, this._dsn, this._options._metadata, this._options.tunnel);\n\n    for (const attachment of hint.attachments || []) {\n      env = addItemToEnvelope(\n        env,\n        createAttachmentEnvelopeItem(\n          attachment,\n          this._options.transportOptions && this._options.transportOptions.textEncoder,\n        ),\n      );\n    }\n\n    const promise = this._sendEnvelope(env);\n    if (promise) {\n      promise.then(sendResponse => this.emit('afterSendEvent', event, sendResponse), null);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendSession(session: Session | SessionAggregates): void {\n    const env = createSessionEnvelope(session, this._dsn, this._options._metadata, this._options.tunnel);\n\n    // _sendEnvelope should not throw\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this._sendEnvelope(env);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public recordDroppedEvent(reason: EventDropReason, category: DataCategory, eventOrCount?: Event | number): void {\n    if (this._options.sendClientReports) {\n      // TODO v9: We do not need the `event` passed as third argument anymore, and can possibly remove this overload\n      // If event is passed as third argument, we assume this is a count of 1\n      const count = typeof eventOrCount === 'number' ? eventOrCount : 1;\n\n      // We want to track each category (error, transaction, session, replay_event) separately\n      // but still keep the distinction between different type of outcomes.\n      // We could use nested maps, but it's much easier to read and type this way.\n      // A correct type for map-based implementation if we want to go that route\n      // would be `Partial<Record<SentryRequestType, Partial<Record<Outcome, number>>>>`\n      // With typescript 4.1 we could even use template literal types\n      const key = `${reason}:${category}`;\n      DEBUG_BUILD && logger.log(`Recording outcome: \"${key}\"${count > 1 ? ` (${count} times)` : ''}`);\n      this._outcomes[key] = (this._outcomes[key] || 0) + count;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureAggregateMetrics(metricBucketItems: Array<MetricBucketItem>): void {\n    DEBUG_BUILD && logger.log(`Flushing aggregated metrics, number of metrics: ${metricBucketItems.length}`);\n    const metricsEnvelope = createMetricEnvelope(\n      metricBucketItems,\n      this._dsn,\n      this._options._metadata,\n      this._options.tunnel,\n    );\n\n    // _sendEnvelope should not throw\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this._sendEnvelope(metricsEnvelope);\n  }\n\n  // Keep on() & emit() signatures in sync with types' client.ts interface\n  /* eslint-disable @typescript-eslint/unified-signatures */\n\n  /** @inheritdoc */\n  public on(hook: 'startTransaction', callback: (transaction: Transaction) => void): void;\n\n  /** @inheritdoc */\n  public on(hook: 'finishTransaction', callback: (transaction: Transaction) => void): void;\n\n  /** @inheritdoc */\n  public on(hook: 'beforeEnvelope', callback: (envelope: Envelope) => void): void;\n\n  /** @inheritdoc */\n  public on(hook: 'beforeSendEvent', callback: (event: Event, hint?: EventHint) => void): void;\n\n  /** @inheritdoc */\n  public on(hook: 'preprocessEvent', callback: (event: Event, hint?: EventHint) => void): void;\n\n  /** @inheritdoc */\n  public on(\n    hook: 'afterSendEvent',\n    callback: (event: Event, sendResponse: TransportMakeRequestResponse | void) => void,\n  ): void;\n\n  /** @inheritdoc */\n  public on(hook: 'beforeAddBreadcrumb', callback: (breadcrumb: Breadcrumb, hint?: BreadcrumbHint) => void): void;\n\n  /** @inheritdoc */\n  public on(hook: 'createDsc', callback: (dsc: DynamicSamplingContext) => void): void;\n\n  /** @inheritdoc */\n  public on(hook: 'otelSpanEnd', callback: (otelSpan: unknown, mutableOptions: { drop: boolean }) => void): void;\n\n  /** @inheritdoc */\n  public on(\n    hook: 'beforeSendFeedback',\n    callback: (feedback: FeedbackEvent, options?: { includeReplay: boolean }) => void,\n  ): void;\n\n  /** @inheritdoc */\n  public on(hook: 'startPageLoadSpan', callback: (options: StartSpanOptions) => void): void;\n\n  /** @inheritdoc */\n  public on(hook: 'startNavigationSpan', callback: (options: StartSpanOptions) => void): void;\n\n  /** @inheritdoc */\n  public on(hook: string, callback: unknown): void {\n    if (!this._hooks[hook]) {\n      this._hooks[hook] = [];\n    }\n\n    // @ts-expect-error We assue the types are correct\n    this._hooks[hook].push(callback);\n  }\n\n  /** @inheritdoc */\n  public emit(hook: 'startTransaction', transaction: Transaction): void;\n\n  /** @inheritdoc */\n  public emit(hook: 'finishTransaction', transaction: Transaction): void;\n\n  /** @inheritdoc */\n  public emit(hook: 'beforeEnvelope', envelope: Envelope): void;\n\n  /** @inheritdoc */\n  public emit(hook: 'beforeSendEvent', event: Event, hint?: EventHint): void;\n\n  /** @inheritdoc */\n  public emit(hook: 'preprocessEvent', event: Event, hint?: EventHint): void;\n\n  /** @inheritdoc */\n  public emit(hook: 'afterSendEvent', event: Event, sendResponse: TransportMakeRequestResponse | void): void;\n\n  /** @inheritdoc */\n  public emit(hook: 'beforeAddBreadcrumb', breadcrumb: Breadcrumb, hint?: BreadcrumbHint): void;\n\n  /** @inheritdoc */\n  public emit(hook: 'createDsc', dsc: DynamicSamplingContext): void;\n\n  /** @inheritdoc */\n  public emit(hook: 'otelSpanEnd', otelSpan: unknown, mutableOptions: { drop: boolean }): void;\n\n  /** @inheritdoc */\n  public emit(hook: 'beforeSendFeedback', feedback: FeedbackEvent, options?: { includeReplay: boolean }): void;\n\n  /** @inheritdoc */\n  public emit(hook: 'startPageLoadSpan', options: StartSpanOptions): void;\n\n  /** @inheritdoc */\n  public emit(hook: 'startNavigationSpan', options: StartSpanOptions): void;\n\n  /** @inheritdoc */\n  public emit(hook: string, ...rest: unknown[]): void {\n    if (this._hooks[hook]) {\n      this._hooks[hook].forEach(callback => callback(...rest));\n    }\n  }\n\n  /* eslint-enable @typescript-eslint/unified-signatures */\n\n  /** Setup integrations for this client. */\n  protected _setupIntegrations(): void {\n    const { integrations } = this._options;\n    this._integrations = setupIntegrations(this, integrations);\n    afterSetupIntegrations(this, integrations);\n\n    // TODO v8: We don't need this flag anymore\n    this._integrationsInitialized = true;\n  }\n\n  /** Updates existing session based on the provided event */\n  protected _updateSessionFromEvent(session: Session, event: Event): void {\n    let crashed = false;\n    let errored = false;\n    const exceptions = event.exception && event.exception.values;\n\n    if (exceptions) {\n      errored = true;\n\n      for (const ex of exceptions) {\n        const mechanism = ex.mechanism;\n        if (mechanism && mechanism.handled === false) {\n          crashed = true;\n          break;\n        }\n      }\n    }\n\n    // A session is updated and that session update is sent in only one of the two following scenarios:\n    // 1. Session with non terminal status and 0 errors + an error occurred -> Will set error count to 1 and send update\n    // 2. Session with non terminal status and 1 error + a crash occurred -> Will set status crashed and send update\n    const sessionNonTerminal = session.status === 'ok';\n    const shouldUpdateAndSend = (sessionNonTerminal && session.errors === 0) || (sessionNonTerminal && crashed);\n\n    if (shouldUpdateAndSend) {\n      updateSession(session, {\n        ...(crashed && { status: 'crashed' }),\n        errors: session.errors || Number(errored || crashed),\n      });\n      this.captureSession(session);\n    }\n  }\n\n  /**\n   * Determine if the client is finished processing. Returns a promise because it will wait `timeout` ms before saying\n   * \"no\" (resolving to `false`) in order to give the client a chance to potentially finish first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the client is still busy. Passing `0` (or not\n   * passing anything) will make the promise wait as long as it takes for processing to finish before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if processing is already done or finishes before the timeout, and\n   * `false` otherwise\n   */\n  protected _isClientDoneProcessing(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise(resolve => {\n      let ticked: number = 0;\n      const tick: number = 1;\n\n      const interval = setInterval(() => {\n        if (this._numProcessing == 0) {\n          clearInterval(interval);\n          resolve(true);\n        } else {\n          ticked += tick;\n          if (timeout && ticked >= timeout) {\n            clearInterval(interval);\n            resolve(false);\n          }\n        }\n      }, tick);\n    });\n  }\n\n  /** Determines whether this SDK is enabled and a transport is present. */\n  protected _isEnabled(): boolean {\n    return this.getOptions().enabled !== false && this._transport !== undefined;\n  }\n\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n  protected _prepareEvent(\n    event: Event,\n    hint: EventHint,\n    scope?: Scope,\n    isolationScope = getIsolationScope(),\n  ): PromiseLike<Event | null> {\n    const options = this.getOptions();\n    const integrations = Object.keys(this._integrations);\n    if (!hint.integrations && integrations.length > 0) {\n      hint.integrations = integrations;\n    }\n\n    this.emit('preprocessEvent', event, hint);\n\n    return prepareEvent(options, event, hint, scope, this, isolationScope).then(evt => {\n      if (evt === null) {\n        return evt;\n      }\n\n      const propagationContext = {\n        ...isolationScope.getPropagationContext(),\n        ...(scope ? scope.getPropagationContext() : undefined),\n      };\n\n      const trace = evt.contexts && evt.contexts.trace;\n      if (!trace && propagationContext) {\n        const { traceId: trace_id, spanId, parentSpanId, dsc } = propagationContext;\n        evt.contexts = {\n          trace: {\n            trace_id,\n            span_id: spanId,\n            parent_span_id: parentSpanId,\n          },\n          ...evt.contexts,\n        };\n\n        const dynamicSamplingContext = dsc ? dsc : getDynamicSamplingContextFromClient(trace_id, this, scope);\n\n        evt.sdkProcessingMetadata = {\n          dynamicSamplingContext,\n          ...evt.sdkProcessingMetadata,\n        };\n      }\n      return evt;\n    });\n  }\n\n  /**\n   * Processes the event and logs an error in case of rejection\n   * @param event\n   * @param hint\n   * @param scope\n   */\n  protected _captureEvent(event: Event, hint: EventHint = {}, scope?: Scope): PromiseLike<string | undefined> {\n    return this._processEvent(event, hint, scope).then(\n      finalEvent => {\n        return finalEvent.event_id;\n      },\n      reason => {\n        if (DEBUG_BUILD) {\n          // If something's gone wrong, log the error as a warning. If it's just us having used a `SentryError` for\n          // control flow, log just the message (no stack) as a log-level log.\n          const sentryError = reason as SentryError;\n          if (sentryError.logLevel === 'log') {\n            logger.log(sentryError.message);\n          } else {\n            logger.warn(sentryError);\n          }\n        }\n        return undefined;\n      },\n    );\n  }\n\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */\n  protected _processEvent(event: Event, hint: EventHint, scope?: Scope): PromiseLike<Event> {\n    const options = this.getOptions();\n    const { sampleRate } = options;\n\n    const isTransaction = isTransactionEvent(event);\n    const isError = isErrorEvent(event);\n    const eventType = event.type || 'error';\n    const beforeSendLabel = `before send for type \\`${eventType}\\``;\n\n    // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n    // Sampling for transaction happens somewhere else\n    if (isError && typeof sampleRate === 'number' && Math.random() > sampleRate) {\n      this.recordDroppedEvent('sample_rate', 'error', event);\n      return rejectedSyncPromise(\n        new SentryError(\n          `Discarding event because it's not included in the random sample (sampling rate = ${sampleRate})`,\n          'log',\n        ),\n      );\n    }\n\n    const dataCategory: DataCategory = eventType === 'replay_event' ? 'replay' : eventType;\n\n    const sdkProcessingMetadata = event.sdkProcessingMetadata || {};\n    const capturedSpanIsolationScope: Scope | undefined = sdkProcessingMetadata.capturedSpanIsolationScope;\n\n    return this._prepareEvent(event, hint, scope, capturedSpanIsolationScope)\n      .then(prepared => {\n        if (prepared === null) {\n          this.recordDroppedEvent('event_processor', dataCategory, event);\n          throw new SentryError('An event processor returned `null`, will not send event.', 'log');\n        }\n\n        const isInternalException = hint.data && (hint.data as { __sentry__: boolean }).__sentry__ === true;\n        if (isInternalException) {\n          return prepared;\n        }\n\n        const result = processBeforeSend(options, prepared, hint);\n        return _validateBeforeSendResult(result, beforeSendLabel);\n      })\n      .then(processedEvent => {\n        if (processedEvent === null) {\n          this.recordDroppedEvent('before_send', dataCategory, event);\n          if (isTransaction) {\n            const spans = event.spans || [];\n            // the transaction itself counts as one span, plus all the child spans that are added\n            const spanCount = 1 + spans.length;\n            this.recordDroppedEvent('before_send', 'span', spanCount);\n          }\n          throw new SentryError(`${beforeSendLabel} returned \\`null\\`, will not send event.`, 'log');\n        }\n\n        const session = scope && scope.getSession();\n        if (!isTransaction && session) {\n          this._updateSessionFromEvent(session, processedEvent);\n        }\n\n        if (isTransaction) {\n          const spanCountBefore =\n            (processedEvent.sdkProcessingMetadata && processedEvent.sdkProcessingMetadata.spanCountBeforeProcessing) ||\n            0;\n          const spanCountAfter = processedEvent.spans ? processedEvent.spans.length : 0;\n\n          const droppedSpanCount = spanCountBefore - spanCountAfter;\n          if (droppedSpanCount > 0) {\n            this.recordDroppedEvent('before_send', 'span', droppedSpanCount);\n          }\n        }\n\n        // None of the Sentry built event processor will update transaction name,\n        // so if the transaction name has been changed by an event processor, we know\n        // it has to come from custom event processor added by a user\n        const transactionInfo = processedEvent.transaction_info;\n        if (isTransaction && transactionInfo && processedEvent.transaction !== event.transaction) {\n          const source = 'custom';\n          processedEvent.transaction_info = {\n            ...transactionInfo,\n            source,\n          };\n        }\n\n        this.sendEvent(processedEvent, hint);\n        return processedEvent;\n      })\n      .then(null, reason => {\n        if (reason instanceof SentryError) {\n          throw reason;\n        }\n\n        this.captureException(reason, {\n          data: {\n            __sentry__: true,\n          },\n          originalException: reason,\n        });\n        throw new SentryError(\n          `Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: ${reason}`,\n        );\n      });\n  }\n\n  /**\n   * Occupies the client with processing and event\n   */\n  protected _process<T>(promise: PromiseLike<T>): void {\n    this._numProcessing++;\n    void promise.then(\n      value => {\n        this._numProcessing--;\n        return value;\n      },\n      reason => {\n        this._numProcessing--;\n        return reason;\n      },\n    );\n  }\n\n  /**\n   * @inheritdoc\n   */\n  protected _sendEnvelope(envelope: Envelope): PromiseLike<void | TransportMakeRequestResponse> | void {\n    this.emit('beforeEnvelope', envelope);\n\n    if (this._isEnabled() && this._transport) {\n      return this._transport.send(envelope).then(null, reason => {\n        DEBUG_BUILD && logger.error('Error while sending event:', reason);\n      });\n    } else {\n      DEBUG_BUILD && logger.error('Transport disabled');\n    }\n  }\n\n  /**\n   * Clears outcomes on this client and returns them.\n   */\n  protected _clearOutcomes(): Outcome[] {\n    const outcomes = this._outcomes;\n    this._outcomes = {};\n    return Object.keys(outcomes).map(key => {\n      const [reason, category] = key.split(':') as [EventDropReason, DataCategory];\n      return {\n        reason,\n        category,\n        quantity: outcomes[key],\n      };\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public abstract eventFromException(_exception: any, _hint?: EventHint): PromiseLike<Event>;\n\n  /**\n   * @inheritDoc\n   */\n  public abstract eventFromMessage(\n    _message: ParameterizedString,\n    // eslint-disable-next-line deprecation/deprecation\n    _level?: Severity | SeverityLevel,\n    _hint?: EventHint,\n  ): PromiseLike<Event>;\n}\n\n/**\n * Verifies that return value of configured `beforeSend` or `beforeSendTransaction` is of expected type, and returns the value if so.\n */\nfunction _validateBeforeSendResult(\n  beforeSendResult: PromiseLike<Event | null> | Event | null,\n  beforeSendLabel: string,\n): PromiseLike<Event | null> | Event | null {\n  const invalidValueError = `${beforeSendLabel} must return \\`null\\` or a valid event.`;\n  if (isThenable(beforeSendResult)) {\n    return beforeSendResult.then(\n      event => {\n        if (!isPlainObject(event) && event !== null) {\n          throw new SentryError(invalidValueError);\n        }\n        return event;\n      },\n      e => {\n        throw new SentryError(`${beforeSendLabel} rejected with ${e}`);\n      },\n    );\n  } else if (!isPlainObject(beforeSendResult) && beforeSendResult !== null) {\n    throw new SentryError(invalidValueError);\n  }\n  return beforeSendResult;\n}\n\n/**\n * Process the matching `beforeSendXXX` callback.\n */\nfunction processBeforeSend(\n  options: ClientOptions,\n  event: Event,\n  hint: EventHint,\n): PromiseLike<Event | null> | Event | null {\n  const { beforeSend, beforeSendTransaction } = options;\n\n  if (isErrorEvent(event) && beforeSend) {\n    return beforeSend(event, hint);\n  }\n\n  if (isTransactionEvent(event) && beforeSendTransaction) {\n    if (event.spans) {\n      // We store the # of spans before processing in SDK metadata,\n      // so we can compare it afterwards to determine how many spans were dropped\n      const spanCountBefore = event.spans.length;\n      event.sdkProcessingMetadata = {\n        ...event.sdkProcessingMetadata,\n        spanCountBeforeProcessing: spanCountBefore,\n      };\n    }\n    return beforeSendTransaction(event, hint);\n  }\n\n  return event;\n}\n\nfunction isErrorEvent(event: Event): event is ErrorEvent {\n  return event.type === undefined;\n}\n\nfunction isTransactionEvent(event: Event): event is TransactionEvent {\n  return event.type === 'transaction';\n}\n\n/**\n * Add an event processor to the current client.\n * This event processor will run for all events processed by this client.\n */\nexport function addEventProcessor(callback: EventProcessor): void {\n  const client = getClient();\n\n  if (!client || !client.addEventProcessor) {\n    return;\n  }\n\n  client.addEventProcessor(callback);\n}\n","import type { Scope } from '@sentry/core';\nimport { applySdkMetadata } from '@sentry/core';\nimport { BaseClient } from '@sentry/core';\nimport type {\n  BrowserClientProfilingOptions,\n  BrowserClientReplayOptions,\n  ClientOptions,\n  Event,\n  EventHint,\n  Options,\n  ParameterizedString,\n  Severity,\n  SeverityLevel,\n  UserFeedback,\n} from '@sentry/types';\nimport { createClientReportEnvelope, dsnToString, getSDKSource, logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from './debug-build';\nimport { eventFromException, eventFromMessage } from './eventbuilder';\nimport { WINDOW } from './helpers';\nimport type { BrowserTransportOptions } from './transports/types';\nimport { createUserFeedbackEnvelope } from './userfeedback';\n\n/**\n * Configuration options for the Sentry Browser SDK.\n * @see @sentry/types Options for more information.\n */\nexport type BrowserOptions = Options<BrowserTransportOptions> &\n  BrowserClientReplayOptions &\n  BrowserClientProfilingOptions;\n\n/**\n * Configuration options for the Sentry Browser SDK Client class\n * @see BrowserClient for more information.\n */\nexport type BrowserClientOptions = ClientOptions<BrowserTransportOptions> &\n  BrowserClientReplayOptions &\n  BrowserClientProfilingOptions;\n\n/**\n * The Sentry Browser SDK Client.\n *\n * @see BrowserOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nexport class BrowserClient extends BaseClient<BrowserClientOptions> {\n  /**\n   * Creates a new Browser SDK instance.\n   *\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: BrowserClientOptions) {\n    const sdkSource = WINDOW.SENTRY_SDK_SOURCE || getSDKSource();\n    applySdkMetadata(options, 'browser', ['browser'], sdkSource);\n\n    super(options);\n\n    if (options.sendClientReports && WINDOW.document) {\n      WINDOW.document.addEventListener('visibilitychange', () => {\n        if (WINDOW.document.visibilityState === 'hidden') {\n          this._flushOutcomes();\n        }\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(exception: unknown, hint?: EventHint): PromiseLike<Event> {\n    return eventFromException(this._options.stackParser, exception, hint, this._options.attachStacktrace);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(\n    message: ParameterizedString,\n    // eslint-disable-next-line deprecation/deprecation\n    level: Severity | SeverityLevel = 'info',\n    hint?: EventHint,\n  ): PromiseLike<Event> {\n    return eventFromMessage(this._options.stackParser, message, level, hint, this._options.attachStacktrace);\n  }\n\n  /**\n   * Sends user feedback to Sentry.\n   */\n  public captureUserFeedback(feedback: UserFeedback): void {\n    if (!this._isEnabled()) {\n      DEBUG_BUILD && logger.warn('SDK not enabled, will not capture user feedback.');\n      return;\n    }\n\n    const envelope = createUserFeedbackEnvelope(feedback, {\n      metadata: this.getSdkMetadata(),\n      dsn: this.getDsn(),\n      tunnel: this.getOptions().tunnel,\n    });\n\n    // _sendEnvelope should not throw\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this._sendEnvelope(envelope);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _prepareEvent(event: Event, hint: EventHint, scope?: Scope): PromiseLike<Event | null> {\n    event.platform = event.platform || 'javascript';\n    return super._prepareEvent(event, hint, scope);\n  }\n\n  /**\n   * Sends client reports as an envelope.\n   */\n  private _flushOutcomes(): void {\n    const outcomes = this._clearOutcomes();\n\n    if (outcomes.length === 0) {\n      DEBUG_BUILD && logger.log('No outcomes to send');\n      return;\n    }\n\n    // This is really the only place where we want to check for a DSN and only send outcomes then\n    if (!this._dsn) {\n      DEBUG_BUILD && logger.log('No dsn provided, will not send outcomes');\n      return;\n    }\n\n    DEBUG_BUILD && logger.log('Sending outcomes:', outcomes);\n\n    const envelope = createClientReportEnvelope(outcomes, this._options.tunnel && dsnToString(this._dsn));\n\n    // _sendEnvelope should not throw\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this._sendEnvelope(envelope);\n  }\n}\n","import type { Options } from '@sentry/types';\nimport { SDK_VERSION } from '../version';\n\n/**\n * A builder for the SDK metadata in the options for the SDK initialization.\n *\n * Note: This function is identical to `buildMetadata` in Remix and NextJS and SvelteKit.\n * We don't extract it for bundle size reasons.\n * @see https://github.com/getsentry/sentry-javascript/pull/7404\n * @see https://github.com/getsentry/sentry-javascript/pull/4196\n *\n * If you make changes to this function consider updating the others as well.\n *\n * @param options SDK options object that gets mutated\n * @param names list of package names\n */\nexport function applySdkMetadata(options: Options, name: string, names = [name], source = 'npm'): void {\n  const metadata = options._metadata || {};\n\n  if (!metadata.sdk) {\n    metadata.sdk = {\n      name: `sentry.javascript.${name}`,\n      packages: names.map(name => ({\n        name: `${source}:@sentry/${name}`,\n        version: SDK_VERSION,\n      })),\n      version: SDK_VERSION,\n    };\n  }\n\n  options._metadata = metadata;\n}\n","/*\n * This module exists for optimizations in the build process through rollup and terser.  We define some global\n * constants, which can be overridden during build. By guarding certain pieces of code with functions that return these\n * constants, we can control whether or not they appear in the final bundle. (Any code guarded by a false condition will\n * never run, and will hence be dropped during treeshaking.) The two primary uses for this are stripping out calls to\n * `logger` and preventing node-related code from appearing in browser bundles.\n *\n * Attention:\n * This file should not be used to define constants/flags that are intended to be used for tree-shaking conducted by\n * users. These flags should live in their respective packages, as we identified user tooling (specifically webpack)\n * having issues tree-shaking these constants across package boundaries.\n * An example for this is the __SENTRY_DEBUG__ constant. It is declared in each package individually because we want\n * users to be able to shake away expressions that it guards.\n */\n\ndeclare const __SENTRY_BROWSER_BUNDLE__: boolean | undefined;\n\nexport type SdkSource = 'npm' | 'cdn' | 'loader';\n\n/**\n * Figures out if we're building a browser bundle.\n *\n * @returns true if this is a browser bundle build.\n */\nexport function isBrowserBundle(): boolean {\n  return typeof __SENTRY_BROWSER_BUNDLE__ !== 'undefined' && !!__SENTRY_BROWSER_BUNDLE__;\n}\n\n/**\n * Get source of SDK.\n */\nexport function getSDKSource(): SdkSource {\n  // @ts-expect-error __SENTRY_SDK_SOURCE__ is injected by rollup during build process\n  return __SENTRY_SDK_SOURCE__;\n}\n","import type { DsnComponents, EventEnvelope, SdkMetadata, UserFeedback, UserFeedbackItem } from '@sentry/types';\nimport { createEnvelope, dsnToString } from '@sentry/utils';\n\n/**\n * Creates an envelope from a user feedback.\n */\nexport function createUserFeedbackEnvelope(\n  feedback: UserFeedback,\n  {\n    metadata,\n    tunnel,\n    dsn,\n  }: {\n    metadata: SdkMetadata | undefined;\n    tunnel: string | undefined;\n    dsn: DsnComponents | undefined;\n  },\n): EventEnvelope {\n  const headers: EventEnvelope[0] = {\n    event_id: feedback.event_id,\n    sent_at: new Date().toISOString(),\n    ...(metadata &&\n      metadata.sdk && {\n        sdk: {\n          name: metadata.sdk.name,\n          version: metadata.sdk.version,\n        },\n      }),\n    ...(!!tunnel && !!dsn && { dsn: dsnToString(dsn) }),\n  };\n  const item = createUserFeedbackEnvelopeItem(feedback);\n\n  return createEnvelope(headers, [item]);\n}\n\nfunction createUserFeedbackEnvelopeItem(feedback: UserFeedback): UserFeedbackItem {\n  const feedbackHeaders: UserFeedbackItem[0] = {\n    type: 'user_report',\n  };\n  return [feedbackHeaders, feedback];\n}\n","import type { ClientReport, ClientReportEnvelope, ClientReportItem } from '@sentry/types';\n\nimport { createEnvelope } from './envelope';\nimport { dateTimestampInSeconds } from './time';\n\n/**\n * Creates client report envelope\n * @param discarded_events An array of discard events\n * @param dsn A DSN that can be set on the header. Optional.\n */\nexport function createClientReportEnvelope(\n  discarded_events: ClientReport['discarded_events'],\n  dsn?: string,\n  timestamp?: number,\n): ClientReportEnvelope {\n  const clientReportItem: ClientReportItem = [\n    { type: 'client_report' },\n    {\n      timestamp: timestamp || dateTimestampInSeconds(),\n      discarded_events,\n    },\n  ];\n  return createEnvelope<ClientReportEnvelope>(dsn ? { dsn } : {}, [clientReportItem]);\n}\n","import type {\n  Envelope,\n  EnvelopeItem,\n  EnvelopeItemType,\n  Event,\n  EventDropReason,\n  EventItem,\n  InternalBaseTransportOptions,\n  Transport,\n  TransportMakeRequestResponse,\n  TransportRequestExecutor,\n} from '@sentry/types';\nimport type { PromiseBuffer, RateLimits } from '@sentry/utils';\nimport {\n  SentryError,\n  createEnvelope,\n  envelopeItemTypeToDataCategory,\n  forEachEnvelopeItem,\n  isRateLimited,\n  logger,\n  makePromiseBuffer,\n  resolvedSyncPromise,\n  serializeEnvelope,\n  updateRateLimits,\n} from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../debug-build';\n\nexport const DEFAULT_TRANSPORT_BUFFER_SIZE = 30;\n\n/**\n * Creates an instance of a Sentry `Transport`\n *\n * @param options\n * @param makeRequest\n */\nexport function createTransport(\n  options: InternalBaseTransportOptions,\n  makeRequest: TransportRequestExecutor,\n  buffer: PromiseBuffer<void | TransportMakeRequestResponse> = makePromiseBuffer(\n    options.bufferSize || DEFAULT_TRANSPORT_BUFFER_SIZE,\n  ),\n): Transport {\n  let rateLimits: RateLimits = {};\n  const flush = (timeout?: number): PromiseLike<boolean> => buffer.drain(timeout);\n\n  function send(envelope: Envelope): PromiseLike<void | TransportMakeRequestResponse> {\n    const filteredEnvelopeItems: EnvelopeItem[] = [];\n\n    // Drop rate limited items from envelope\n    forEachEnvelopeItem(envelope, (item, type) => {\n      const dataCategory = envelopeItemTypeToDataCategory(type);\n      if (isRateLimited(rateLimits, dataCategory)) {\n        const event: Event | undefined = getEventForEnvelopeItem(item, type);\n        options.recordDroppedEvent('ratelimit_backoff', dataCategory, event);\n      } else {\n        filteredEnvelopeItems.push(item);\n      }\n    });\n\n    // Skip sending if envelope is empty after filtering out rate limited events\n    if (filteredEnvelopeItems.length === 0) {\n      return resolvedSyncPromise();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const filteredEnvelope: Envelope = createEnvelope(envelope[0], filteredEnvelopeItems as any);\n\n    // Creates client report for each item in an envelope\n    const recordEnvelopeLoss = (reason: EventDropReason): void => {\n      forEachEnvelopeItem(filteredEnvelope, (item, type) => {\n        const event: Event | undefined = getEventForEnvelopeItem(item, type);\n        options.recordDroppedEvent(reason, envelopeItemTypeToDataCategory(type), event);\n      });\n    };\n\n    const requestTask = (): PromiseLike<void | TransportMakeRequestResponse> =>\n      makeRequest({ body: serializeEnvelope(filteredEnvelope, options.textEncoder) }).then(\n        response => {\n          // We don't want to throw on NOK responses, but we want to at least log them\n          if (response.statusCode !== undefined && (response.statusCode < 200 || response.statusCode >= 300)) {\n            DEBUG_BUILD && logger.warn(`Sentry responded with status code ${response.statusCode} to sent event.`);\n          }\n\n          rateLimits = updateRateLimits(rateLimits, response);\n          return response;\n        },\n        error => {\n          recordEnvelopeLoss('network_error');\n          throw error;\n        },\n      );\n\n    return buffer.add(requestTask).then(\n      result => result,\n      error => {\n        if (error instanceof SentryError) {\n          DEBUG_BUILD && logger.error('Skipped sending event because buffer is full.');\n          recordEnvelopeLoss('queue_overflow');\n          return resolvedSyncPromise();\n        } else {\n          throw error;\n        }\n      },\n    );\n  }\n\n  // We use this to identifify if the transport is the base transport\n  // TODO (v8): Remove this again as we'll no longer need it\n  send.__sentry__baseTransport__ = true;\n\n  return {\n    send,\n    flush,\n  };\n}\n\nfunction getEventForEnvelopeItem(item: Envelope[1][number], type: EnvelopeItemType): Event | undefined {\n  if (type !== 'event' && type !== 'transaction') {\n    return undefined;\n  }\n\n  return Array.isArray(item) ? (item as EventItem)[1] : undefined;\n}\n","import { SentryError } from './error';\nimport { SyncPromise, rejectedSyncPromise, resolvedSyncPromise } from './syncpromise';\n\nexport interface PromiseBuffer<T> {\n  // exposes the internal array so tests can assert on the state of it.\n  // XXX: this really should not be public api.\n  $: Array<PromiseLike<T>>;\n  add(taskProducer: () => PromiseLike<T>): PromiseLike<T>;\n  drain(timeout?: number): PromiseLike<boolean>;\n}\n\n/**\n * Creates an new PromiseBuffer object with the specified limit\n * @param limit max number of promises that can be stored in the buffer\n */\nexport function makePromiseBuffer<T>(limit?: number): PromiseBuffer<T> {\n  const buffer: Array<PromiseLike<T>> = [];\n\n  function isReady(): boolean {\n    return limit === undefined || buffer.length < limit;\n  }\n\n  /**\n   * Remove a promise from the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n  function remove(task: PromiseLike<T>): PromiseLike<T> {\n    return buffer.splice(buffer.indexOf(task), 1)[0];\n  }\n\n  /**\n   * Add a promise (representing an in-flight action) to the queue, and set it to remove itself on fulfillment.\n   *\n   * @param taskProducer A function producing any PromiseLike<T>; In previous versions this used to be `task:\n   *        PromiseLike<T>`, but under that model, Promises were instantly created on the call-site and their executor\n   *        functions therefore ran immediately. Thus, even if the buffer was full, the action still happened. By\n   *        requiring the promise to be wrapped in a function, we can defer promise creation until after the buffer\n   *        limit check.\n   * @returns The original promise.\n   */\n  function add(taskProducer: () => PromiseLike<T>): PromiseLike<T> {\n    if (!isReady()) {\n      return rejectedSyncPromise(new SentryError('Not adding Promise because buffer limit was reached.'));\n    }\n\n    // start the task and add its promise to the queue\n    const task = taskProducer();\n    if (buffer.indexOf(task) === -1) {\n      buffer.push(task);\n    }\n    void task\n      .then(() => remove(task))\n      // Use `then(null, rejectionHandler)` rather than `catch(rejectionHandler)` so that we can use `PromiseLike`\n      // rather than `Promise`. `PromiseLike` doesn't have a `.catch` method, making its polyfill smaller. (ES5 didn't\n      // have promises, so TS has to polyfill when down-compiling.)\n      .then(null, () =>\n        remove(task).then(null, () => {\n          // We have to add another catch here because `remove()` starts a new promise chain.\n        }),\n      );\n    return task;\n  }\n\n  /**\n   * Wait for all promises in the queue to resolve or for timeout to expire, whichever comes first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the queue is still non-empty. Passing `0` (or\n   * not passing anything) will make the promise wait as long as it takes for the queue to drain before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if the queue is already empty or drains before the timeout, and\n   * `false` otherwise\n   */\n  function drain(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise<boolean>((resolve, reject) => {\n      let counter = buffer.length;\n\n      if (!counter) {\n        return resolve(true);\n      }\n\n      // wait for `timeout` ms and then resolve to `false` (if not cancelled first)\n      const capturedSetTimeout = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n\n      // if all promises resolve in time, cancel the timer and resolve to `true`\n      buffer.forEach(item => {\n        void resolvedSyncPromise(item).then(() => {\n          if (!--counter) {\n            clearTimeout(capturedSetTimeout);\n            resolve(true);\n          }\n        }, reject);\n      });\n    });\n  }\n\n  return {\n    $: buffer,\n    add,\n    drain,\n  };\n}\n","import type { DataCategory, TransportMakeRequestResponse } from '@sentry/types';\n\n// Intentionally keeping the key broad, as we don't know for sure what rate limit headers get returned from backend\nexport type RateLimits = Record<string, number>;\n\nexport const DEFAULT_RETRY_AFTER = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param header string representation of 'Retry-After' header\n * @param now current unix timestamp\n *\n */\nexport function parseRetryAfterHeader(header: string, now: number = Date.now()): number {\n  const headerDelay = parseInt(`${header}`, 10);\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n\n  const headerDate = Date.parse(`${header}`);\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n\n  return DEFAULT_RETRY_AFTER;\n}\n\n/**\n * Gets the time that the given category is disabled until for rate limiting.\n * In case no category-specific limit is set but a general rate limit across all categories is active,\n * that time is returned.\n *\n * @return the time in ms that the category is disabled until or 0 if there's no active rate limit.\n */\nexport function disabledUntil(limits: RateLimits, dataCategory: DataCategory): number {\n  return limits[dataCategory] || limits.all || 0;\n}\n\n/**\n * Checks if a category is rate limited\n */\nexport function isRateLimited(limits: RateLimits, dataCategory: DataCategory, now: number = Date.now()): boolean {\n  return disabledUntil(limits, dataCategory) > now;\n}\n\n/**\n * Update ratelimits from incoming headers.\n *\n * @return the updated RateLimits object.\n */\nexport function updateRateLimits(\n  limits: RateLimits,\n  { statusCode, headers }: TransportMakeRequestResponse,\n  now: number = Date.now(),\n): RateLimits {\n  const updatedRateLimits: RateLimits = {\n    ...limits,\n  };\n\n  // \"The name is case-insensitive.\"\n  // https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n  const rateLimitHeader = headers && headers['x-sentry-rate-limits'];\n  const retryAfterHeader = headers && headers['retry-after'];\n\n  if (rateLimitHeader) {\n    /**\n     * rate limit headers are of the form\n     *     <header>,<header>,..\n     * where each <header> is of the form\n     *     <retry_after>: <categories>: <scope>: <reason_code>: <namespaces>\n     * where\n     *     <retry_after> is a delay in seconds\n     *     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form\n     *         <category>;<category>;...\n     *     <scope> is what's being limited (org, project, or key) - ignored by SDK\n     *     <reason_code> is an arbitrary string like \"org_quota\" - ignored by SDK\n     *     <namespaces> Semicolon-separated list of metric namespace identifiers. Defines which namespace(s) will be affected.\n     *         Only present if rate limit applies to the metric_bucket data category.\n     */\n    for (const limit of rateLimitHeader.trim().split(',')) {\n      const [retryAfter, categories, , , namespaces] = limit.split(':', 5);\n      const headerDelay = parseInt(retryAfter, 10);\n      const delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default\n      if (!categories) {\n        updatedRateLimits.all = now + delay;\n      } else {\n        for (const category of categories.split(';')) {\n          if (category === 'metric_bucket') {\n            // namespaces will be present when category === 'metric_bucket'\n            if (!namespaces || namespaces.split(';').includes('custom')) {\n              updatedRateLimits[category] = now + delay;\n            }\n          } else {\n            updatedRateLimits[category] = now + delay;\n          }\n        }\n      }\n    }\n  } else if (retryAfterHeader) {\n    updatedRateLimits.all = now + parseRetryAfterHeader(retryAfterHeader, now);\n  } else if (statusCode === 429) {\n    updatedRateLimits.all = now + 60 * 1000;\n  }\n\n  return updatedRateLimits;\n}\n","import { isNativeFetch, logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../debug-build';\nimport { WINDOW } from '../helpers';\n\nlet cachedFetchImpl: FetchImpl | undefined = undefined;\n\nexport type FetchImpl = typeof fetch;\n\n/**\n * A special usecase for incorrectly wrapped Fetch APIs in conjunction with ad-blockers.\n * Whenever someone wraps the Fetch API and returns the wrong promise chain,\n * this chain becomes orphaned and there is no possible way to capture it's rejections\n * other than allowing it bubble up to this very handler. eg.\n *\n * const f = window.fetch;\n * window.fetch = function () {\n *   const p = f.apply(this, arguments);\n *\n *   p.then(function() {\n *     console.log('hi.');\n *   });\n *\n *   return p;\n * }\n *\n * `p.then(function () { ... })` is producing a completely separate promise chain,\n * however, what's returned is `p` - the result of original `fetch` call.\n *\n * This mean, that whenever we use the Fetch API to send our own requests, _and_\n * some ad-blocker blocks it, this orphaned chain will _always_ reject,\n * effectively causing another event to be captured.\n * This makes a whole process become an infinite loop, which we need to somehow\n * deal with, and break it in one way or another.\n *\n * To deal with this issue, we are making sure that we _always_ use the real\n * browser Fetch API, instead of relying on what `window.fetch` exposes.\n * The only downside to this would be missing our own requests as breadcrumbs,\n * but because we are already not doing this, it should be just fine.\n *\n * Possible failed fetch error messages per-browser:\n *\n * Chrome:  Failed to fetch\n * Edge:    Failed to Fetch\n * Firefox: NetworkError when attempting to fetch resource\n * Safari:  resource blocked by content blocker\n */\nexport function getNativeFetchImplementation(): FetchImpl {\n  if (cachedFetchImpl) {\n    return cachedFetchImpl;\n  }\n\n  /* eslint-disable @typescript-eslint/unbound-method */\n\n  // Fast path to avoid DOM I/O\n  if (isNativeFetch(WINDOW.fetch)) {\n    return (cachedFetchImpl = WINDOW.fetch.bind(WINDOW));\n  }\n\n  const document = WINDOW.document;\n  let fetchImpl = WINDOW.fetch;\n  // eslint-disable-next-line deprecation/deprecation\n  if (document && typeof document.createElement === 'function') {\n    try {\n      const sandbox = document.createElement('iframe');\n      sandbox.hidden = true;\n      document.head.appendChild(sandbox);\n      const contentWindow = sandbox.contentWindow;\n      if (contentWindow && contentWindow.fetch) {\n        fetchImpl = contentWindow.fetch;\n      }\n      document.head.removeChild(sandbox);\n    } catch (e) {\n      DEBUG_BUILD && logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', e);\n    }\n  }\n\n  return (cachedFetchImpl = fetchImpl.bind(WINDOW));\n  /* eslint-enable @typescript-eslint/unbound-method */\n}\n\n/** Clears cached fetch impl */\nexport function clearCachedFetchImplementation(): void {\n  cachedFetchImpl = undefined;\n}\n","import { createTransport } from '@sentry/core';\nimport type { Transport, TransportMakeRequestResponse, TransportRequest } from '@sentry/types';\nimport { rejectedSyncPromise } from '@sentry/utils';\n\nimport type { BrowserTransportOptions } from './types';\nimport type { FetchImpl } from './utils';\nimport { clearCachedFetchImplementation, getNativeFetchImplementation } from './utils';\n\n/**\n * Creates a Transport that uses the Fetch API to send events to Sentry.\n */\nexport function makeFetchTransport(\n  options: BrowserTransportOptions,\n  nativeFetch: FetchImpl = getNativeFetchImplementation(),\n): Transport {\n  let pendingBodySize = 0;\n  let pendingCount = 0;\n\n  function makeRequest(request: TransportRequest): PromiseLike<TransportMakeRequestResponse> {\n    const requestSize = request.body.length;\n    pendingBodySize += requestSize;\n    pendingCount++;\n\n    const requestOptions: RequestInit = {\n      body: request.body,\n      method: 'POST',\n      referrerPolicy: 'origin',\n      headers: options.headers,\n      // Outgoing requests are usually cancelled when navigating to a different page, causing a \"TypeError: Failed to\n      // fetch\" error and sending a \"network_error\" client-outcome - in Chrome, the request status shows \"(cancelled)\".\n      // The `keepalive` flag keeps outgoing requests alive, even when switching pages. We want this since we're\n      // frequently sending events right before the user is switching pages (eg. whenfinishing navigation transactions).\n      // Gotchas:\n      // - `keepalive` isn't supported by Firefox\n      // - As per spec (https://fetch.spec.whatwg.org/#http-network-or-cache-fetch):\n      //   If the sum of contentLength and inflightKeepaliveBytes is greater than 64 kibibytes, then return a network error.\n      //   We will therefore only activate the flag when we're below that limit.\n      // There is also a limit of requests that can be open at the same time, so we also limit this to 15\n      // See https://github.com/getsentry/sentry-javascript/pull/7553 for details\n      keepalive: pendingBodySize <= 60_000 && pendingCount < 15,\n      ...options.fetchOptions,\n    };\n\n    try {\n      return nativeFetch(options.url, requestOptions).then(response => {\n        pendingBodySize -= requestSize;\n        pendingCount--;\n        return {\n          statusCode: response.status,\n          headers: {\n            'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n            'retry-after': response.headers.get('Retry-After'),\n          },\n        };\n      });\n    } catch (e) {\n      clearCachedFetchImplementation();\n      pendingBodySize -= requestSize;\n      pendingCount--;\n      return rejectedSyncPromise(e);\n    }\n  }\n\n  return createTransport(options, makeRequest);\n}\n","// This was originally forked from https://github.com/csnover/TraceKit, and was largely\n// re - written as part of raven - js.\n//\n// This code was later copied to the JavaScript mono - repo and further modified and\n// refactored over the years.\n\n// Copyright (c) 2013 Onur Can Cakmak onur.cakmak@gmail.com and all TraceKit contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this\n// software and associated documentation files(the 'Software'), to deal in the Software\n// without restriction, including without limitation the rights to use, copy, modify,\n// merge, publish, distribute, sublicense, and / or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to the following\n// conditions:\n//\n// The above copyright notice and this permission notice shall be included in all copies\n// or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\n// CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\n// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nimport type { StackFrame, StackLineParser, StackLineParserFn } from '@sentry/types';\nimport { createStackParser } from '@sentry/utils';\n\n// global reference to slice\nconst UNKNOWN_FUNCTION = '?';\n\nconst OPERA10_PRIORITY = 10;\nconst OPERA11_PRIORITY = 20;\nconst CHROME_PRIORITY = 30;\nconst WINJS_PRIORITY = 40;\nconst GECKO_PRIORITY = 50;\n\nfunction createFrame(filename: string, func: string, lineno?: number, colno?: number): StackFrame {\n  const frame: StackFrame = {\n    filename,\n    function: func,\n    in_app: true, // All browser frames are considered in_app\n  };\n\n  if (lineno !== undefined) {\n    frame.lineno = lineno;\n  }\n\n  if (colno !== undefined) {\n    frame.colno = colno;\n  }\n\n  return frame;\n}\n\n// Chromium based browsers: Chrome, Brave, new Opera, new Edge\nconst chromeRegex =\n  /^\\s*at (?:(.+?\\)(?: \\[.+\\])?|.*?) ?\\((?:address at )?)?(?:async )?((?:<anonymous>|[-a-z]+:|.*bundle|\\/)?.*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i;\nconst chromeEvalRegex = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\n\n// We cannot call this variable `chrome` because it can conflict with global `chrome` variable in certain environments\n// See: https://github.com/getsentry/sentry-javascript/issues/6880\nconst chromeStackParserFn: StackLineParserFn = line => {\n  const parts = chromeRegex.exec(line);\n\n  if (parts) {\n    const isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n\n    if (isEval) {\n      const subMatch = chromeEvalRegex.exec(parts[2]);\n\n      if (subMatch) {\n        // throw out eval line/column and use top-most line/column number\n        parts[2] = subMatch[1]; // url\n        parts[3] = subMatch[2]; // line\n        parts[4] = subMatch[3]; // column\n      }\n    }\n\n    // Kamil: One more hack won't hurt us right? Understanding and adding more rules on top of these regexps right now\n    // would be way too time consuming. (TODO: Rewrite whole RegExp to be more readable)\n    const [func, filename] = extractSafariExtensionDetails(parts[1] || UNKNOWN_FUNCTION, parts[2]);\n\n    return createFrame(filename, func, parts[3] ? +parts[3] : undefined, parts[4] ? +parts[4] : undefined);\n  }\n\n  return;\n};\n\nexport const chromeStackLineParser: StackLineParser = [CHROME_PRIORITY, chromeStackParserFn];\n\n// gecko regex: `(?:bundle|\\d+\\.js)`: `bundle` is for react native, `\\d+\\.js` also but specifically for ram bundles because it\n// generates filenames without a prefix like `file://` the filenames in the stacktrace are just 42.js\n// We need this specific case for now because we want no other regex to match.\nconst geckoREgex =\n  /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)?((?:[-a-z]+)?:\\/.*?|\\[native code\\]|[^@]*(?:bundle|\\d+\\.js)|\\/[\\w\\-. /=]+)(?::(\\d+))?(?::(\\d+))?\\s*$/i;\nconst geckoEvalRegex = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\n\nconst gecko: StackLineParserFn = line => {\n  const parts = geckoREgex.exec(line);\n\n  if (parts) {\n    const isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n    if (isEval) {\n      const subMatch = geckoEvalRegex.exec(parts[3]);\n\n      if (subMatch) {\n        // throw out eval line/column and use top-most line number\n        parts[1] = parts[1] || 'eval';\n        parts[3] = subMatch[1];\n        parts[4] = subMatch[2];\n        parts[5] = ''; // no column when eval\n      }\n    }\n\n    let filename = parts[3];\n    let func = parts[1] || UNKNOWN_FUNCTION;\n    [func, filename] = extractSafariExtensionDetails(func, filename);\n\n    return createFrame(filename, func, parts[4] ? +parts[4] : undefined, parts[5] ? +parts[5] : undefined);\n  }\n\n  return;\n};\n\nexport const geckoStackLineParser: StackLineParser = [GECKO_PRIORITY, gecko];\n\nconst winjsRegex = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:[-a-z]+):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\n\nconst winjs: StackLineParserFn = line => {\n  const parts = winjsRegex.exec(line);\n\n  return parts\n    ? createFrame(parts[2], parts[1] || UNKNOWN_FUNCTION, +parts[3], parts[4] ? +parts[4] : undefined)\n    : undefined;\n};\n\nexport const winjsStackLineParser: StackLineParser = [WINJS_PRIORITY, winjs];\n\nconst opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i;\n\nconst opera10: StackLineParserFn = line => {\n  const parts = opera10Regex.exec(line);\n  return parts ? createFrame(parts[2], parts[3] || UNKNOWN_FUNCTION, +parts[1]) : undefined;\n};\n\nexport const opera10StackLineParser: StackLineParser = [OPERA10_PRIORITY, opera10];\n\nconst opera11Regex =\n  / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^)]+))\\(.*\\))? in (.*):\\s*$/i;\n\nconst opera11: StackLineParserFn = line => {\n  const parts = opera11Regex.exec(line);\n  return parts ? createFrame(parts[5], parts[3] || parts[4] || UNKNOWN_FUNCTION, +parts[1], +parts[2]) : undefined;\n};\n\nexport const opera11StackLineParser: StackLineParser = [OPERA11_PRIORITY, opera11];\n\nexport const defaultStackLineParsers = [chromeStackLineParser, geckoStackLineParser, winjsStackLineParser];\n\nexport const defaultStackParser = createStackParser(...defaultStackLineParsers);\n\n/**\n * Safari web extensions, starting version unknown, can produce \"frames-only\" stacktraces.\n * What it means, is that instead of format like:\n *\n * Error: wat\n *   at function@url:row:col\n *   at function@url:row:col\n *   at function@url:row:col\n *\n * it produces something like:\n *\n *   function@url:row:col\n *   function@url:row:col\n *   function@url:row:col\n *\n * Because of that, it won't be captured by `chrome` RegExp and will fall into `Gecko` branch.\n * This function is extracted so that we can use it in both places without duplicating the logic.\n * Unfortunately \"just\" changing RegExp is too complicated now and making it pass all tests\n * and fix this case seems like an impossible, or at least way too time-consuming task.\n */\nconst extractSafariExtensionDetails = (func: string, filename: string): [string, string] => {\n  const isSafariExtension = func.indexOf('safari-extension') !== -1;\n  const isSafariWebExtension = func.indexOf('safari-web-extension') !== -1;\n\n  return isSafariExtension || isSafariWebExtension\n    ? [\n        func.indexOf('@') !== -1 ? func.split('@')[0] : UNKNOWN_FUNCTION,\n        isSafariExtension ? `safari-extension:${filename}` : `safari-web-extension:${filename}`,\n      ]\n    : [func, filename];\n};\n","import { convertIntegrationFnToClass, defineIntegration } from '@sentry/core';\nimport type { Event, Exception, Integration, IntegrationClass, IntegrationFn, StackFrame } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { DEBUG_BUILD } from '../debug-build';\n\nconst INTEGRATION_NAME = 'Dedupe';\n\nconst _dedupeIntegration = (() => {\n  let previousEvent: Event | undefined;\n\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    processEvent(currentEvent) {\n      // We want to ignore any non-error type events, e.g. transactions or replays\n      // These should never be deduped, and also not be compared against as _previousEvent.\n      if (currentEvent.type) {\n        return currentEvent;\n      }\n\n      // Juuust in case something goes wrong\n      try {\n        if (_shouldDropEvent(currentEvent, previousEvent)) {\n          DEBUG_BUILD && logger.warn('Event dropped due to being a duplicate of previously captured event.');\n          return null;\n        }\n      } catch (_oO) {} // eslint-disable-line no-empty\n\n      return (previousEvent = currentEvent);\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const dedupeIntegration = defineIntegration(_dedupeIntegration);\n\n/**\n * Deduplication filter.\n * @deprecated Use `dedupeIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport const Dedupe = convertIntegrationFnToClass(INTEGRATION_NAME, dedupeIntegration) as IntegrationClass<\n  Integration & { processEvent: (event: Event) => Event }\n>;\n\nfunction _shouldDropEvent(currentEvent: Event, previousEvent?: Event): boolean {\n  if (!previousEvent) {\n    return false;\n  }\n\n  if (_isSameMessageEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  if (_isSameExceptionEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction _isSameMessageEvent(currentEvent: Event, previousEvent: Event): boolean {\n  const currentMessage = currentEvent.message;\n  const previousMessage = previousEvent.message;\n\n  // If neither event has a message property, they were both exceptions, so bail out\n  if (!currentMessage && !previousMessage) {\n    return false;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentMessage && !previousMessage) || (!currentMessage && previousMessage)) {\n    return false;\n  }\n\n  if (currentMessage !== previousMessage) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction _isSameExceptionEvent(currentEvent: Event, previousEvent: Event): boolean {\n  const previousException = _getExceptionFromEvent(previousEvent);\n  const currentException = _getExceptionFromEvent(currentEvent);\n\n  if (!previousException || !currentException) {\n    return false;\n  }\n\n  if (previousException.type !== currentException.type || previousException.value !== currentException.value) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction _isSameStacktrace(currentEvent: Event, previousEvent: Event): boolean {\n  let currentFrames = _getFramesFromEvent(currentEvent);\n  let previousFrames = _getFramesFromEvent(previousEvent);\n\n  // If neither event has a stacktrace, they are assumed to be the same\n  if (!currentFrames && !previousFrames) {\n    return true;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentFrames && !previousFrames) || (!currentFrames && previousFrames)) {\n    return false;\n  }\n\n  currentFrames = currentFrames as StackFrame[];\n  previousFrames = previousFrames as StackFrame[];\n\n  // If number of frames differ, they are not the same\n  if (previousFrames.length !== currentFrames.length) {\n    return false;\n  }\n\n  // Otherwise, compare the two\n  for (let i = 0; i < previousFrames.length; i++) {\n    const frameA = previousFrames[i];\n    const frameB = currentFrames[i];\n\n    if (\n      frameA.filename !== frameB.filename ||\n      frameA.lineno !== frameB.lineno ||\n      frameA.colno !== frameB.colno ||\n      frameA.function !== frameB.function\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction _isSameFingerprint(currentEvent: Event, previousEvent: Event): boolean {\n  let currentFingerprint = currentEvent.fingerprint;\n  let previousFingerprint = previousEvent.fingerprint;\n\n  // If neither event has a fingerprint, they are assumed to be the same\n  if (!currentFingerprint && !previousFingerprint) {\n    return true;\n  }\n\n  // If only one event has a fingerprint, but not the other one, they are not the same\n  if ((currentFingerprint && !previousFingerprint) || (!currentFingerprint && previousFingerprint)) {\n    return false;\n  }\n\n  currentFingerprint = currentFingerprint as string[];\n  previousFingerprint = previousFingerprint as string[];\n\n  // Otherwise, compare the two\n  try {\n    return !!(currentFingerprint.join('') === previousFingerprint.join(''));\n  } catch (_oO) {\n    return false;\n  }\n}\n\nfunction _getExceptionFromEvent(event: Event): Exception | undefined {\n  return event.exception && event.exception.values && event.exception.values[0];\n}\n\nfunction _getFramesFromEvent(event: Event): StackFrame[] | undefined {\n  const exception = event.exception;\n\n  if (exception) {\n    try {\n      // @ts-expect-error Object could be undefined\n      return exception.values[0].stacktrace.frames;\n    } catch (_oO) {\n      return undefined;\n    }\n  }\n  return undefined;\n}\n","import type { Hub } from '@sentry/core';\nimport { functionToStringIntegration, inboundFiltersIntegration } from '@sentry/core';\nimport {\n  captureSession,\n  getClient,\n  getCurrentHub,\n  getIntegrationsToSetup,\n  getReportDialogEndpoint,\n  initAndBind,\n  startSession,\n} from '@sentry/core';\nimport type { Integration, Options, UserFeedback } from '@sentry/types';\nimport {\n  addHistoryInstrumentationHandler,\n  logger,\n  stackParserFromStackParserOptions,\n  supportsFetch,\n} from '@sentry/utils';\n\nimport type { BrowserClientOptions, BrowserOptions } from './client';\nimport { BrowserClient } from './client';\nimport { DEBUG_BUILD } from './debug-build';\nimport type { ReportDialogOptions } from './helpers';\nimport { WINDOW, wrap as internalWrap } from './helpers';\nimport { breadcrumbsIntegration } from './integrations/breadcrumbs';\nimport { dedupeIntegration } from './integrations/dedupe';\nimport { globalHandlersIntegration } from './integrations/globalhandlers';\nimport { httpContextIntegration } from './integrations/httpcontext';\nimport { linkedErrorsIntegration } from './integrations/linkederrors';\nimport { browserApiErrorsIntegration } from './integrations/trycatch';\nimport { defaultStackParser } from './stack-parsers';\nimport { makeFetchTransport, makeXHRTransport } from './transports';\n\n/** @deprecated Use `getDefaultIntegrations(options)` instead. */\nexport const defaultIntegrations = [\n  inboundFiltersIntegration(),\n  functionToStringIntegration(),\n  browserApiErrorsIntegration(),\n  breadcrumbsIntegration(),\n  globalHandlersIntegration(),\n  linkedErrorsIntegration(),\n  dedupeIntegration(),\n  httpContextIntegration(),\n];\n\n/** Get the default integrations for the browser SDK. */\nexport function getDefaultIntegrations(_options: Options): Integration[] {\n  // We return a copy of the defaultIntegrations here to avoid mutating this\n  return [\n    // eslint-disable-next-line deprecation/deprecation\n    ...defaultIntegrations,\n  ];\n}\n\n/**\n * A magic string that build tooling can leverage in order to inject a release value into the SDK.\n */\ndeclare const __SENTRY_RELEASE__: string | undefined;\n\n/**\n * The Sentry Browser SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible when\n * loading the web page. To set context information or send manual events, use\n * the provided methods.\n *\n * @example\n *\n * ```\n *\n * import { init } from '@sentry/browser';\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { configureScope } from '@sentry/browser';\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { addBreadcrumb } from '@sentry/browser';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n *\n * ```\n *\n * import * as Sentry from '@sentry/browser';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link BrowserOptions} for documentation on configuration options.\n */\nexport function init(options: BrowserOptions = {}): void {\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = getDefaultIntegrations(options);\n  }\n  if (options.release === undefined) {\n    // This allows build tooling to find-and-replace __SENTRY_RELEASE__ to inject a release value\n    if (typeof __SENTRY_RELEASE__ === 'string') {\n      options.release = __SENTRY_RELEASE__;\n    }\n\n    // This supports the variable that sentry-webpack-plugin injects\n    if (WINDOW.SENTRY_RELEASE && WINDOW.SENTRY_RELEASE.id) {\n      options.release = WINDOW.SENTRY_RELEASE.id;\n    }\n  }\n  if (options.autoSessionTracking === undefined) {\n    options.autoSessionTracking = true;\n  }\n  if (options.sendClientReports === undefined) {\n    options.sendClientReports = true;\n  }\n\n  const clientOptions: BrowserClientOptions = {\n    ...options,\n    stackParser: stackParserFromStackParserOptions(options.stackParser || defaultStackParser),\n    integrations: getIntegrationsToSetup(options),\n    transport: options.transport || (supportsFetch() ? makeFetchTransport : makeXHRTransport),\n  };\n\n  initAndBind(BrowserClient, clientOptions);\n\n  if (options.autoSessionTracking) {\n    startSessionTracking();\n  }\n}\n\ntype NewReportDialogOptions = ReportDialogOptions & { eventId: string }; // eslint-disable-line\n\ninterface ShowReportDialogFunction {\n  /**\n   * Present the user with a report dialog.\n   *\n   * @param options Everything is optional, we try to fetch all info need from the global scope.\n   */\n  (options: NewReportDialogOptions): void;\n\n  /**\n   * Present the user with a report dialog.\n   *\n   * @param options Everything is optional, we try to fetch all info need from the global scope.\n   *\n   * @deprecated Please always pass an `options` argument with `eventId`. The `hub` argument will not be used in the next version of the SDK.\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  (options?: ReportDialogOptions, hub?: Hub): void;\n}\n\nexport const showReportDialog: ShowReportDialogFunction = (\n  // eslint-disable-next-line deprecation/deprecation\n  options: ReportDialogOptions = {},\n  // eslint-disable-next-line deprecation/deprecation\n  hub: Hub = getCurrentHub(),\n) => {\n  // doesn't work without a document (React Native)\n  if (!WINDOW.document) {\n    DEBUG_BUILD && logger.error('Global document not defined in showReportDialog call');\n    return;\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  const { client, scope } = hub.getStackTop();\n  const dsn = options.dsn || (client && client.getDsn());\n  if (!dsn) {\n    DEBUG_BUILD && logger.error('DSN not configured for showReportDialog call');\n    return;\n  }\n\n  if (scope) {\n    options.user = {\n      ...scope.getUser(),\n      ...options.user,\n    };\n  }\n\n  if (!options.eventId) {\n    // eslint-disable-next-line deprecation/deprecation\n    options.eventId = hub.lastEventId();\n  }\n\n  const script = WINDOW.document.createElement('script');\n  script.async = true;\n  script.crossOrigin = 'anonymous';\n  script.src = getReportDialogEndpoint(dsn, options);\n\n  if (options.onLoad) {\n    script.onload = options.onLoad;\n  }\n\n  const { onClose } = options;\n  if (onClose) {\n    const reportDialogClosedMessageHandler = (event: MessageEvent): void => {\n      if (event.data === '__sentry_reportdialog_closed__') {\n        try {\n          onClose();\n        } finally {\n          WINDOW.removeEventListener('message', reportDialogClosedMessageHandler);\n        }\n      }\n    };\n    WINDOW.addEventListener('message', reportDialogClosedMessageHandler);\n  }\n\n  const injectionPoint = WINDOW.document.head || WINDOW.document.body;\n  if (injectionPoint) {\n    injectionPoint.appendChild(script);\n  } else {\n    DEBUG_BUILD && logger.error('Not injecting report dialog. No injection point found in HTML');\n  }\n};\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function forceLoad(): void {\n  // Noop\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function onLoad(callback: () => void): void {\n  callback();\n}\n\n/**\n * Wrap code within a try/catch block so the SDK is able to capture errors.\n *\n * @deprecated This function will be removed in v8.\n * It is not part of Sentry's official API and it's easily replaceable by using a try/catch block\n * and calling Sentry.captureException.\n *\n * @param fn A function to wrap.\n *\n * @returns The result of wrapped function call.\n */\n// TODO(v8): Remove this function\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function wrap(fn: (...args: any) => any): any {\n  return internalWrap(fn)();\n}\n\n/**\n * Enable automatic Session Tracking for the initial page load.\n */\nfunction startSessionTracking(): void {\n  if (typeof WINDOW.document === 'undefined') {\n    DEBUG_BUILD && logger.warn('Session tracking in non-browser environment with @sentry/browser is not supported.');\n    return;\n  }\n\n  // The session duration for browser sessions does not track a meaningful\n  // concept that can be used as a metric.\n  // Automatically captured sessions are akin to page views, and thus we\n  // discard their duration.\n  startSession({ ignoreDuration: true });\n  captureSession();\n\n  // We want to create a session for every navigation as well\n  addHistoryInstrumentationHandler(({ from, to }) => {\n    // Don't create an additional session for the initial route or if the location did not change\n    if (from !== undefined && from !== to) {\n      startSession({ ignoreDuration: true });\n      captureSession();\n    }\n  });\n}\n\n/**\n * Captures user feedback and sends it to Sentry.\n */\nexport function captureUserFeedback(feedback: UserFeedback): void {\n  const client = getClient<BrowserClient>();\n  if (client) {\n    client.captureUserFeedback(feedback);\n  }\n}\n","import {\n  captureException,\n  captureMessage,\n  convertIntegrationFnToClass,\n  defineIntegration,\n  getClient,\n  withScope,\n} from '@sentry/core';\nimport type { CaptureContext, Client, Integration, IntegrationClass, IntegrationFn } from '@sentry/types';\nimport {\n  CONSOLE_LEVELS,\n  GLOBAL_OBJ,\n  addConsoleInstrumentationHandler,\n  addExceptionMechanism,\n  safeJoin,\n  severityLevelFromString,\n} from '@sentry/utils';\n\ninterface CaptureConsoleOptions {\n  levels?: string[];\n}\n\nconst INTEGRATION_NAME = 'CaptureConsole';\n\nconst _captureConsoleIntegration = ((options: CaptureConsoleOptions = {}) => {\n  const levels = options.levels || CONSOLE_LEVELS;\n\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    setup(client) {\n      if (!('console' in GLOBAL_OBJ)) {\n        return;\n      }\n\n      addConsoleInstrumentationHandler(({ args, level }) => {\n        if (getClient() !== client || !levels.includes(level)) {\n          return;\n        }\n\n        consoleHandler(args, level);\n      });\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const captureConsoleIntegration = defineIntegration(_captureConsoleIntegration);\n\n/**\n * Send Console API calls as Sentry Events.\n * @deprecated Use `captureConsoleIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport const CaptureConsole = convertIntegrationFnToClass(\n  INTEGRATION_NAME,\n  captureConsoleIntegration,\n) as IntegrationClass<Integration & { setup: (client: Client) => void }> & {\n  new (options?: { levels?: string[] }): Integration;\n};\n\nfunction consoleHandler(args: unknown[], level: string): void {\n  const captureContext: CaptureContext = {\n    level: severityLevelFromString(level),\n    extra: {\n      arguments: args,\n    },\n  };\n\n  withScope(scope => {\n    scope.addEventProcessor(event => {\n      event.logger = 'console';\n\n      addExceptionMechanism(event, {\n        handled: false,\n        type: 'console',\n      });\n\n      return event;\n    });\n\n    if (level === 'assert' && args[0] === false) {\n      const message = `Assertion failed: ${safeJoin(args.slice(1), ' ') || 'console.assert'}`;\n      scope.setExtra('arguments', args.slice(1));\n      captureMessage(message, captureContext);\n      return;\n    }\n\n    const error = args.find(arg => arg instanceof Error);\n    if (level === 'error' && error) {\n      captureException(error, captureContext);\n      return;\n    }\n\n    const message = safeJoin(args, ' ');\n    captureMessage(message, captureContext);\n  });\n}\n","import app from 'flarum/forum/app';\n\nimport {\n  BrowserClient,\n  defaultStackParser,\n  getCurrentHub,\n  makeFetchTransport,\n  showReportDialog,\n  Breadcrumbs,\n  GlobalHandlers,\n  InboundFilters,\n  FunctionToString,\n  LinkedErrors,\n  HttpContext,\n  TryCatch,\n  BrowserTracing,\n  Replay,\n} from '@sentry/browser';\n\nimport { CaptureConsole } from '@sentry/integrations';\n\nconst integrations = [\n  new InboundFilters(),\n  new FunctionToString(),\n  new TryCatch(),\n  new GlobalHandlers({\n    onerror: true,\n    onunhandledrejection: true,\n  }),\n  new Breadcrumbs({\n    console: true,\n    dom: true,\n    fetch: true,\n    history: true,\n    sentry: true,\n    xhr: true,\n  }),\n  new LinkedErrors({\n    key: 'cause',\n    limit: 5,\n  }),\n  new HttpContext(),\n];\n\nif (__SENTRY_TRACING__) {\n  integrations.push(new BrowserTracing());\n}\n\nif (__SENTRY_SESSION_REPLAY__) {\n  integrations.push(new Replay());\n}\n\nconst createClient = (config) =>\n  new BrowserClient({\n    dsn: config.dsn,\n\n    transport: makeFetchTransport,\n    stackParser: defaultStackParser,\n\n    // Add environment and release from config\n    environment: config.environment,\n    release: config.release,\n\n    beforeSend: (event) => {\n      event.logger = 'javascript';\n\n      if (config.scrubEmails && event.user?.email) {\n        delete event.user.email;\n      }\n\n      if (config.showFeedback && event.exception) {\n        showReportDialog({ eventId: event.event_id, user: Sentry.getUserData('name') });\n      }\n\n      // Apply tags if provided\n      if (config.tags) {\n        if (!event.tags) event.tags = {};\n        Object.assign(event.tags, config.tags);\n      }\n\n      return event;\n    },\n\n    tracesSampleRate: config.tracesSampleRate,\n    replaysSessionSampleRate: config.replaysSessionSampleRate,\n    replaysOnErrorSampleRate: config.replaysOnErrorSampleRate,\n\n    integrations: [...integrations, config.captureConsole && new CaptureConsole()].filter(Boolean),\n  });\n\nwindow.Sentry = { createClient, getCurrentHub, showReportDialog };\n\nwindow.Sentry.getUserData = (nameAttr = 'username') => {\n  /** @type {Sentry.User} */\n  let userData = {};\n\n  // Depending on when the error occurs, `app` might not be defined\n  if (app) {\n    const user = app.session?.user;\n\n    if (app.session && user && user.id() != 0) {\n      userData = {\n        ip_address: '{{auto}}',\n        id: user.id(),\n        [nameAttr]: user.username(),\n      };\n\n      if (!app.data['fof-sentry.scrub-emails']) {\n        userData.email = user.email();\n      }\n    } else if (app.data.session && app.data.session.userId != 0) {\n      userData = {\n        id: app.data.session.userId,\n      };\n    }\n  }\n\n  return userData;\n};\n\napp.initializers.add('fof/sentry', () => {\n  getCurrentHub().setUser(Sentry.getUserData());\n});\n"],"names":["_typeof","require","_regeneratorRuntime","module","exports","r","__esModule","t","e","Object","prototype","n","hasOwnProperty","o","Symbol","i","iterator","a","asyncIterator","u","toStringTag","c","defineProperty","value","enumerable","configurable","writable","h","Generator","create","Error","done","method","arg","delegate","d","f","sent","_sent","dispatchException","abrupt","s","type","Context","call","wrap","GeneratorFunction","GeneratorFunctionPrototype","l","this","p","getPrototypeOf","y","x","v","g","forEach","_invoke","AsyncIterator","resolve","__await","then","TypeError","next","w","tryEntries","push","m","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","unshift","pop","values","prev","charAt","slice","stop","rval","complete","finish","delegateYield","runtime","regeneratorRuntime","accidentalStrictMode","globalThis","Function","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","getter","definition","key","get","window","obj","prop","flarum","core","compat","isGlobalObj","Math","GLOBAL_OBJ","self","global","getGlobalObject","getGlobalSingleton","creator","gbl","__SENTRY__","CONSOLE_LEVELS","originalConsoleMethods","consoleSandbox","callback","console","wrappedFuncs","wrappedLevels","level","originalConsoleMethod","enabled","logger","enable","disable","isEnabled","_extends","assign","bind","arguments","apply","objectToString","toString","isError","wat","isInstanceOf","isBuiltin","className","isErrorEvent","isDOMError","isString","isParameterizedString","isPrimitive","isPlainObject","isEvent","Event","isThenable","Boolean","base","_e","isVueViewModel","__isVue","_isVue","WINDOW","htmlTreeAsString","elem","options","nextStr","currentElem","out","height","len","keyAttrs","Array","isArray","maxStringLength","_htmlElementAsString","separator","parentNode","reverse","join","_oO","el","classes","attr","tagName","HTMLElement","dataset","toLowerCase","keyAttrPairs","filter","keyAttr","getAttribute","map","keyAttrPair","id","split","allowedAttrs","getComponentName","truncate","str","max","safeJoin","input","delimiter","output","String","stringMatchesSomePattern","testString","patterns","requireExactStringMatch","some","pattern","test","includes","isMatchingPattern","fill","source","replacementFactory","original","wrapped","markFunctionWrapped","addNonEnumerableProperty","o_O","proto","getOriginalFunction","func","__sentry_original__","convertToPlainObject","message","stack","getOwnProperties","newObj","target","serializeEventTarget","currentTarget","CustomEvent","detail","Element","extractedProps","property","dropUndefinedKeys","inputValue","_dropUndefinedKeys","Map","memoizationMap","isPojo","memoVal","returnValue","set","_i","_Object$keys","item","uuid4","crypto","msCrypto","getRandomByte","random","randomUUID","replace","getRandomValues","typedArray","Uint8Array","_","getFirstException","event","exception","getEventDescription","eventId","event_id","firstException","addExceptionTypeValue","addExceptionMechanism","newMechanism","currentMechanism","mechanism","handled","mergedData","data","checkOrSetAlreadyCaught","__sentry_captured__","err","States","resolvedSyncPromise","SyncPromise","rejectedSyncPromise","reason","reject","executor","__init","__init2","__init3","__init4","_state","PENDING","_handlers","_resolve","_reject","_proto","onfulfilled","onrejected","_this","result","_executeHandlers","val","onfinally","_this2","isRejected","_this3","_setResult","RESOLVED","_this4","REJECTED","_this5","state","_value","_this6","cachedHandlers","handler","getGlobalEventProcessors","addGlobalEventProcessor","notifyEventProcessors","processors","hint","index","processor","final","dateTimestampInSeconds","Date","now","timestampInSeconds","performance","approxStartingTimeOrigin","timeOrigin","createUnixTimestampInSecondsFunc","browserPerformanceTimeOrigin","threshold","performanceNow","dateNow","timeOriginDelta","abs","timeOriginIsReliable","navigationStart","timing","navigationStartDelta","DEFAULT_ENVIRONMENT","updateSession","session","context","user","ipAddress","ip_address","did","email","username","timestamp","abnormal_mechanism","ignoreDuration","sid","init","started","duration","release","environment","userAgent","errors","status","WEBPACK_ERROR_REGEXP","STRIP_FRAME_REGEXP","defaultFunctionName","getFunctionName","fn","normalize","depth","maxProperties","visit","ERROR","normalizeToSize","object","maxSize","normalized","encodeURI","utf8Length","JSON","stringify","memo","hasWeakSet","inner","WeakSet","has","add","splice","_memo","memoize","unmemoize","stringified","_events","document","objName","getConstructorName","stringifyValue","startsWith","remainingDepth","valueWithToJSON","toJSON","numAdded","visitable","visitKey","visitValue","BAGGAGE_HEADER_NAME","SENTRY_BAGGAGE_KEY_PREFIX_REGEX","dynamicSamplingContextToSentryBaggageHeader","dynamicSamplingContext","entries","reduce","baggageHeader","_ref4","currentIndex","objectKey","objectValue","baggageEntry","encodeURIComponent","newBaggageHeader","objectToBaggageHeader","acc","_ref2","dscKey","dscValue","baggageHeaderToObject","keyOrValue","decodeURIComponent","trim","_ref3","TRACEPARENT_REGEXP","RegExp","propagationContextFromHeaders","sentryTrace","baggage","traceparentData","traceparent","parentSampled","matches","match","traceId","parentSpanId","extractTraceparentData","baggageObject","curr","currBaggageObject","_ref","SENTRY_BAGGAGE_KEY_PREFIX","baggageHeaderToDynamicSamplingContext","substring","spanId","sampled","dsc","generateSentryTraceHeader","sampledString","spanToTraceContext","span","_span$spanContext","spanContext","span_id","trace_id","_spanToJSON","spanToJSON","op","parent_span_id","tags","origin","spanToTraceHeader","_span$spanContext2","spanIsSampled","spanTimeInputToSeconds","ensureTimestampInSeconds","getTime","getSpanJSON","spanIsSpanClass","traceFlags","debugIdStackParserCache","WeakMap","captureContextKeys","captureEvent","getCurrentHub","addBreadcrumb","breadcrumb","getClient","getCurrentScope","getScope","getRootSpan","transaction","getDynamicSamplingContextFromClient","client","scope","getOptions","public_key","getDsn","publicKey","user_segment","getUser","segment","emit","getDynamicSamplingContextFromSpan","txn","v7FrozenDsc","_frozenDynamicSamplingContext","_txn$metadata","metadata","maybeSampleRate","sampleRate","sample_rate","jsonSpan","description","applyScopeDataToEvent","fingerprint","breadcrumbs","sdkProcessingMetadata","extra","contexts","transactionName","cleanedExtra","cleanedTags","cleanedUser","cleanedContexts","applyDataToEvent","trace","rootSpan","applySpanToEvent","maybeArray","concat","applyFingerprintToEvent","mergedBreadcrumbs","applyBreadcrumbsToEvent","applySdkMetadataToEvent","mergeScopeData","mergeData","eventProcessors","attachments","propagationContext","mergeAndOverwriteScopeData","mergeVal","globalScope","Scope","_notifyingListeners","_scopeListeners","_eventProcessors","_breadcrumbs","_attachments","_user","_tags","_extra","_contexts","_sdkProcessingMetadata","_propagationContext","generatePropagationContext","clone","newScope","_level","_span","_session","_transactionName","_fingerprint","_requestSession","_client","setClient","addScopeListener","addEventProcessor","setUser","_notifyScopeListeners","getRequestSession","setRequestSession","requestSession","setTags","setTag","_extends2","setExtras","extras","setExtra","_extends3","setFingerprint","setLevel","setTransactionName","setContext","setSpan","getSpan","getTransaction","setSession","getSession","update","captureContext","scopeToMerge","scopeData","getScopeData","scopeContext","clear","maxBreadcrumbs","maxCrumbs","mergedBreadcrumb","getLastBreadcrumb","clearBreadcrumbs","addAttachment","attachment","getAttachments","clearAttachments","applyToEvent","additionalEventProcessors","setSDKProcessingMetadata","newData","setPropagationContext","getPropagationContext","captureException","warn","syntheticException","originalException","captureMessage","SDK_VERSION","API_VERSION","parseFloat","Hub","isolationScope","_version","assignedScope","assignedIsolationScope","_stack","bindClient","_isolationScope","isOlderThan","version","top","getStackTop","setupIntegrations","pushScope","getStack","popScope","withScope","maybePromiseResult","res","getIsolationScope","_lastEventId","lastEventId","_this$getStackTop","_ref$beforeBreadcrumb","beforeBreadcrumb","_ref$maxBreadcrumbs","finalBreadcrumb","configureScope","_this$getStackTop2","run","oldHub","makeMain","getIntegration","integration","startTransaction","customSamplingContext","_callExtensionMethod","traceHeaders","captureSession","endSession","_sendSessionUpdate","closeSession","startSession","_this$getStackTop3","_ref2$environment","navigator","startingTime","toISOString","attrs","user_agent","sessionToJSON","makeSession","currentSession","shouldSendDefaultPii","sendDefaultPii","_this$getStackTop4","sentry","getMainCarrier","extensions","_len","args","_key","hub","registry","getHubFromCarrier","setHubOnCarrier","acs","carrier","getGlobalHub","installedIntegrations","afterSetupIntegrations","integrations","_step","_iterator","_createForOfIteratorHelperLoose","afterAllSetup","setupIntegration","integrationIndex","indexOf","setupOnce","setup","on","preprocessEvent","processEvent","convertIntegrationFnToClass","originalFunctionToString","DEFAULT_IGNORE_ERRORS","DEFAULT_IGNORE_TRANSACTIONS","INTEGRATION_NAME","inboundFiltersIntegration","_hint","clientOptions","mergedOptions","internalOptions","allowUrls","denyUrls","ignoreErrors","disableErrorDefaults","ignoreTransactions","disableTransactionDefaults","ignoreInternal","_mergeOptions","_isSentryError","lastException","possibleMessages","_getPossibleEventMessages","_isIgnoredError","_isIgnoredTransaction","url","_getEventFilterUrl","_isDeniedUrl","_isAllowedUrl","_shouldDropEvent","InboundFilters","frames","stacktrace","frame","filename","_getLastValidUrl","oO","SETUP_CLIENTS","functionToStringIntegration","originalFunction","FunctionToString","ignoreOnError","shouldIgnoreOnError","before","wrapper","__sentry_wrapped__","sentryWrapped","wrappedArguments","ex","setTimeout","rest","hintIsScopeOrFunction","hintIsScopeContext","parseEventHintOrCaptureContext","getOwnPropertyDescriptor","DEFAULT_EVENT_TARGET","browserApiErrorsIntegration","_options","XMLHttpRequest","eventTarget","requestAnimationFrame","setInterval","_wrapTimeFunction","_wrapRAF","_wrapXHR","eventTargetOption","_wrapEventTarget","TryCatch","originalCallback","function","originalSend","xhr","wrapOptions","_len2","_key2","globalObject","eventName","handleEvent","originalRemoveEventListener","wrappedEventHandler","originalEventHandler","handlers","instrumented","addHandler","maybeInstrument","instrumentFn","triggerHandlers","typeHandlers","_oldOnErrorHandler","addGlobalErrorInstrumentationHandler","instrumentError","onerror","msg","line","column","error","__SENTRY_LOADER__","__SENTRY_INSTRUMENTED__","_oldOnUnhandledRejectionHandler","addGlobalUnhandledRejectionInstrumentationHandler","instrumentUnhandledRejection","onunhandledrejection","exceptionFromError","stackParser","parseStackFrames","extractMessage","eventFromError","popSize","framesToPop","reactMinifiedRegexp","getPopSize","eventFromUnknownInput","attachStacktrace","isUnhandledRejection","domException","eventFromString","code","normalizeDepth","getNonErrorObjectExceptionValue","__serialized__","eventFromPlainObject","synthetic","__sentry_template_string__","__sentry_template_values__","logentry","params","maxLength","sort","includedKeys","serialized","extractExceptionKeysForMessage","captureType","getObjectClassName","globalHandlersIntegration","stackTraceLimit","_getOptions","groups","_enhanceEventWithInitialFrame","_eventFromIncompleteOnError","_installGlobalOnErrorHandler","_getOptions2","e2","_getUnhandledRejectionError","_installGlobalOnUnhandledRejectionHandler","GlobalHandlers","ev","ev0","ev0s","ev0sf","colno","parseInt","lineno","location","href","getLocationHref","in_app","instrumentConsole","log","debounceTimerID","lastCapturedEventType","lastCapturedEventTargetId","instrumentDOM","triggerDOMHandler","globalDOMEventHandler","makeDOMEventHandler","addEventListener","originalAddEventListener","listener","__sentry_instrumentation_handlers__","handlerForType","refCount","globalListener","getEventTarget","eventType","isContentEditable","shouldSkipDOMEvent","_sentryId","isSimilarToLastCapturedEvent","clearTimeout","SENTRY_XHR_DATA_KEY","addXhrInstrumentationHandler","instrumentXHR","xhrproto","originalOpen","startTimestamp","toUpperCase","parseUrl","request_headers","__sentry_own_request__","onreadystatechangeHandler","xhrInfo","readyState","status_code","endTimestamp","onreadystatechange","readyStateArgs","_len3","setRequestHeaderArgs","_key3","header","sentryXhrData","_len4","_key4","body","isNativeFetch","addFetchInstrumentationHandler","instrumentFetch","EdgeRuntime","Headers","Request","Response","supportsFetch","fetch","doc","createElement","sandbox","hidden","head","appendChild","contentWindow","removeChild","supportsNativeFetch","originalFetch","_parseFetchArgs","fetchArgs","getUrlFromResource","hasProp","parseFetchArgs","handlerData","fetchData","response","resource","lastHref","addHistoryInstrumentationHandler","instrumentHistory","isChromePackagedApp","chromeVar","chrome","app","hasHistoryApi","history","pushState","replaceState","oldOnPopState","onpopstate","to","from","historyReplacementFunction","originalHistoryFunction","validSeverityLevels","query","fragment","host","path","protocol","search","hash","relative","breadcrumbsIntegration","dom","category","_getConsoleBreadcrumbHandler","addClickKeypressInstrumentationHandler","componentName","serializeAttribute","element","_isEvent","_getDomBreadcrumbHandler","_getXhrBreadcrumbHandler","_getFetchBreadcrumbHandler","parsedLoc","parsedFrom","parsedTo","_getHistoryBreadcrumbHandler","_getSentryBreadcrumbHandler","Breadcrumbs","applyAggregateErrorsToEvent","exceptionFromErrorImplementation","parser","maxValueLimit","limit","exceptions","maxValueLength","aggregateExceptionsFromError","prevExceptions","exceptionId","newExceptions","applyExceptionGroupFieldsForParentException","newException","newExceptionId","applyExceptionGroupFieldsForChildException","childError","is_exception_group","exception_id","parentId","parent_id","linkedErrorsIntegration","LinkedErrors","httpContextIntegration","request","referrer","headers","Referer","HttpContext","_setPrototypeOf","_inheritsLoose","toPropertyKey","toPrimitive","_defineProperties","_createClass","SpanStatus","SEMANTIC_ATTRIBUTE_SENTRY_SOURCE","SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE","SEMANTIC_ATTRIBUTE_SENTRY_OP","SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN","setHttpStatus","httpStatus","setData","spanStatus","getSpanStatusFromHttpCode","setStatus","SpanRecorder","maxlen","_maxlen","spans","spanRecorder","Span","_traceId","_spanId","_startTime","instrumenter","_attributes","setAttributes","attributes","_name","_parentSpanId","_sampled","_status","_endTime","exclusiveTime","_exclusiveTime","_measurements","measurements","_proto2","startChild","childSpan","_extends4","setAttribute","setName","updateName","isSuccess","end","toTraceparent","toContext","_getData","updateWithContext","getTraceContext","start_timestamp","_metrics_summary","getMetricSummaryJsonForSpan","profile_id","exclusive_time","isRecording","hasData","hasAttributes","string","startTime","endTime","hasTracingEnabled","maybeOptions","enableTracing","startInactiveSpan","ctx","normalizeContext","parentSpan","onlyIfParent","temporaryScope","forceTransaction","_parentSpan$spanConte","_isolationScope$getPr","ISOLATION_SCOPE_ON_START_SPAN_FIELD","SCOPE_ON_START_SPAN_FIELD","setCapturedScopesOnSpan","createChildSpanOrTransaction","Transaction","_Span","transactionContext","_hub","_metadata","_trimEnd","trimEnd","incomingDynamicSamplingContext","initSpanRecorder","setMeasurement","unit","setMetadata","newMetadata","timestampInS","_finishTransaction","getDynamicSamplingContext","setHub","getProfileId","finishedSpans","endTimes","current","_getCapturedScopesOnS","capturedSpanScope","capturedSpanIsolationScope","transaction_info","recordDroppedEvent","newName","spanMetadata","TRACING_DEFAULTS","idleTimeout","finalTimeout","heartbeatInterval","IDLE_TRANSACTION_FINISH_REASONS","IdleTransactionSpanRecorder","_SpanRecorder","_pushActivity","_popActivity","transactionSpanId","originalEnd","IdleTransaction","_Transaction","_idleHub","_idleTimeout","_finalTimeout","_heartbeatInterval","_onScope","delayAutoFinishUntilSignal","activities","_heartbeatCounter","_finished","_idleTimeoutCanceledPermanently","_beforeFinishCallbacks","_finishReason","_autoFinishAllowed","_restartIdleTimeout","endTimestampInS","spanStartedBeforeTransactionFinish","timeoutWithMarginOfError","registerBeforeFinishCallback","_pingHeartbeat","cancelIdleTimeout","_temp","restartOnChildSpanChange","_idleTimeoutID","setFinishReason","sendAutoFinishSignal","_beat","heartbeatString","_prevHeartbeatString","_this7","getActiveTransaction","maybeHub","errorsInstrumented","errorCallback","activeTransaction","sampleTransaction","samplingContext","Number","tracesSampler","tracesSampleRate","isValidSampleRate","rate","_startTransaction","_experiments","maxSpans","startIdleTransaction","onScope","tag","po","bindReporter","metric","reportAllChanges","prevValue","delta","forceReport","getNavigationEntry","__WEB_VITALS_POLYFILL__","getEntriesByType","navigation","navigationEntry","entryType","getNavigationEntryFromPerformanceTiming","getActivationStart","navEntry","activationStart","initMetric","navigationType","prerendering","rating","floor","observe","opts","PerformanceObserver","supportedEntryTypes","list","getEntries","buffered","onHidden","cb","once","onHiddenOrPageHide","visibilityState","removeEventListener","firstHiddenTime","getVisibilityWatcher","Infinity","timeStamp","interactionCountEstimate","minKnownInteractionId","maxKnownInteractionId","updateEstimate","interactionId","min","initInteractionCountPolyfill","durationThreshold","getInteractionCountForNavigation","interactionCount","longestInteractionList","longestInteractionMap","processEntry","entry","minLongestInteraction","existingInteraction","latency","interaction","b","reportedMetricIDs","whenReady","_previousCls","_previousFid","_previousLcp","_previousTtfb","_previousInp","addPerformanceInstrumentationHandler","instrumentPerformanceObserver","getCleanupCallback","instrumentCls","onReport","report","sessionValue","sessionEntries","handleEntries","hadRecentInput","firstSessionEntry","lastSessionEntry","stopListening","takeRecords","onCLS","instrumentFid","visibilityWatcher","handleEntry","processingStart","disconnect","onFID","instrumentLcp","lastEntry","capture","onLCP","instrumentTtfb","responseStart","onTTFB","instrumentInp","prevEntry","candidateInteractionIndex","inp","onINP","addMetricObserver","previousValue","stopOnCallback","DSN_REGEX","dsnToString","dsn","withPassword","pass","port","projectId","dsnFromComponents","components","makeDsn","exec","_match$slice","_match$slice$","_match$slice$2","projectMatch","dsnFromString","createEnvelope","items","forEachEnvelopeItem","envelope","envelopeItem","encodeUTF8","textEncoder","TextEncoder","encode","serializeEnvelope","envHeaders","parts","append","_step2","_iterator2","itemHeaders","payload","stringifiedPayload","buffers","_step3","totalLength","buf","merged","offset","_iterator3","buffer","concatBuffers","createAttachmentEnvelopeItem","content_type","contentType","attachment_type","attachmentType","ITEM_TYPE_TO_DATA_CATEGORY_MAP","sessions","client_report","user_report","profile","replay_event","replay_recording","check_in","feedback","statsd","envelopeItemTypeToDataCategory","getSdkMetadataForEnvelopeHeader","metadataOrEvent","sdk","_metadataOrEvent$sdk","createSpanItem","isMeasurementValue","isFinite","_startChild","_objectWithoutPropertiesLoose","_excluded","msToSec","time","getBrowserPerformanceAPI","_lcpEntry","_clsEntry","_performanceCursor","startTrackingWebVitals","fidCallback","_ref5","clsCallback","lcpCallback","addLcpInstrumentationHandler","ttfbCallback","_ref6","INP_ENTRY_MAP","click","pointerdown","pointerup","mousedown","mouseup","touchstart","touchend","mouseover","mouseout","mouseenter","mouseleave","pointerover","pointerout","pointerenter","pointerleave","dragstart","dragend","drag","dragenter","dragleave","dragover","drop","keydown","keyup","keypress","_addPerformanceNavigationTiming","eventEnd","start","setResourceEntrySizeData","dataKey","entryVal","DEFAULT_TRACE_PROPAGATION_TARGETS","defaultRequestInstrumentationOptions","traceFetch","traceXHR","enableHTTPTimings","tracingOrigins","tracePropagationTargets","instrumentOutgoingRequests","_traceFetch$traceXHR$","shouldCreateSpanForRequest","shouldCreateSpan","shouldAttachHeadersWithTargets","shouldAttachHeaders","createdSpan","spanOrigin","shouldCreateSpanResult","_handlerData$fetchDat","fullUrl","URL","getFullURL","__span","requestSpan","sentryTraceHeader","sentryBaggageHeader","newHeaders","existingBaggageHeader","newBaggageHeaders","addTracingHeadersToFetchRequest","contentLength","contentLengthNum","endSpan","instrumentFetchRequest","addHTTPTimings","__sentry_xhr_span_id__","setRequestHeader","setHeaderOnXhr","xhrCallback","cleanup","nextHopProtocol","initiatorType","isPerformanceResourceTiming","endsWith","resourceTiming","_extractNetworkProtoc","char","_nextHopProtocol$spli","extractNetworkProtocol","timingSpanData","getAbsoluteTime","redirectStart","fetchStart","domainLookupStart","domainLookupEnd","connectStart","secureConnectionStart","connectEnd","requestStart","responseEnd","resourceTimingEntryToSpanData","DEFAULT_BROWSER_TRACING_OPTIONS","markBackgroundTransactions","routingInstrumentation","customStartTransaction","startTransactionOnPageLoad","startTransactionOnLocationChange","startingUrl","pathname","enableLongTask","enableInp","interactionsSampleRate","BrowserTracing","_hasSetTracePropagationTargets","_collectWebVitals","_interactionIdToRouteNameMapping","interactionIdtoRouteNameMapping","inpCallback","interactionIdToRouteNameMapping","_ref7","find","interactionType","routeName","parentContext","replayId","userDisplay","profileId","replay_id","getSampleRate","sent_at","transport","getTransport","send","_trackINP","startTrackingINP","enableInteractions","_latestRoute","_getCurrentHub","_this$options","instrumentRouting","_createRouteTransaction","onStartRouteTransaction","_registerInteractionListener","_registerInpInteractionListener","expandedContext","_this$options2","beforeNavigate","isPageloadTransaction","_propagationContextFr","getMetaContent","modifiedContext","finalContext","idleTransaction","performanceEntries","transactionStartTime","_addRequest","_addNavigationSpans","measureStartTimestamp","measureEndTimestamp","_addMeasureSpans","firstHidden","shouldRecord","resourceUrl","parsedUrl","renderBlockingStatus","_addResourceSpans","connection","effectiveType","rtt","deviceMemory","hardwareConcurrency","_trackNavigator","_addTtfbRequestTimeToMeasurements","oldValue","measurementTimestamp","normalizedValue","fidMark","cls","measurementName","size","sources","node","_tagMetricInfo","addPerformanceEntries","inflightInteractionTransaction","registerInteractionTransaction","_data","_this3$options","currentTransaction","getSource","replay","getIntegrationByName","getReplayId","currentScope","isPerformanceEventTiming","minInteractionId","metaName","selector","metaTag","querySelector","sourceFromAttributes","sourceFromData","sourceFromMetadata","_getPrototypeOf","_isNativeReflectConstruct","valueOf","Reflect","construct","_wrapNativeSuper","isNativeFunction","Wrapper","isNativeReflectConstruct","SentryError","_Error","logLevel","getBaseApiEndpoint","getEnvelopeEndpointWithUrlEncodedAuth","tunnelOrOptions","tunnel","sdkInfo","_getIngestEndpoint","sentry_key","sentry_version","sentry_client","_encodedAuth","createMetricEnvelope","metricBucketItems","tagEntries","maybeTags","metricType","serializeMetricBuckets","createMetricEnvelopeItem","BaseClient","_integrations","_integrationsInitialized","_numProcessing","_outcomes","_hooks","_dsn","_transport","transportOptions","_process","eventFromException","_captureEvent","eventMessage","promisedEvent","eventFromMessage","sendSession","getSdkMetadata","flush","timeout","metricsAggregator","_isClientDoneProcessing","clientFinished","transportFlushed","close","getEventProcessors","eventProcessor","forceInitialize","_isEnabled","_setupIntegrations","getIntegrationById","integrationId","integrationName","addIntegration","isAlreadyInstalled","sendEvent","newItem","env","packages","enhanceEventWithSdkInfo","envelopeHeaders","createEventEnvelopeHeaders","createEventEnvelope","promise","_sendEnvelope","sendResponse","createSessionEnvelope","eventOrCount","sendClientReports","count","captureAggregateMetrics","metricsEnvelope","hook","_updateSessionFromEvent","crashed","errored","sessionNonTerminal","ticked","interval","clearInterval","_prepareEvent","_options$normalizeDep","_options$normalizeMax","normalizeMaxBreadth","prepared","dist","_options$maxValueLeng","applyClientOptions","integrationNames","applyIntegrationsMetadata","debugIdStackFramesCache","debugIdMap","_sentryDebugIds","cachedDebugIdStackFrameCache","filenameDebugIdMap","debugIdStackTrace","parsedStack","cachedParsedStack","stackFrame","debug_id","applyDebugIds","finalScope","getFinalScope","clientEventProcessors","evt","abs_path","debug_meta","images","code_file","applyDebugMeta","maxBreadth","normalizeEvent","prepareEvent","_processEvent","finalEvent","isTransaction","isTransactionEvent","beforeSendLabel","dataCategory","__sentry__","beforeSend","beforeSendTransaction","spanCountBefore","spanCountBeforeProcessing","processBeforeSend","beforeSendResult","invalidValueError","_validateBeforeSendResult","processedEvent","spanCount","droppedSpanCount","transactionInfo","_this8","_clearOutcomes","outcomes","_key$split","quantity","BrowserClient","_BaseClient","names","applySdkMetadata","SENTRY_SDK_SOURCE","_flushOutcomes","captureUserFeedback","createUserFeedbackEnvelopeItem","createUserFeedbackEnvelope","platform","discarded_events","createTransport","makeRequest","remove","task","$","taskProducer","drain","counter","capturedSetTimeout","makePromiseBuffer","bufferSize","rateLimits","filteredEnvelopeItems","limits","all","disabledUntil","isRateLimited","getEventForEnvelopeItem","filteredEnvelope","recordEnvelopeLoss","statusCode","updatedRateLimits","rateLimitHeader","retryAfterHeader","_limit$split","retryAfter","categories","namespaces","headerDelay","delay","headerDate","parse","parseRetryAfterHeader","updateRateLimits","__sentry__baseTransport__","cachedFetchImpl","makeFetchTransport","nativeFetch","fetchImpl","getNativeFetchImplementation","pendingBodySize","pendingCount","requestSize","requestOptions","referrerPolicy","keepalive","fetchOptions","UNKNOWN_FUNCTION","createFrame","chromeRegex","chromeEvalRegex","geckoREgex","geckoEvalRegex","winjsRegex","defaultStackParser","parsers","sortedParsers","skipFirst","lines","cleanedLine","localStack","stripSentryFramesAndReverse","subMatch","_extractSafariExtensi","extractSafariExtensionDetails","_extractSafariExtensi2","isSafariExtension","isSafariWebExtension","dedupeIntegration","previousEvent","currentEvent","currentMessage","previousMessage","_isSameFingerprint","_isSameStacktrace","_isSameMessageEvent","previousException","_getExceptionFromEvent","currentException","_isSameExceptionEvent","currentFrames","_getFramesFromEvent","previousFrames","frameA","frameB","currentFingerprint","previousFingerprint","showReportDialog","_hub$getStackTop","script","crossOrigin","src","dsnLike","dialogOptions","endpoint","encodedOptions","getReportDialogEndpoint","onLoad","onload","onClose","reportDialogClosedMessageHandler","injectionPoint","makeLogger","severityLevelFromString","CaptureConsole","levels","consoleHandler","Sentry","createClient","config","_event$user","scrubEmails","showFeedback","getUserData","replaysSessionSampleRate","replaysOnErrorSampleRate","captureConsole","nameAttr","userData","_app$session","_userData","userId"],"sourceRoot":""}